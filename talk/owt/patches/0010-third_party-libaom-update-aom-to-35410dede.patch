From f33d63df567cc962b1416da2b019bcf463b9dce2 Mon Sep 17 00:00:00 2001
From: Dmitry Rogozhkin <dmitry.v.rogozhkin@intel.com>
Date: Tue, 14 Mar 2023 21:39:37 -0700
Subject: [PATCH] third_party/libaom: update aom to 35410dede

This patch is a squashed difference of upstream patches for third_party/libaom:
  git diff cd30703e..ebec3576 -- libaom | patch -p1
Where cd30703e is third_party commit id used in OWT and ebec3576 is
a upstream commit id of most recent change for libaom.

Signed-off-by: Dmitry Rogozhkin <dmitry.v.rogozhkin@intel.com>
---
 libaom/BUILD.gn                                    |   22 +-
 libaom/OWNERS                                      |    6 +-
 libaom/README.chromium                             |   18 +-
 libaom/cmake_update.sh                             |    6 +-
 libaom/libaom_srcs.gni                             |   45 +-
 libaom/lint_config.sh                              |    2 +-
 libaom/source/config/config/aom_version.h          |   10 +-
 .../config/ios/arm-neon/config/aom_config.asm      |    4 +-
 .../source/config/ios/arm-neon/config/aom_config.h |    4 +-
 .../config/ios/arm-neon/config/aom_dsp_rtcd.h      |  616 ++++++-
 .../config/ios/arm-neon/config/aom_scale_rtcd.h    |    1 +
 .../source/config/ios/arm-neon/config/av1_rtcd.h   |   42 +-
 .../source/config/ios/arm64/config/aom_config.asm  |    4 +-
 libaom/source/config/ios/arm64/config/aom_config.h |    4 +-
 .../source/config/ios/arm64/config/aom_dsp_rtcd.h  |  616 ++++++-
 .../config/ios/arm64/config/aom_scale_rtcd.h       |    1 +
 libaom/source/config/ios/arm64/config/av1_rtcd.h   |   42 +-
 .../arm-neon-cpu-detect/config/aom_config.asm      |    4 +-
 .../linux/arm-neon-cpu-detect/config/aom_config.h  |    4 +-
 .../arm-neon-cpu-detect/config/aom_dsp_rtcd.h      | 1921 ++++++++++++++++----
 .../arm-neon-cpu-detect/config/aom_scale_rtcd.h    |    1 +
 .../linux/arm-neon-cpu-detect/config/av1_rtcd.h    |  349 ++--
 .../config/linux/arm-neon/config/aom_config.asm    |    4 +-
 .../config/linux/arm-neon/config/aom_config.h      |    4 +-
 .../config/linux/arm-neon/config/aom_dsp_rtcd.h    |  616 ++++++-
 .../config/linux/arm-neon/config/aom_scale_rtcd.h  |    1 +
 .../source/config/linux/arm-neon/config/av1_rtcd.h |   42 +-
 .../source/config/linux/arm/config/aom_config.asm  |    4 +-
 libaom/source/config/linux/arm/config/aom_config.h |    4 +-
 .../source/config/linux/arm/config/aom_dsp_rtcd.h  |  141 +-
 .../config/linux/arm/config/aom_scale_rtcd.h       |    1 +
 libaom/source/config/linux/arm/config/av1_rtcd.h   |   31 +-
 .../config/linux/arm64/config/aom_config.asm       |    4 +-
 .../source/config/linux/arm64/config/aom_config.h  |    4 +-
 .../config/linux/arm64/config/aom_dsp_rtcd.h       |  616 ++++++-
 .../config/linux/arm64/config/aom_scale_rtcd.h     |    1 +
 libaom/source/config/linux/arm64/config/av1_rtcd.h |   42 +-
 .../config/linux/generic/config/aom_config.asm     |    4 +-
 .../config/linux/generic/config/aom_config.h       |    4 +-
 .../config/linux/generic/config/aom_dsp_rtcd.h     |  141 +-
 .../config/linux/generic/config/aom_scale_rtcd.h   |    1 +
 .../source/config/linux/generic/config/av1_rtcd.h  |   31 +-
 .../source/config/linux/ia32/config/aom_config.asm |    2 +
 .../source/config/linux/ia32/config/aom_config.h   |    4 +-
 .../source/config/linux/ia32/config/aom_dsp_rtcd.h | 1581 +++++++++++-----
 .../config/linux/ia32/config/aom_scale_rtcd.h      |    1 +
 libaom/source/config/linux/ia32/config/av1_rtcd.h  |  545 +++---
 .../source/config/linux/x64/config/aom_config.asm  |    2 +
 libaom/source/config/linux/x64/config/aom_config.h |    4 +-
 .../source/config/linux/x64/config/aom_dsp_rtcd.h  | 1590 +++++++++++-----
 .../config/linux/x64/config/aom_scale_rtcd.h       |    1 +
 libaom/source/config/linux/x64/config/av1_rtcd.h   |  545 +++---
 .../source/config/win/arm64/config/aom_config.asm  |    4 +-
 libaom/source/config/win/arm64/config/aom_config.h |    4 +-
 .../source/config/win/arm64/config/aom_dsp_rtcd.h  |  616 ++++++-
 .../config/win/arm64/config/aom_scale_rtcd.h       |    1 +
 libaom/source/config/win/arm64/config/av1_rtcd.h   |   42 +-
 .../source/config/win/ia32/config/aom_config.asm   |    2 +
 libaom/source/config/win/ia32/config/aom_config.h  |    4 +-
 .../source/config/win/ia32/config/aom_dsp_rtcd.h   | 1581 +++++++++++-----
 .../source/config/win/ia32/config/aom_scale_rtcd.h |    1 +
 libaom/source/config/win/ia32/config/av1_rtcd.h    |  545 +++---
 libaom/source/config/win/x64/config/aom_config.asm |    2 +
 libaom/source/config/win/x64/config/aom_config.h   |    4 +-
 libaom/source/config/win/x64/config/aom_dsp_rtcd.h | 1590 +++++++++++-----
 .../source/config/win/x64/config/aom_scale_rtcd.h  |    1 +
 libaom/source/config/win/x64/config/av1_rtcd.h     |  545 +++---
 67 files changed, 11051 insertions(+), 3584 deletions(-)

diff --git a/libaom/BUILD.gn b/libaom/BUILD.gn
index 9ab8208..319b8ab 100644
--- a/libaom/BUILD.gn
+++ b/libaom/BUILD.gn
@@ -1,4 +1,4 @@
-# Copyright 2014 The Chromium Authors. All rights reserved.
+# Copyright 2014 The Chromium Authors
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
 
@@ -228,7 +228,7 @@ static_library("libaom") {
   sources += aom_util_sources
   sources += aom_av1_encoder_sources
   sources += aom_dsp_encoder_sources
-  if (use_libfuzzer) {
+  if (use_fuzzing_engine) {
     # Note this is inherited from OSS-Fuzz where the fuzzers were being run
     # with a 2 GB total allocation limit.
     if (is_msan) {
@@ -270,6 +270,24 @@ static_library("libaom") {
   public_deps = [ ":libaom_buildflags" ]
 }
 
+static_library("libaomrc") {
+  if (!is_debug && is_win) {
+    configs -= [ "//build/config/compiler:default_optimization" ]
+    configs += [ "//build/config/compiler:optimize_max" ]
+  }
+
+  sources = [
+    "//third_party/libaom/source/libaom/av1/ratectrl_rtc.cc",
+    "//third_party/libaom/source/libaom/av1/ratectrl_rtc.h",
+  ]
+  configs -= [ "//build/config/compiler:chromium_code" ]
+  configs += [ "//build/config/compiler:no_chromium_code" ]
+  configs += [ ":libaom_config" ]
+
+  public_configs = [ ":libaom_external_config" ]
+  public_deps = [ ":libaom" ]
+}
+
 fuzzer_test("libaom_av1_dec_fuzzer") {
   sources = [ "source/libaom/examples/av1_dec_fuzzer.cc" ]
   seed_corpus = "fuzz/av1_dec_fuzzer_corpus"
diff --git a/libaom/OWNERS b/libaom/OWNERS
index 665b3c3..620b71f 100644
--- a/libaom/OWNERS
+++ b/libaom/OWNERS
@@ -1,5 +1,7 @@
-tomfinegan@chromium.org
-johannkoenig@google.com
+# Primary OWNERS
 jzern@chromium.org
 jzern@google.com
 wtc@google.com
+
+# Past project member, please only use when primaries are unavailable.
+johannkoenig@google.com   # Prefer jzern@/wtc@ if available.
diff --git a/libaom/README.chromium b/libaom/README.chromium
index f8c6c3b..6e3cc25 100644
--- a/libaom/README.chromium
+++ b/libaom/README.chromium
@@ -1,10 +1,10 @@
 Name: Alliance for Open Media Video Codec
 Short Name: libaom
 URL: https://aomedia.googlesource.com/aom/
-Version: 3.4.0
-Date: Friday September 23 2022
-Revision: 6ed0c7a325496866640ea0f8b3d6862d409d9a15
-CPEPrefix: cpe:/a:aomedia:aomedia:3.4.0
+Version: 0
+Date: Wednesday March 08 2023
+Revision: 35410dede1a3a25d59e0704f2c139e737a6d6398
+CPEPrefix: cpe:/a:aomedia:aomedia:3.6.0
 License: BSD
 License File: source/libaom/LICENSE
 Security Critical: yes
@@ -25,6 +25,16 @@ Please follow these steps to update libaom source code:
 
    Use the generated commit message for the roll.
 
+Note: When running roll_dep.py on a Chrome release branch, we get the
+error message:
+   error: Ensure chromium/src is clean first (no non-merged commits).
+
+because the is_prestine() function in roll_dep.py runs git diff against
+origin/main. A workaround is to edit roll_dep.py and change
+'origin/main' to the release branch, e.g., 'branch-heads/5414' for the
+Chrome M109 release branch. Remember to change it back to 'origin/main'
+after running roll_dep.py.
+
 2. Generate the config files:
      # See prerequisites in file comments.
      ./cmake_update.sh
diff --git a/libaom/cmake_update.sh b/libaom/cmake_update.sh
index 5f22412..0c2b9dd 100755
--- a/libaom/cmake_update.sh
+++ b/libaom/cmake_update.sh
@@ -1,6 +1,6 @@
 #!/bin/bash
 #
-# Copyright (c) 2018 The Chromium Authors. All rights reserved.
+# Copyright 2018 The Chromium Authors
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
 
@@ -22,8 +22,8 @@
 # - gcc-aarch64-linux-gnu
 # - g++-aarch64-linux-gnu
 # 32bit build environment for cmake. Including but potentially not limited to:
-# - lib32gcc-11-dev
-# - lib32stdc++-11-dev
+# - lib32gcc-12-dev
+# - lib32stdc++-12-dev
 # Alternatively: treat 32bit builds like Windows and manually tweak aom_config.h
 
 set -eE
diff --git a/libaom/libaom_srcs.gni b/libaom/libaom_srcs.gni
index caa5b23..31a7114 100644
--- a/libaom/libaom_srcs.gni
+++ b/libaom/libaom_srcs.gni
@@ -96,6 +96,7 @@ aom_av1_common_sources = [
   "//third_party/libaom/source/libaom/av1/common/cfl.c",
   "//third_party/libaom/source/libaom/av1/common/cfl.h",
   "//third_party/libaom/source/libaom/av1/common/common.h",
+  "//third_party/libaom/source/libaom/av1/common/common_data.c",
   "//third_party/libaom/source/libaom/av1/common/common_data.h",
   "//third_party/libaom/source/libaom/av1/common/convolve.c",
   "//third_party/libaom/source/libaom/av1/common/convolve.h",
@@ -123,6 +124,7 @@ aom_av1_common_sources = [
   "//third_party/libaom/source/libaom/av1/common/quant_common.h",
   "//third_party/libaom/source/libaom/av1/common/reconinter.c",
   "//third_party/libaom/source/libaom/av1/common/reconinter.h",
+  "//third_party/libaom/source/libaom/av1/common/reconinter_template.inc",
   "//third_party/libaom/source/libaom/av1/common/reconintra.c",
   "//third_party/libaom/source/libaom/av1/common/reconintra.h",
   "//third_party/libaom/source/libaom/av1/common/resize.c",
@@ -181,7 +183,6 @@ aom_av1_encoder_intrin_arm_crc32 =
 
 aom_av1_encoder_intrin_avx2 = [
   "//third_party/libaom/source/libaom/av1/encoder/x86/av1_quantize_avx2.c",
-  "//third_party/libaom/source/libaom/av1/encoder/x86/corner_match_avx2.c",
   "//third_party/libaom/source/libaom/av1/encoder/x86/error_intrin_avx2.c",
   "//third_party/libaom/source/libaom/av1/encoder/x86/av1_fwd_txfm_avx2.h",
   "//third_party/libaom/source/libaom/av1/encoder/x86/av1_fwd_txfm2d_avx2.c",
@@ -228,7 +229,6 @@ aom_av1_encoder_intrin_sse3 =
 aom_av1_encoder_intrin_sse4_1 = [
   "//third_party/libaom/source/libaom/av1/encoder/x86/av1_fwd_txfm1d_sse4.c",
   "//third_party/libaom/source/libaom/av1/encoder/x86/av1_fwd_txfm2d_sse4.c",
-  "//third_party/libaom/source/libaom/av1/encoder/x86/corner_match_sse4.c",
   "//third_party/libaom/source/libaom/av1/encoder/x86/encodetxb_sse4.c",
   "//third_party/libaom/source/libaom/av1/encoder/x86/highbd_fwd_txfm_sse4.c",
   "//third_party/libaom/source/libaom/av1/encoder/x86/rdopt_sse4.c",
@@ -269,10 +269,6 @@ aom_av1_encoder_sources = [
   "//third_party/libaom/source/libaom/av1/encoder/compound_type.h",
   "//third_party/libaom/source/libaom/av1/encoder/context_tree.c",
   "//third_party/libaom/source/libaom/av1/encoder/context_tree.h",
-  "//third_party/libaom/source/libaom/av1/encoder/corner_detect.c",
-  "//third_party/libaom/source/libaom/av1/encoder/corner_detect.h",
-  "//third_party/libaom/source/libaom/av1/encoder/corner_match.c",
-  "//third_party/libaom/source/libaom/av1/encoder/corner_match.h",
   "//third_party/libaom/source/libaom/av1/encoder/cost.c",
   "//third_party/libaom/source/libaom/av1/encoder/cost.h",
   "//third_party/libaom/source/libaom/av1/encoder/dwt.c",
@@ -327,6 +323,7 @@ aom_av1_encoder_sources = [
   "//third_party/libaom/source/libaom/av1/encoder/motion_search_facade.h",
   "//third_party/libaom/source/libaom/av1/encoder/mv_prec.c",
   "//third_party/libaom/source/libaom/av1/encoder/mv_prec.h",
+  "//third_party/libaom/source/libaom/av1/encoder/nonrd_opt.c",
   "//third_party/libaom/source/libaom/av1/encoder/nonrd_opt.h",
   "//third_party/libaom/source/libaom/av1/encoder/nonrd_pickmode.c",
   "//third_party/libaom/source/libaom/av1/encoder/palette.c",
@@ -340,8 +337,6 @@ aom_av1_encoder_sources = [
   "//third_party/libaom/source/libaom/av1/encoder/pickcdef.h",
   "//third_party/libaom/source/libaom/av1/encoder/picklpf.c",
   "//third_party/libaom/source/libaom/av1/encoder/pickrst.h",
-  "//third_party/libaom/source/libaom/av1/encoder/ransac.c",
-  "//third_party/libaom/source/libaom/av1/encoder/ransac.h",
   "//third_party/libaom/source/libaom/av1/encoder/ratectrl.c",
   "//third_party/libaom/source/libaom/av1/encoder/ratectrl.h",
   "//third_party/libaom/source/libaom/av1/encoder/rc_utils.h",
@@ -408,6 +403,11 @@ aom_dsp_common_intrin_avx2 = [
   "//third_party/libaom/source/libaom/aom_dsp/x86/loopfilter_avx2.c",
   "//third_party/libaom/source/libaom/aom_dsp/x86/blend_a64_mask_avx2.c",
   "//third_party/libaom/source/libaom/aom_dsp/x86/bitdepth_conversion_avx2.h",
+  "//third_party/libaom/source/libaom/third_party/SVT-AV1/convolve_2d_avx2.h",
+  "//third_party/libaom/source/libaom/third_party/SVT-AV1/convolve_avx2.h",
+  "//third_party/libaom/source/libaom/third_party/SVT-AV1/EbMemory_AVX2.h",
+  "//third_party/libaom/source/libaom/third_party/SVT-AV1/EbMemory_SSE4_1.h",
+  "//third_party/libaom/source/libaom/third_party/SVT-AV1/synonyms.h",
 ]
 
 aom_dsp_common_intrin_neon = [
@@ -539,10 +539,12 @@ aom_dsp_encoder_intrin_avx2 = [
 aom_dsp_encoder_intrin_neon = [
   "//third_party/libaom/source/libaom/aom_dsp/arm/sad4d_neon.c",
   "//third_party/libaom/source/libaom/aom_dsp/arm/sad_neon.c",
+  "//third_party/libaom/source/libaom/aom_dsp/arm/masked_sad_neon.c",
   "//third_party/libaom/source/libaom/aom_dsp/arm/subpel_variance_neon.c",
   "//third_party/libaom/source/libaom/aom_dsp/arm/variance_neon.c",
   "//third_party/libaom/source/libaom/aom_dsp/arm/hadamard_neon.c",
   "//third_party/libaom/source/libaom/aom_dsp/arm/avg_neon.c",
+  "//third_party/libaom/source/libaom/aom_dsp/arm/obmc_variance_neon.c",
   "//third_party/libaom/source/libaom/aom_dsp/arm/sse_neon.c",
   "//third_party/libaom/source/libaom/aom_dsp/arm/sum_squares_neon.c",
 ]
@@ -621,20 +623,6 @@ aom_mem_sources = [
 
 aom_ports_asm_x86 = [ "//third_party/libaom/source/libaom/aom_ports/float.asm" ]
 
-aom_rc_interface_sources = [
-  "//third_party/libaom/source/libaom/common/y4minput.c",
-  "//third_party/libaom/source/libaom/common/y4minput.h",
-  "//third_party/libaom/source/libaom/test/codec_factory.h",
-  "//third_party/libaom/source/libaom/test/decode_test_driver.cc",
-  "//third_party/libaom/source/libaom/test/decode_test_driver.h",
-  "//third_party/libaom/source/libaom/test/encode_test_driver.cc",
-  "//third_party/libaom/source/libaom/test/encode_test_driver.h",
-  "//third_party/libaom/source/libaom/test/ratectrl_rtc_test.cc",
-  "//third_party/libaom/source/libaom/test/test_aom_rc_interface.cc",
-  "//third_party/libaom/source/libaom/test/y4m_video_source.h",
-  "//third_party/libaom/source/libaom/test/yuv_video_source.h",
-]
-
 aom_rtcd_sources = [
   "//third_party/libaom/source/libaom/aom_dsp/aom_dsp_rtcd.c",
   "//third_party/libaom/source/libaom/aom_scale/aom_scale_rtcd.c",
@@ -688,16 +676,6 @@ aom_webm_encoder_sources = [
   "//third_party/libaom/source/libaom/common/webmenc.h",
 ]
 
-av1_rc_qmode_sources = [
-  "//third_party/libaom/source/libaom/common/tools_common.c",
-  "//third_party/libaom/source/libaom/common/tools_common.h",
-  "//third_party/libaom/source/libaom/common/y4minput.c",
-  "//third_party/libaom/source/libaom/common/y4minput.h",
-  "//third_party/libaom/source/libaom/test/ducky_encode_test.cc",
-  "//third_party/libaom/source/libaom/test/mock_ratectrl_qmode.h",
-  "//third_party/libaom/source/libaom/test/ratectrl_qmode_test.cc",
-]
-
 # Files below this line are generated by the libaom build system.
 
 aom_rtcd_sources_gen = [
@@ -713,6 +691,3 @@ aom_sources_gen = [
 
 aom_version_sources_gen =
     [ "//third_party/libaom/source/libaom/config/aom_version.h" ]
-
-av1_rc_qmode_sources_gen =
-    [ "//third_party/libaom/source/libaom/gen_src/usage_exit.c" ]
diff --git a/libaom/lint_config.sh b/libaom/lint_config.sh
index adab4d6..1c02fb8 100755
--- a/libaom/lint_config.sh
+++ b/libaom/lint_config.sh
@@ -1,6 +1,6 @@
 #!/bin/bash
 #
-# Copyright (c) 2012 The Chromium Authors. All rights reserved.
+# Copyright 2012 The Chromium Authors
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
 
diff --git a/libaom/source/config/config/aom_version.h b/libaom/source/config/config/aom_version.h
index ecf694a..2080bec 100644
--- a/libaom/source/config/config/aom_version.h
+++ b/libaom/source/config/config/aom_version.h
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022, Alliance for Open Media. All rights reserved
+ * Copyright (c) 2023, Alliance for Open Media. All rights reserved
  *
  * This source code is subject to the terms of the BSD 2 Clause License and
  * the Alliance for Open Media Patent License 1.0. If the BSD 2 Clause License
@@ -10,10 +10,10 @@
  */
 
 #define VERSION_MAJOR 3
-#define VERSION_MINOR 5
+#define VERSION_MINOR 6
 #define VERSION_PATCH 0
-#define VERSION_EXTRA "242-g6ed0c7a32"
+#define VERSION_EXTRA "343-g35410dede"
 #define VERSION_PACKED \
   ((VERSION_MAJOR << 16) | (VERSION_MINOR << 8) | (VERSION_PATCH))
-#define VERSION_STRING_NOSP "3.5.0-242-g6ed0c7a32"
-#define VERSION_STRING " 3.5.0-242-g6ed0c7a32"
+#define VERSION_STRING_NOSP "3.6.0-343-g35410dede"
+#define VERSION_STRING " 3.6.0-343-g35410dede"
diff --git a/libaom/source/config/ios/arm-neon/config/aom_config.asm b/libaom/source/config/ios/arm-neon/config/aom_config.asm
index c5ebd6a..56f39b6 100644
--- a/libaom/source/config/ios/arm-neon/config/aom_config.asm
+++ b/libaom/source/config/ios/arm-neon/config/aom_config.asm
@@ -1,5 +1,5 @@
 ;
-; Copyright (c) 2022, Alliance for Open Media. All rights reserved
+; Copyright (c) 2023, Alliance for Open Media. All rights reserved
 ;
 ; This source code is subject to the terms of the BSD 2 Clause License and
 ; the Alliance for Open Media Patent License 1.0. If the BSD 2 Clause License
@@ -46,6 +46,7 @@ CONFIG_NN_V2 equ 0
 CONFIG_NORMAL_TILE_MODE equ 1
 CONFIG_OPTICAL_FLOW_API equ 0
 CONFIG_OS_SUPPORT equ 1
+CONFIG_OUTPUT_FRAME_SIZE equ 0
 CONFIG_PARTITION_SEARCH_ORDER equ 0
 CONFIG_PIC equ 1
 CONFIG_RATECTRL_LOG equ 0
@@ -54,6 +55,7 @@ CONFIG_RD_DEBUG equ 0
 CONFIG_REALTIME_ONLY equ 1
 CONFIG_RT_ML_PARTITIONING equ 0
 CONFIG_RUNTIME_CPU_DETECT equ 0
+CONFIG_SALIENCY_MAP equ 0
 CONFIG_SHARED equ 0
 CONFIG_SIZE_LIMIT equ 1
 CONFIG_SPATIAL_RESAMPLING equ 1
diff --git a/libaom/source/config/ios/arm-neon/config/aom_config.h b/libaom/source/config/ios/arm-neon/config/aom_config.h
index dbbde99..ad39421 100644
--- a/libaom/source/config/ios/arm-neon/config/aom_config.h
+++ b/libaom/source/config/ios/arm-neon/config/aom_config.h
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022, Alliance for Open Media. All rights reserved
+ * Copyright (c) 2023, Alliance for Open Media. All rights reserved
  *
  * This source code is subject to the terms of the BSD 2 Clause License and
  * the Alliance for Open Media Patent License 1.0. If the BSD 2 Clause License
@@ -48,6 +48,7 @@
 #define CONFIG_NORMAL_TILE_MODE 1
 #define CONFIG_OPTICAL_FLOW_API 0
 #define CONFIG_OS_SUPPORT 1
+#define CONFIG_OUTPUT_FRAME_SIZE 0
 #define CONFIG_PARTITION_SEARCH_ORDER 0
 #define CONFIG_PIC 1
 #define CONFIG_RATECTRL_LOG 0
@@ -56,6 +57,7 @@
 #define CONFIG_REALTIME_ONLY 1
 #define CONFIG_RT_ML_PARTITIONING 0
 #define CONFIG_RUNTIME_CPU_DETECT 0
+#define CONFIG_SALIENCY_MAP 0
 #define CONFIG_SHARED 0
 #define CONFIG_SIZE_LIMIT 1
 #define CONFIG_SPATIAL_RESAMPLING 1
diff --git a/libaom/source/config/ios/arm-neon/config/aom_dsp_rtcd.h b/libaom/source/config/ios/arm-neon/config/aom_dsp_rtcd.h
index 78b5bb8..5e621eb 100644
--- a/libaom/source/config/ios/arm-neon/config/aom_dsp_rtcd.h
+++ b/libaom/source/config/ios/arm-neon/config/aom_dsp_rtcd.h
@@ -1109,19 +1109,43 @@ void aom_get_blk_sse_sum_c(const int16_t* data,
 unsigned int aom_get_mb_ss_c(const int16_t*);
 #define aom_get_mb_ss aom_get_mb_ss_c
 
-void aom_get_sse_sum_8x8_quad_c(const uint8_t* src_ptr,
-                                int source_stride,
-                                const uint8_t* ref_ptr,
-                                int ref_stride,
-                                unsigned int* sse,
-                                int* sum);
-void aom_get_sse_sum_8x8_quad_neon(const uint8_t* src_ptr,
-                                   int source_stride,
-                                   const uint8_t* ref_ptr,
-                                   int ref_stride,
-                                   unsigned int* sse,
-                                   int* sum);
-#define aom_get_sse_sum_8x8_quad aom_get_sse_sum_8x8_quad_neon
+void aom_get_var_sse_sum_16x16_dual_c(const uint8_t* src_ptr,
+                                      int source_stride,
+                                      const uint8_t* ref_ptr,
+                                      int ref_stride,
+                                      uint32_t* sse16x16,
+                                      unsigned int* tot_sse,
+                                      int* tot_sum,
+                                      uint32_t* var16x16);
+void aom_get_var_sse_sum_16x16_dual_neon(const uint8_t* src_ptr,
+                                         int source_stride,
+                                         const uint8_t* ref_ptr,
+                                         int ref_stride,
+                                         uint32_t* sse16x16,
+                                         unsigned int* tot_sse,
+                                         int* tot_sum,
+                                         uint32_t* var16x16);
+#define aom_get_var_sse_sum_16x16_dual aom_get_var_sse_sum_16x16_dual_neon
+
+void aom_get_var_sse_sum_8x8_quad_c(const uint8_t* src_ptr,
+                                    int source_stride,
+                                    const uint8_t* ref_ptr,
+                                    int ref_stride,
+                                    uint32_t* sse8x8,
+                                    int* sum8x8,
+                                    unsigned int* tot_sse,
+                                    int* tot_sum,
+                                    uint32_t* var8x8);
+void aom_get_var_sse_sum_8x8_quad_neon(const uint8_t* src_ptr,
+                                       int source_stride,
+                                       const uint8_t* ref_ptr,
+                                       int ref_stride,
+                                       uint32_t* sse8x8,
+                                       int* sum8x8,
+                                       unsigned int* tot_sse,
+                                       int* tot_sum,
+                                       uint32_t* var8x8);
+#define aom_get_var_sse_sum_8x8_quad aom_get_var_sse_sum_8x8_quad_neon
 
 void aom_h_predictor_16x16_c(uint8_t* dst,
                              ptrdiff_t y_stride,
@@ -1264,12 +1288,18 @@ void aom_hadamard_16x16_neon(const int16_t* src_diff,
 void aom_hadamard_32x32_c(const int16_t* src_diff,
                           ptrdiff_t src_stride,
                           tran_low_t* coeff);
-#define aom_hadamard_32x32 aom_hadamard_32x32_c
+void aom_hadamard_32x32_neon(const int16_t* src_diff,
+                             ptrdiff_t src_stride,
+                             tran_low_t* coeff);
+#define aom_hadamard_32x32 aom_hadamard_32x32_neon
 
 void aom_hadamard_4x4_c(const int16_t* src_diff,
                         ptrdiff_t src_stride,
                         tran_low_t* coeff);
-#define aom_hadamard_4x4 aom_hadamard_4x4_c
+void aom_hadamard_4x4_neon(const int16_t* src_diff,
+                           ptrdiff_t src_stride,
+                           tran_low_t* coeff);
+#define aom_hadamard_4x4 aom_hadamard_4x4_neon
 
 void aom_hadamard_8x8_c(const int16_t* src_diff,
                         ptrdiff_t src_stride,
@@ -1718,7 +1748,15 @@ unsigned int aom_masked_sad128x128_c(const uint8_t* src,
                                      const uint8_t* msk,
                                      int msk_stride,
                                      int invert_mask);
-#define aom_masked_sad128x128 aom_masked_sad128x128_c
+unsigned int aom_masked_sad128x128_neon(const uint8_t* src,
+                                        int src_stride,
+                                        const uint8_t* ref,
+                                        int ref_stride,
+                                        const uint8_t* second_pred,
+                                        const uint8_t* msk,
+                                        int msk_stride,
+                                        int invert_mask);
+#define aom_masked_sad128x128 aom_masked_sad128x128_neon
 
 void aom_masked_sad128x128x4d_c(const uint8_t* src,
                                 int src_stride,
@@ -1739,7 +1777,15 @@ unsigned int aom_masked_sad128x64_c(const uint8_t* src,
                                     const uint8_t* msk,
                                     int msk_stride,
                                     int invert_mask);
-#define aom_masked_sad128x64 aom_masked_sad128x64_c
+unsigned int aom_masked_sad128x64_neon(const uint8_t* src,
+                                       int src_stride,
+                                       const uint8_t* ref,
+                                       int ref_stride,
+                                       const uint8_t* second_pred,
+                                       const uint8_t* msk,
+                                       int msk_stride,
+                                       int invert_mask);
+#define aom_masked_sad128x64 aom_masked_sad128x64_neon
 
 void aom_masked_sad128x64x4d_c(const uint8_t* src,
                                int src_stride,
@@ -1760,7 +1806,15 @@ unsigned int aom_masked_sad16x16_c(const uint8_t* src,
                                    const uint8_t* msk,
                                    int msk_stride,
                                    int invert_mask);
-#define aom_masked_sad16x16 aom_masked_sad16x16_c
+unsigned int aom_masked_sad16x16_neon(const uint8_t* src,
+                                      int src_stride,
+                                      const uint8_t* ref,
+                                      int ref_stride,
+                                      const uint8_t* second_pred,
+                                      const uint8_t* msk,
+                                      int msk_stride,
+                                      int invert_mask);
+#define aom_masked_sad16x16 aom_masked_sad16x16_neon
 
 void aom_masked_sad16x16x4d_c(const uint8_t* src,
                               int src_stride,
@@ -1781,7 +1835,15 @@ unsigned int aom_masked_sad16x32_c(const uint8_t* src,
                                    const uint8_t* msk,
                                    int msk_stride,
                                    int invert_mask);
-#define aom_masked_sad16x32 aom_masked_sad16x32_c
+unsigned int aom_masked_sad16x32_neon(const uint8_t* src,
+                                      int src_stride,
+                                      const uint8_t* ref,
+                                      int ref_stride,
+                                      const uint8_t* second_pred,
+                                      const uint8_t* msk,
+                                      int msk_stride,
+                                      int invert_mask);
+#define aom_masked_sad16x32 aom_masked_sad16x32_neon
 
 void aom_masked_sad16x32x4d_c(const uint8_t* src,
                               int src_stride,
@@ -1802,7 +1864,15 @@ unsigned int aom_masked_sad16x8_c(const uint8_t* src,
                                   const uint8_t* msk,
                                   int msk_stride,
                                   int invert_mask);
-#define aom_masked_sad16x8 aom_masked_sad16x8_c
+unsigned int aom_masked_sad16x8_neon(const uint8_t* src,
+                                     int src_stride,
+                                     const uint8_t* ref,
+                                     int ref_stride,
+                                     const uint8_t* second_pred,
+                                     const uint8_t* msk,
+                                     int msk_stride,
+                                     int invert_mask);
+#define aom_masked_sad16x8 aom_masked_sad16x8_neon
 
 void aom_masked_sad16x8x4d_c(const uint8_t* src,
                              int src_stride,
@@ -1823,7 +1893,15 @@ unsigned int aom_masked_sad32x16_c(const uint8_t* src,
                                    const uint8_t* msk,
                                    int msk_stride,
                                    int invert_mask);
-#define aom_masked_sad32x16 aom_masked_sad32x16_c
+unsigned int aom_masked_sad32x16_neon(const uint8_t* src,
+                                      int src_stride,
+                                      const uint8_t* ref,
+                                      int ref_stride,
+                                      const uint8_t* second_pred,
+                                      const uint8_t* msk,
+                                      int msk_stride,
+                                      int invert_mask);
+#define aom_masked_sad32x16 aom_masked_sad32x16_neon
 
 void aom_masked_sad32x16x4d_c(const uint8_t* src,
                               int src_stride,
@@ -1844,7 +1922,15 @@ unsigned int aom_masked_sad32x32_c(const uint8_t* src,
                                    const uint8_t* msk,
                                    int msk_stride,
                                    int invert_mask);
-#define aom_masked_sad32x32 aom_masked_sad32x32_c
+unsigned int aom_masked_sad32x32_neon(const uint8_t* src,
+                                      int src_stride,
+                                      const uint8_t* ref,
+                                      int ref_stride,
+                                      const uint8_t* second_pred,
+                                      const uint8_t* msk,
+                                      int msk_stride,
+                                      int invert_mask);
+#define aom_masked_sad32x32 aom_masked_sad32x32_neon
 
 void aom_masked_sad32x32x4d_c(const uint8_t* src,
                               int src_stride,
@@ -1865,7 +1951,15 @@ unsigned int aom_masked_sad32x64_c(const uint8_t* src,
                                    const uint8_t* msk,
                                    int msk_stride,
                                    int invert_mask);
-#define aom_masked_sad32x64 aom_masked_sad32x64_c
+unsigned int aom_masked_sad32x64_neon(const uint8_t* src,
+                                      int src_stride,
+                                      const uint8_t* ref,
+                                      int ref_stride,
+                                      const uint8_t* second_pred,
+                                      const uint8_t* msk,
+                                      int msk_stride,
+                                      int invert_mask);
+#define aom_masked_sad32x64 aom_masked_sad32x64_neon
 
 void aom_masked_sad32x64x4d_c(const uint8_t* src,
                               int src_stride,
@@ -1886,7 +1980,15 @@ unsigned int aom_masked_sad4x4_c(const uint8_t* src,
                                  const uint8_t* msk,
                                  int msk_stride,
                                  int invert_mask);
-#define aom_masked_sad4x4 aom_masked_sad4x4_c
+unsigned int aom_masked_sad4x4_neon(const uint8_t* src,
+                                    int src_stride,
+                                    const uint8_t* ref,
+                                    int ref_stride,
+                                    const uint8_t* second_pred,
+                                    const uint8_t* msk,
+                                    int msk_stride,
+                                    int invert_mask);
+#define aom_masked_sad4x4 aom_masked_sad4x4_neon
 
 void aom_masked_sad4x4x4d_c(const uint8_t* src,
                             int src_stride,
@@ -1907,7 +2009,15 @@ unsigned int aom_masked_sad4x8_c(const uint8_t* src,
                                  const uint8_t* msk,
                                  int msk_stride,
                                  int invert_mask);
-#define aom_masked_sad4x8 aom_masked_sad4x8_c
+unsigned int aom_masked_sad4x8_neon(const uint8_t* src,
+                                    int src_stride,
+                                    const uint8_t* ref,
+                                    int ref_stride,
+                                    const uint8_t* second_pred,
+                                    const uint8_t* msk,
+                                    int msk_stride,
+                                    int invert_mask);
+#define aom_masked_sad4x8 aom_masked_sad4x8_neon
 
 void aom_masked_sad4x8x4d_c(const uint8_t* src,
                             int src_stride,
@@ -1928,7 +2038,15 @@ unsigned int aom_masked_sad64x128_c(const uint8_t* src,
                                     const uint8_t* msk,
                                     int msk_stride,
                                     int invert_mask);
-#define aom_masked_sad64x128 aom_masked_sad64x128_c
+unsigned int aom_masked_sad64x128_neon(const uint8_t* src,
+                                       int src_stride,
+                                       const uint8_t* ref,
+                                       int ref_stride,
+                                       const uint8_t* second_pred,
+                                       const uint8_t* msk,
+                                       int msk_stride,
+                                       int invert_mask);
+#define aom_masked_sad64x128 aom_masked_sad64x128_neon
 
 void aom_masked_sad64x128x4d_c(const uint8_t* src,
                                int src_stride,
@@ -1949,7 +2067,15 @@ unsigned int aom_masked_sad64x32_c(const uint8_t* src,
                                    const uint8_t* msk,
                                    int msk_stride,
                                    int invert_mask);
-#define aom_masked_sad64x32 aom_masked_sad64x32_c
+unsigned int aom_masked_sad64x32_neon(const uint8_t* src,
+                                      int src_stride,
+                                      const uint8_t* ref,
+                                      int ref_stride,
+                                      const uint8_t* second_pred,
+                                      const uint8_t* msk,
+                                      int msk_stride,
+                                      int invert_mask);
+#define aom_masked_sad64x32 aom_masked_sad64x32_neon
 
 void aom_masked_sad64x32x4d_c(const uint8_t* src,
                               int src_stride,
@@ -1970,7 +2096,15 @@ unsigned int aom_masked_sad64x64_c(const uint8_t* src,
                                    const uint8_t* msk,
                                    int msk_stride,
                                    int invert_mask);
-#define aom_masked_sad64x64 aom_masked_sad64x64_c
+unsigned int aom_masked_sad64x64_neon(const uint8_t* src,
+                                      int src_stride,
+                                      const uint8_t* ref,
+                                      int ref_stride,
+                                      const uint8_t* second_pred,
+                                      const uint8_t* msk,
+                                      int msk_stride,
+                                      int invert_mask);
+#define aom_masked_sad64x64 aom_masked_sad64x64_neon
 
 void aom_masked_sad64x64x4d_c(const uint8_t* src,
                               int src_stride,
@@ -1991,7 +2125,15 @@ unsigned int aom_masked_sad8x16_c(const uint8_t* src,
                                   const uint8_t* msk,
                                   int msk_stride,
                                   int invert_mask);
-#define aom_masked_sad8x16 aom_masked_sad8x16_c
+unsigned int aom_masked_sad8x16_neon(const uint8_t* src,
+                                     int src_stride,
+                                     const uint8_t* ref,
+                                     int ref_stride,
+                                     const uint8_t* second_pred,
+                                     const uint8_t* msk,
+                                     int msk_stride,
+                                     int invert_mask);
+#define aom_masked_sad8x16 aom_masked_sad8x16_neon
 
 void aom_masked_sad8x16x4d_c(const uint8_t* src,
                              int src_stride,
@@ -2012,7 +2154,15 @@ unsigned int aom_masked_sad8x4_c(const uint8_t* src,
                                  const uint8_t* msk,
                                  int msk_stride,
                                  int invert_mask);
-#define aom_masked_sad8x4 aom_masked_sad8x4_c
+unsigned int aom_masked_sad8x4_neon(const uint8_t* src,
+                                    int src_stride,
+                                    const uint8_t* ref,
+                                    int ref_stride,
+                                    const uint8_t* second_pred,
+                                    const uint8_t* msk,
+                                    int msk_stride,
+                                    int invert_mask);
+#define aom_masked_sad8x4 aom_masked_sad8x4_neon
 
 void aom_masked_sad8x4x4d_c(const uint8_t* src,
                             int src_stride,
@@ -2033,7 +2183,15 @@ unsigned int aom_masked_sad8x8_c(const uint8_t* src,
                                  const uint8_t* msk,
                                  int msk_stride,
                                  int invert_mask);
-#define aom_masked_sad8x8 aom_masked_sad8x8_c
+unsigned int aom_masked_sad8x8_neon(const uint8_t* src,
+                                    int src_stride,
+                                    const uint8_t* ref,
+                                    int ref_stride,
+                                    const uint8_t* second_pred,
+                                    const uint8_t* msk,
+                                    int msk_stride,
+                                    int invert_mask);
+#define aom_masked_sad8x8 aom_masked_sad8x8_neon
 
 void aom_masked_sad8x8x4d_c(const uint8_t* src,
                             int src_stride,
@@ -2326,7 +2484,13 @@ uint64_t aom_mse_wxh_16bit_c(uint8_t* dst,
                              int sstride,
                              int w,
                              int h);
-#define aom_mse_wxh_16bit aom_mse_wxh_16bit_c
+uint64_t aom_mse_wxh_16bit_neon(uint8_t* dst,
+                                int dstride,
+                                uint16_t* src,
+                                int sstride,
+                                int w,
+                                int h);
+#define aom_mse_wxh_16bit aom_mse_wxh_16bit_neon
 
 void aom_paeth_predictor_16x16_c(uint8_t* dst,
                                  ptrdiff_t y_stride,
@@ -2619,7 +2783,19 @@ unsigned int aom_sad128x128_avg_c(const uint8_t* src_ptr,
                                   const uint8_t* ref_ptr,
                                   int ref_stride,
                                   const uint8_t* second_pred);
-#define aom_sad128x128_avg aom_sad128x128_avg_c
+unsigned int aom_sad128x128_avg_neon(const uint8_t* src_ptr,
+                                     int src_stride,
+                                     const uint8_t* ref_ptr,
+                                     int ref_stride,
+                                     const uint8_t* second_pred);
+#define aom_sad128x128_avg aom_sad128x128_avg_neon
+
+void aom_sad128x128x3d_c(const uint8_t* src_ptr,
+                         int src_stride,
+                         const uint8_t* const ref_ptr[4],
+                         int ref_stride,
+                         uint32_t sad_array[4]);
+#define aom_sad128x128x3d aom_sad128x128x3d_c
 
 void aom_sad128x128x4d_c(const uint8_t* src_ptr,
                          int src_stride,
@@ -2656,7 +2832,19 @@ unsigned int aom_sad128x64_avg_c(const uint8_t* src_ptr,
                                  const uint8_t* ref_ptr,
                                  int ref_stride,
                                  const uint8_t* second_pred);
-#define aom_sad128x64_avg aom_sad128x64_avg_c
+unsigned int aom_sad128x64_avg_neon(const uint8_t* src_ptr,
+                                    int src_stride,
+                                    const uint8_t* ref_ptr,
+                                    int ref_stride,
+                                    const uint8_t* second_pred);
+#define aom_sad128x64_avg aom_sad128x64_avg_neon
+
+void aom_sad128x64x3d_c(const uint8_t* src_ptr,
+                        int src_stride,
+                        const uint8_t* const ref_ptr[4],
+                        int ref_stride,
+                        uint32_t sad_array[4]);
+#define aom_sad128x64x3d aom_sad128x64x3d_c
 
 void aom_sad128x64x4d_c(const uint8_t* src_ptr,
                         int src_stride,
@@ -2701,7 +2889,19 @@ unsigned int aom_sad16x16_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* ref_ptr,
                                 int ref_stride,
                                 const uint8_t* second_pred);
-#define aom_sad16x16_avg aom_sad16x16_avg_c
+unsigned int aom_sad16x16_avg_neon(const uint8_t* src_ptr,
+                                   int src_stride,
+                                   const uint8_t* ref_ptr,
+                                   int ref_stride,
+                                   const uint8_t* second_pred);
+#define aom_sad16x16_avg aom_sad16x16_avg_neon
+
+void aom_sad16x16x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad16x16x3d aom_sad16x16x3d_c
 
 void aom_sad16x16x4d_c(const uint8_t* src_ptr,
                        int src_stride,
@@ -2738,7 +2938,19 @@ unsigned int aom_sad16x32_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* ref_ptr,
                                 int ref_stride,
                                 const uint8_t* second_pred);
-#define aom_sad16x32_avg aom_sad16x32_avg_c
+unsigned int aom_sad16x32_avg_neon(const uint8_t* src_ptr,
+                                   int src_stride,
+                                   const uint8_t* ref_ptr,
+                                   int ref_stride,
+                                   const uint8_t* second_pred);
+#define aom_sad16x32_avg aom_sad16x32_avg_neon
+
+void aom_sad16x32x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad16x32x3d aom_sad16x32x3d_c
 
 void aom_sad16x32x4d_c(const uint8_t* src_ptr,
                        int src_stride,
@@ -2775,7 +2987,19 @@ unsigned int aom_sad16x8_avg_c(const uint8_t* src_ptr,
                                const uint8_t* ref_ptr,
                                int ref_stride,
                                const uint8_t* second_pred);
-#define aom_sad16x8_avg aom_sad16x8_avg_c
+unsigned int aom_sad16x8_avg_neon(const uint8_t* src_ptr,
+                                  int src_stride,
+                                  const uint8_t* ref_ptr,
+                                  int ref_stride,
+                                  const uint8_t* second_pred);
+#define aom_sad16x8_avg aom_sad16x8_avg_neon
+
+void aom_sad16x8x3d_c(const uint8_t* src_ptr,
+                      int src_stride,
+                      const uint8_t* const ref_ptr[4],
+                      int ref_stride,
+                      uint32_t sad_array[4]);
+#define aom_sad16x8x3d aom_sad16x8x3d_c
 
 void aom_sad16x8x4d_c(const uint8_t* src_ptr,
                       int src_stride,
@@ -2820,7 +3044,19 @@ unsigned int aom_sad32x16_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* ref_ptr,
                                 int ref_stride,
                                 const uint8_t* second_pred);
-#define aom_sad32x16_avg aom_sad32x16_avg_c
+unsigned int aom_sad32x16_avg_neon(const uint8_t* src_ptr,
+                                   int src_stride,
+                                   const uint8_t* ref_ptr,
+                                   int ref_stride,
+                                   const uint8_t* second_pred);
+#define aom_sad32x16_avg aom_sad32x16_avg_neon
+
+void aom_sad32x16x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad32x16x3d aom_sad32x16x3d_c
 
 void aom_sad32x16x4d_c(const uint8_t* src_ptr,
                        int src_stride,
@@ -2857,7 +3093,19 @@ unsigned int aom_sad32x32_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* ref_ptr,
                                 int ref_stride,
                                 const uint8_t* second_pred);
-#define aom_sad32x32_avg aom_sad32x32_avg_c
+unsigned int aom_sad32x32_avg_neon(const uint8_t* src_ptr,
+                                   int src_stride,
+                                   const uint8_t* ref_ptr,
+                                   int ref_stride,
+                                   const uint8_t* second_pred);
+#define aom_sad32x32_avg aom_sad32x32_avg_neon
+
+void aom_sad32x32x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad32x32x3d aom_sad32x32x3d_c
 
 void aom_sad32x32x4d_c(const uint8_t* src_ptr,
                        int src_stride,
@@ -2894,7 +3142,19 @@ unsigned int aom_sad32x64_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* ref_ptr,
                                 int ref_stride,
                                 const uint8_t* second_pred);
-#define aom_sad32x64_avg aom_sad32x64_avg_c
+unsigned int aom_sad32x64_avg_neon(const uint8_t* src_ptr,
+                                   int src_stride,
+                                   const uint8_t* ref_ptr,
+                                   int ref_stride,
+                                   const uint8_t* second_pred);
+#define aom_sad32x64_avg aom_sad32x64_avg_neon
+
+void aom_sad32x64x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad32x64x3d aom_sad32x64x3d_c
 
 void aom_sad32x64x4d_c(const uint8_t* src_ptr,
                        int src_stride,
@@ -2939,7 +3199,19 @@ unsigned int aom_sad4x4_avg_c(const uint8_t* src_ptr,
                               const uint8_t* ref_ptr,
                               int ref_stride,
                               const uint8_t* second_pred);
-#define aom_sad4x4_avg aom_sad4x4_avg_c
+unsigned int aom_sad4x4_avg_neon(const uint8_t* src_ptr,
+                                 int src_stride,
+                                 const uint8_t* ref_ptr,
+                                 int ref_stride,
+                                 const uint8_t* second_pred);
+#define aom_sad4x4_avg aom_sad4x4_avg_neon
+
+void aom_sad4x4x3d_c(const uint8_t* src_ptr,
+                     int src_stride,
+                     const uint8_t* const ref_ptr[4],
+                     int ref_stride,
+                     uint32_t sad_array[4]);
+#define aom_sad4x4x3d aom_sad4x4x3d_c
 
 void aom_sad4x4x4d_c(const uint8_t* src_ptr,
                      int src_stride,
@@ -2976,7 +3248,19 @@ unsigned int aom_sad4x8_avg_c(const uint8_t* src_ptr,
                               const uint8_t* ref_ptr,
                               int ref_stride,
                               const uint8_t* second_pred);
-#define aom_sad4x8_avg aom_sad4x8_avg_c
+unsigned int aom_sad4x8_avg_neon(const uint8_t* src_ptr,
+                                 int src_stride,
+                                 const uint8_t* ref_ptr,
+                                 int ref_stride,
+                                 const uint8_t* second_pred);
+#define aom_sad4x8_avg aom_sad4x8_avg_neon
+
+void aom_sad4x8x3d_c(const uint8_t* src_ptr,
+                     int src_stride,
+                     const uint8_t* const ref_ptr[4],
+                     int ref_stride,
+                     uint32_t sad_array[4]);
+#define aom_sad4x8x3d aom_sad4x8x3d_c
 
 void aom_sad4x8x4d_c(const uint8_t* src_ptr,
                      int src_stride,
@@ -3021,7 +3305,19 @@ unsigned int aom_sad64x128_avg_c(const uint8_t* src_ptr,
                                  const uint8_t* ref_ptr,
                                  int ref_stride,
                                  const uint8_t* second_pred);
-#define aom_sad64x128_avg aom_sad64x128_avg_c
+unsigned int aom_sad64x128_avg_neon(const uint8_t* src_ptr,
+                                    int src_stride,
+                                    const uint8_t* ref_ptr,
+                                    int ref_stride,
+                                    const uint8_t* second_pred);
+#define aom_sad64x128_avg aom_sad64x128_avg_neon
+
+void aom_sad64x128x3d_c(const uint8_t* src_ptr,
+                        int src_stride,
+                        const uint8_t* const ref_ptr[4],
+                        int ref_stride,
+                        uint32_t sad_array[4]);
+#define aom_sad64x128x3d aom_sad64x128x3d_c
 
 void aom_sad64x128x4d_c(const uint8_t* src_ptr,
                         int src_stride,
@@ -3058,7 +3354,19 @@ unsigned int aom_sad64x32_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* ref_ptr,
                                 int ref_stride,
                                 const uint8_t* second_pred);
-#define aom_sad64x32_avg aom_sad64x32_avg_c
+unsigned int aom_sad64x32_avg_neon(const uint8_t* src_ptr,
+                                   int src_stride,
+                                   const uint8_t* ref_ptr,
+                                   int ref_stride,
+                                   const uint8_t* second_pred);
+#define aom_sad64x32_avg aom_sad64x32_avg_neon
+
+void aom_sad64x32x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad64x32x3d aom_sad64x32x3d_c
 
 void aom_sad64x32x4d_c(const uint8_t* src_ptr,
                        int src_stride,
@@ -3095,7 +3403,19 @@ unsigned int aom_sad64x64_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* ref_ptr,
                                 int ref_stride,
                                 const uint8_t* second_pred);
-#define aom_sad64x64_avg aom_sad64x64_avg_c
+unsigned int aom_sad64x64_avg_neon(const uint8_t* src_ptr,
+                                   int src_stride,
+                                   const uint8_t* ref_ptr,
+                                   int ref_stride,
+                                   const uint8_t* second_pred);
+#define aom_sad64x64_avg aom_sad64x64_avg_neon
+
+void aom_sad64x64x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad64x64x3d aom_sad64x64x3d_c
 
 void aom_sad64x64x4d_c(const uint8_t* src_ptr,
                        int src_stride,
@@ -3140,7 +3460,19 @@ unsigned int aom_sad8x16_avg_c(const uint8_t* src_ptr,
                                const uint8_t* ref_ptr,
                                int ref_stride,
                                const uint8_t* second_pred);
-#define aom_sad8x16_avg aom_sad8x16_avg_c
+unsigned int aom_sad8x16_avg_neon(const uint8_t* src_ptr,
+                                  int src_stride,
+                                  const uint8_t* ref_ptr,
+                                  int ref_stride,
+                                  const uint8_t* second_pred);
+#define aom_sad8x16_avg aom_sad8x16_avg_neon
+
+void aom_sad8x16x3d_c(const uint8_t* src_ptr,
+                      int src_stride,
+                      const uint8_t* const ref_ptr[4],
+                      int ref_stride,
+                      uint32_t sad_array[4]);
+#define aom_sad8x16x3d aom_sad8x16x3d_c
 
 void aom_sad8x16x4d_c(const uint8_t* src_ptr,
                       int src_stride,
@@ -3177,7 +3509,19 @@ unsigned int aom_sad8x4_avg_c(const uint8_t* src_ptr,
                               const uint8_t* ref_ptr,
                               int ref_stride,
                               const uint8_t* second_pred);
-#define aom_sad8x4_avg aom_sad8x4_avg_c
+unsigned int aom_sad8x4_avg_neon(const uint8_t* src_ptr,
+                                 int src_stride,
+                                 const uint8_t* ref_ptr,
+                                 int ref_stride,
+                                 const uint8_t* second_pred);
+#define aom_sad8x4_avg aom_sad8x4_avg_neon
+
+void aom_sad8x4x3d_c(const uint8_t* src_ptr,
+                     int src_stride,
+                     const uint8_t* const ref_ptr[4],
+                     int ref_stride,
+                     uint32_t sad_array[4]);
+#define aom_sad8x4x3d aom_sad8x4x3d_c
 
 void aom_sad8x4x4d_c(const uint8_t* src_ptr,
                      int src_stride,
@@ -3214,7 +3558,19 @@ unsigned int aom_sad8x8_avg_c(const uint8_t* src_ptr,
                               const uint8_t* ref_ptr,
                               int ref_stride,
                               const uint8_t* second_pred);
-#define aom_sad8x8_avg aom_sad8x8_avg_c
+unsigned int aom_sad8x8_avg_neon(const uint8_t* src_ptr,
+                                 int src_stride,
+                                 const uint8_t* ref_ptr,
+                                 int ref_stride,
+                                 const uint8_t* second_pred);
+#define aom_sad8x8_avg aom_sad8x8_avg_neon
+
+void aom_sad8x8x3d_c(const uint8_t* src_ptr,
+                     int src_stride,
+                     const uint8_t* const ref_ptr[4],
+                     int ref_stride,
+                     uint32_t sad_array[4]);
+#define aom_sad8x8x3d aom_sad8x8x3d_c
 
 void aom_sad8x8x4d_c(const uint8_t* src_ptr,
                      int src_stride,
@@ -4213,7 +4569,15 @@ uint32_t aom_sub_pixel_avg_variance128x128_c(const uint8_t* src_ptr,
                                              int ref_stride,
                                              uint32_t* sse,
                                              const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance128x128 aom_sub_pixel_avg_variance128x128_c
+uint32_t aom_sub_pixel_avg_variance128x128_neon(const uint8_t* src_ptr,
+                                                int source_stride,
+                                                int xoffset,
+                                                int yoffset,
+                                                const uint8_t* ref_ptr,
+                                                int ref_stride,
+                                                uint32_t* sse,
+                                                const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance128x128 aom_sub_pixel_avg_variance128x128_neon
 
 uint32_t aom_sub_pixel_avg_variance128x64_c(const uint8_t* src_ptr,
                                             int source_stride,
@@ -4223,7 +4587,15 @@ uint32_t aom_sub_pixel_avg_variance128x64_c(const uint8_t* src_ptr,
                                             int ref_stride,
                                             uint32_t* sse,
                                             const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance128x64 aom_sub_pixel_avg_variance128x64_c
+uint32_t aom_sub_pixel_avg_variance128x64_neon(const uint8_t* src_ptr,
+                                               int source_stride,
+                                               int xoffset,
+                                               int yoffset,
+                                               const uint8_t* ref_ptr,
+                                               int ref_stride,
+                                               uint32_t* sse,
+                                               const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance128x64 aom_sub_pixel_avg_variance128x64_neon
 
 uint32_t aom_sub_pixel_avg_variance16x16_c(const uint8_t* src_ptr,
                                            int source_stride,
@@ -4233,7 +4605,15 @@ uint32_t aom_sub_pixel_avg_variance16x16_c(const uint8_t* src_ptr,
                                            int ref_stride,
                                            uint32_t* sse,
                                            const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance16x16 aom_sub_pixel_avg_variance16x16_c
+uint32_t aom_sub_pixel_avg_variance16x16_neon(const uint8_t* src_ptr,
+                                              int source_stride,
+                                              int xoffset,
+                                              int yoffset,
+                                              const uint8_t* ref_ptr,
+                                              int ref_stride,
+                                              uint32_t* sse,
+                                              const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance16x16 aom_sub_pixel_avg_variance16x16_neon
 
 uint32_t aom_sub_pixel_avg_variance16x32_c(const uint8_t* src_ptr,
                                            int source_stride,
@@ -4243,7 +4623,15 @@ uint32_t aom_sub_pixel_avg_variance16x32_c(const uint8_t* src_ptr,
                                            int ref_stride,
                                            uint32_t* sse,
                                            const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance16x32 aom_sub_pixel_avg_variance16x32_c
+uint32_t aom_sub_pixel_avg_variance16x32_neon(const uint8_t* src_ptr,
+                                              int source_stride,
+                                              int xoffset,
+                                              int yoffset,
+                                              const uint8_t* ref_ptr,
+                                              int ref_stride,
+                                              uint32_t* sse,
+                                              const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance16x32 aom_sub_pixel_avg_variance16x32_neon
 
 uint32_t aom_sub_pixel_avg_variance16x8_c(const uint8_t* src_ptr,
                                           int source_stride,
@@ -4253,7 +4641,15 @@ uint32_t aom_sub_pixel_avg_variance16x8_c(const uint8_t* src_ptr,
                                           int ref_stride,
                                           uint32_t* sse,
                                           const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance16x8 aom_sub_pixel_avg_variance16x8_c
+uint32_t aom_sub_pixel_avg_variance16x8_neon(const uint8_t* src_ptr,
+                                             int source_stride,
+                                             int xoffset,
+                                             int yoffset,
+                                             const uint8_t* ref_ptr,
+                                             int ref_stride,
+                                             uint32_t* sse,
+                                             const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance16x8 aom_sub_pixel_avg_variance16x8_neon
 
 uint32_t aom_sub_pixel_avg_variance32x16_c(const uint8_t* src_ptr,
                                            int source_stride,
@@ -4263,7 +4659,15 @@ uint32_t aom_sub_pixel_avg_variance32x16_c(const uint8_t* src_ptr,
                                            int ref_stride,
                                            uint32_t* sse,
                                            const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance32x16 aom_sub_pixel_avg_variance32x16_c
+uint32_t aom_sub_pixel_avg_variance32x16_neon(const uint8_t* src_ptr,
+                                              int source_stride,
+                                              int xoffset,
+                                              int yoffset,
+                                              const uint8_t* ref_ptr,
+                                              int ref_stride,
+                                              uint32_t* sse,
+                                              const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance32x16 aom_sub_pixel_avg_variance32x16_neon
 
 uint32_t aom_sub_pixel_avg_variance32x32_c(const uint8_t* src_ptr,
                                            int source_stride,
@@ -4273,7 +4677,15 @@ uint32_t aom_sub_pixel_avg_variance32x32_c(const uint8_t* src_ptr,
                                            int ref_stride,
                                            uint32_t* sse,
                                            const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance32x32 aom_sub_pixel_avg_variance32x32_c
+uint32_t aom_sub_pixel_avg_variance32x32_neon(const uint8_t* src_ptr,
+                                              int source_stride,
+                                              int xoffset,
+                                              int yoffset,
+                                              const uint8_t* ref_ptr,
+                                              int ref_stride,
+                                              uint32_t* sse,
+                                              const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance32x32 aom_sub_pixel_avg_variance32x32_neon
 
 uint32_t aom_sub_pixel_avg_variance32x64_c(const uint8_t* src_ptr,
                                            int source_stride,
@@ -4283,7 +4695,15 @@ uint32_t aom_sub_pixel_avg_variance32x64_c(const uint8_t* src_ptr,
                                            int ref_stride,
                                            uint32_t* sse,
                                            const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance32x64 aom_sub_pixel_avg_variance32x64_c
+uint32_t aom_sub_pixel_avg_variance32x64_neon(const uint8_t* src_ptr,
+                                              int source_stride,
+                                              int xoffset,
+                                              int yoffset,
+                                              const uint8_t* ref_ptr,
+                                              int ref_stride,
+                                              uint32_t* sse,
+                                              const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance32x64 aom_sub_pixel_avg_variance32x64_neon
 
 uint32_t aom_sub_pixel_avg_variance4x4_c(const uint8_t* src_ptr,
                                          int source_stride,
@@ -4293,7 +4713,15 @@ uint32_t aom_sub_pixel_avg_variance4x4_c(const uint8_t* src_ptr,
                                          int ref_stride,
                                          uint32_t* sse,
                                          const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance4x4 aom_sub_pixel_avg_variance4x4_c
+uint32_t aom_sub_pixel_avg_variance4x4_neon(const uint8_t* src_ptr,
+                                            int source_stride,
+                                            int xoffset,
+                                            int yoffset,
+                                            const uint8_t* ref_ptr,
+                                            int ref_stride,
+                                            uint32_t* sse,
+                                            const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance4x4 aom_sub_pixel_avg_variance4x4_neon
 
 uint32_t aom_sub_pixel_avg_variance4x8_c(const uint8_t* src_ptr,
                                          int source_stride,
@@ -4303,7 +4731,15 @@ uint32_t aom_sub_pixel_avg_variance4x8_c(const uint8_t* src_ptr,
                                          int ref_stride,
                                          uint32_t* sse,
                                          const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance4x8 aom_sub_pixel_avg_variance4x8_c
+uint32_t aom_sub_pixel_avg_variance4x8_neon(const uint8_t* src_ptr,
+                                            int source_stride,
+                                            int xoffset,
+                                            int yoffset,
+                                            const uint8_t* ref_ptr,
+                                            int ref_stride,
+                                            uint32_t* sse,
+                                            const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance4x8 aom_sub_pixel_avg_variance4x8_neon
 
 uint32_t aom_sub_pixel_avg_variance64x128_c(const uint8_t* src_ptr,
                                             int source_stride,
@@ -4313,7 +4749,15 @@ uint32_t aom_sub_pixel_avg_variance64x128_c(const uint8_t* src_ptr,
                                             int ref_stride,
                                             uint32_t* sse,
                                             const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance64x128 aom_sub_pixel_avg_variance64x128_c
+uint32_t aom_sub_pixel_avg_variance64x128_neon(const uint8_t* src_ptr,
+                                               int source_stride,
+                                               int xoffset,
+                                               int yoffset,
+                                               const uint8_t* ref_ptr,
+                                               int ref_stride,
+                                               uint32_t* sse,
+                                               const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance64x128 aom_sub_pixel_avg_variance64x128_neon
 
 uint32_t aom_sub_pixel_avg_variance64x32_c(const uint8_t* src_ptr,
                                            int source_stride,
@@ -4323,7 +4767,15 @@ uint32_t aom_sub_pixel_avg_variance64x32_c(const uint8_t* src_ptr,
                                            int ref_stride,
                                            uint32_t* sse,
                                            const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance64x32 aom_sub_pixel_avg_variance64x32_c
+uint32_t aom_sub_pixel_avg_variance64x32_neon(const uint8_t* src_ptr,
+                                              int source_stride,
+                                              int xoffset,
+                                              int yoffset,
+                                              const uint8_t* ref_ptr,
+                                              int ref_stride,
+                                              uint32_t* sse,
+                                              const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance64x32 aom_sub_pixel_avg_variance64x32_neon
 
 uint32_t aom_sub_pixel_avg_variance64x64_c(const uint8_t* src_ptr,
                                            int source_stride,
@@ -4333,7 +4785,15 @@ uint32_t aom_sub_pixel_avg_variance64x64_c(const uint8_t* src_ptr,
                                            int ref_stride,
                                            uint32_t* sse,
                                            const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance64x64 aom_sub_pixel_avg_variance64x64_c
+uint32_t aom_sub_pixel_avg_variance64x64_neon(const uint8_t* src_ptr,
+                                              int source_stride,
+                                              int xoffset,
+                                              int yoffset,
+                                              const uint8_t* ref_ptr,
+                                              int ref_stride,
+                                              uint32_t* sse,
+                                              const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance64x64 aom_sub_pixel_avg_variance64x64_neon
 
 uint32_t aom_sub_pixel_avg_variance8x16_c(const uint8_t* src_ptr,
                                           int source_stride,
@@ -4343,7 +4803,15 @@ uint32_t aom_sub_pixel_avg_variance8x16_c(const uint8_t* src_ptr,
                                           int ref_stride,
                                           uint32_t* sse,
                                           const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance8x16 aom_sub_pixel_avg_variance8x16_c
+uint32_t aom_sub_pixel_avg_variance8x16_neon(const uint8_t* src_ptr,
+                                             int source_stride,
+                                             int xoffset,
+                                             int yoffset,
+                                             const uint8_t* ref_ptr,
+                                             int ref_stride,
+                                             uint32_t* sse,
+                                             const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance8x16 aom_sub_pixel_avg_variance8x16_neon
 
 uint32_t aom_sub_pixel_avg_variance8x4_c(const uint8_t* src_ptr,
                                          int source_stride,
@@ -4353,7 +4821,15 @@ uint32_t aom_sub_pixel_avg_variance8x4_c(const uint8_t* src_ptr,
                                          int ref_stride,
                                          uint32_t* sse,
                                          const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance8x4 aom_sub_pixel_avg_variance8x4_c
+uint32_t aom_sub_pixel_avg_variance8x4_neon(const uint8_t* src_ptr,
+                                            int source_stride,
+                                            int xoffset,
+                                            int yoffset,
+                                            const uint8_t* ref_ptr,
+                                            int ref_stride,
+                                            uint32_t* sse,
+                                            const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance8x4 aom_sub_pixel_avg_variance8x4_neon
 
 uint32_t aom_sub_pixel_avg_variance8x8_c(const uint8_t* src_ptr,
                                          int source_stride,
@@ -4363,7 +4839,15 @@ uint32_t aom_sub_pixel_avg_variance8x8_c(const uint8_t* src_ptr,
                                          int ref_stride,
                                          uint32_t* sse,
                                          const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance8x8 aom_sub_pixel_avg_variance8x8_c
+uint32_t aom_sub_pixel_avg_variance8x8_neon(const uint8_t* src_ptr,
+                                            int source_stride,
+                                            int xoffset,
+                                            int yoffset,
+                                            const uint8_t* ref_ptr,
+                                            int ref_stride,
+                                            uint32_t* sse,
+                                            const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance8x8 aom_sub_pixel_avg_variance8x8_neon
 
 uint32_t aom_sub_pixel_variance128x128_c(const uint8_t* src_ptr,
                                          int source_stride,
@@ -5013,8 +5497,8 @@ unsigned int aom_variance8x8_neon(const uint8_t* src_ptr,
                                   unsigned int* sse);
 #define aom_variance8x8 aom_variance8x8_neon
 
-int aom_vector_var_c(const int16_t* ref, const int16_t* src, const int bwl);
-int aom_vector_var_neon(const int16_t* ref, const int16_t* src, const int bwl);
+int aom_vector_var_c(const int16_t* ref, const int16_t* src, int bwl);
+int aom_vector_var_neon(const int16_t* ref, const int16_t* src, int bwl);
 #define aom_vector_var aom_vector_var_neon
 
 void aom_dsp_rtcd(void);
diff --git a/libaom/source/config/ios/arm-neon/config/aom_scale_rtcd.h b/libaom/source/config/ios/arm-neon/config/aom_scale_rtcd.h
index 7db7b9d..bc23102 100644
--- a/libaom/source/config/ios/arm-neon/config/aom_scale_rtcd.h
+++ b/libaom/source/config/ios/arm-neon/config/aom_scale_rtcd.h
@@ -155,6 +155,7 @@ void aom_yv12_partial_copy_y_c(const struct yv12_buffer_config* src_ybc,
 int aom_yv12_realloc_with_new_border_c(struct yv12_buffer_config* ybf,
                                        int new_border,
                                        int byte_alignment,
+                                       int num_pyramid_levels,
                                        int num_planes);
 #define aom_yv12_realloc_with_new_border aom_yv12_realloc_with_new_border_c
 
diff --git a/libaom/source/config/ios/arm-neon/config/av1_rtcd.h b/libaom/source/config/ios/arm-neon/config/av1_rtcd.h
index fd9ac83..37b5c0d 100644
--- a/libaom/source/config/ios/arm-neon/config/av1_rtcd.h
+++ b/libaom/source/config/ios/arm-neon/config/av1_rtcd.h
@@ -266,30 +266,22 @@ int64_t av1_calc_frame_error_c(const uint8_t* const ref,
                                int p_stride);
 #define av1_calc_frame_error av1_calc_frame_error_c
 
-void av1_calc_indices_dim1_c(const int* data,
-                             const int* centroids,
+void av1_calc_indices_dim1_c(const int16_t* data,
+                             const int16_t* centroids,
                              uint8_t* indices,
+                             int64_t* total_dist,
                              int n,
                              int k);
 #define av1_calc_indices_dim1 av1_calc_indices_dim1_c
 
-void av1_calc_indices_dim2_c(const int* data,
-                             const int* centroids,
+void av1_calc_indices_dim2_c(const int16_t* data,
+                             const int16_t* centroids,
                              uint8_t* indices,
+                             int64_t* total_dist,
                              int n,
                              int k);
 #define av1_calc_indices_dim2 av1_calc_indices_dim2_c
 
-double av1_compute_cross_correlation_c(unsigned char* im1,
-                                       int stride1,
-                                       int x1,
-                                       int y1,
-                                       unsigned char* im2,
-                                       int stride2,
-                                       int x2,
-                                       int y2);
-#define av1_compute_cross_correlation av1_compute_cross_correlation_c
-
 void av1_convolve_2d_scale_c(const uint8_t* src,
                              int src_stride,
                              uint8_t* dst,
@@ -765,12 +757,6 @@ void av1_get_nz_map_contexts_neon(const uint8_t* const levels,
                                   int8_t* const coeff_contexts);
 #define av1_get_nz_map_contexts av1_get_nz_map_contexts_neon
 
-void av1_highbd_fwht4x4_c(const int16_t* input, tran_low_t* output, int stride);
-void av1_highbd_fwht4x4_neon(const int16_t* input,
-                             tran_low_t* output,
-                             int stride);
-#define av1_highbd_fwht4x4 av1_highbd_fwht4x4_neon
-
 void av1_highbd_inv_txfm_add_c(const tran_low_t* input,
                                uint8_t* dest,
                                int stride,
@@ -1472,28 +1458,28 @@ void cdef_copy_rect8_16bit_to_16bit_c(uint16_t* dst,
                                       int dstride,
                                       const uint16_t* src,
                                       int sstride,
-                                      int v,
-                                      int h);
+                                      int width,
+                                      int height);
 void cdef_copy_rect8_16bit_to_16bit_neon(uint16_t* dst,
                                          int dstride,
                                          const uint16_t* src,
                                          int sstride,
-                                         int v,
-                                         int h);
+                                         int width,
+                                         int height);
 #define cdef_copy_rect8_16bit_to_16bit cdef_copy_rect8_16bit_to_16bit_neon
 
 void cdef_copy_rect8_8bit_to_16bit_c(uint16_t* dst,
                                      int dstride,
                                      const uint8_t* src,
                                      int sstride,
-                                     int v,
-                                     int h);
+                                     int width,
+                                     int height);
 void cdef_copy_rect8_8bit_to_16bit_neon(uint16_t* dst,
                                         int dstride,
                                         const uint8_t* src,
                                         int sstride,
-                                        int v,
-                                        int h);
+                                        int width,
+                                        int height);
 #define cdef_copy_rect8_8bit_to_16bit cdef_copy_rect8_8bit_to_16bit_neon
 
 void cdef_filter_16_0_c(void* dst16,
diff --git a/libaom/source/config/ios/arm64/config/aom_config.asm b/libaom/source/config/ios/arm64/config/aom_config.asm
index c5ebd6a..56f39b6 100644
--- a/libaom/source/config/ios/arm64/config/aom_config.asm
+++ b/libaom/source/config/ios/arm64/config/aom_config.asm
@@ -1,5 +1,5 @@
 ;
-; Copyright (c) 2022, Alliance for Open Media. All rights reserved
+; Copyright (c) 2023, Alliance for Open Media. All rights reserved
 ;
 ; This source code is subject to the terms of the BSD 2 Clause License and
 ; the Alliance for Open Media Patent License 1.0. If the BSD 2 Clause License
@@ -46,6 +46,7 @@ CONFIG_NN_V2 equ 0
 CONFIG_NORMAL_TILE_MODE equ 1
 CONFIG_OPTICAL_FLOW_API equ 0
 CONFIG_OS_SUPPORT equ 1
+CONFIG_OUTPUT_FRAME_SIZE equ 0
 CONFIG_PARTITION_SEARCH_ORDER equ 0
 CONFIG_PIC equ 1
 CONFIG_RATECTRL_LOG equ 0
@@ -54,6 +55,7 @@ CONFIG_RD_DEBUG equ 0
 CONFIG_REALTIME_ONLY equ 1
 CONFIG_RT_ML_PARTITIONING equ 0
 CONFIG_RUNTIME_CPU_DETECT equ 0
+CONFIG_SALIENCY_MAP equ 0
 CONFIG_SHARED equ 0
 CONFIG_SIZE_LIMIT equ 1
 CONFIG_SPATIAL_RESAMPLING equ 1
diff --git a/libaom/source/config/ios/arm64/config/aom_config.h b/libaom/source/config/ios/arm64/config/aom_config.h
index dbbde99..ad39421 100644
--- a/libaom/source/config/ios/arm64/config/aom_config.h
+++ b/libaom/source/config/ios/arm64/config/aom_config.h
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022, Alliance for Open Media. All rights reserved
+ * Copyright (c) 2023, Alliance for Open Media. All rights reserved
  *
  * This source code is subject to the terms of the BSD 2 Clause License and
  * the Alliance for Open Media Patent License 1.0. If the BSD 2 Clause License
@@ -48,6 +48,7 @@
 #define CONFIG_NORMAL_TILE_MODE 1
 #define CONFIG_OPTICAL_FLOW_API 0
 #define CONFIG_OS_SUPPORT 1
+#define CONFIG_OUTPUT_FRAME_SIZE 0
 #define CONFIG_PARTITION_SEARCH_ORDER 0
 #define CONFIG_PIC 1
 #define CONFIG_RATECTRL_LOG 0
@@ -56,6 +57,7 @@
 #define CONFIG_REALTIME_ONLY 1
 #define CONFIG_RT_ML_PARTITIONING 0
 #define CONFIG_RUNTIME_CPU_DETECT 0
+#define CONFIG_SALIENCY_MAP 0
 #define CONFIG_SHARED 0
 #define CONFIG_SIZE_LIMIT 1
 #define CONFIG_SPATIAL_RESAMPLING 1
diff --git a/libaom/source/config/ios/arm64/config/aom_dsp_rtcd.h b/libaom/source/config/ios/arm64/config/aom_dsp_rtcd.h
index 78b5bb8..5e621eb 100644
--- a/libaom/source/config/ios/arm64/config/aom_dsp_rtcd.h
+++ b/libaom/source/config/ios/arm64/config/aom_dsp_rtcd.h
@@ -1109,19 +1109,43 @@ void aom_get_blk_sse_sum_c(const int16_t* data,
 unsigned int aom_get_mb_ss_c(const int16_t*);
 #define aom_get_mb_ss aom_get_mb_ss_c
 
-void aom_get_sse_sum_8x8_quad_c(const uint8_t* src_ptr,
-                                int source_stride,
-                                const uint8_t* ref_ptr,
-                                int ref_stride,
-                                unsigned int* sse,
-                                int* sum);
-void aom_get_sse_sum_8x8_quad_neon(const uint8_t* src_ptr,
-                                   int source_stride,
-                                   const uint8_t* ref_ptr,
-                                   int ref_stride,
-                                   unsigned int* sse,
-                                   int* sum);
-#define aom_get_sse_sum_8x8_quad aom_get_sse_sum_8x8_quad_neon
+void aom_get_var_sse_sum_16x16_dual_c(const uint8_t* src_ptr,
+                                      int source_stride,
+                                      const uint8_t* ref_ptr,
+                                      int ref_stride,
+                                      uint32_t* sse16x16,
+                                      unsigned int* tot_sse,
+                                      int* tot_sum,
+                                      uint32_t* var16x16);
+void aom_get_var_sse_sum_16x16_dual_neon(const uint8_t* src_ptr,
+                                         int source_stride,
+                                         const uint8_t* ref_ptr,
+                                         int ref_stride,
+                                         uint32_t* sse16x16,
+                                         unsigned int* tot_sse,
+                                         int* tot_sum,
+                                         uint32_t* var16x16);
+#define aom_get_var_sse_sum_16x16_dual aom_get_var_sse_sum_16x16_dual_neon
+
+void aom_get_var_sse_sum_8x8_quad_c(const uint8_t* src_ptr,
+                                    int source_stride,
+                                    const uint8_t* ref_ptr,
+                                    int ref_stride,
+                                    uint32_t* sse8x8,
+                                    int* sum8x8,
+                                    unsigned int* tot_sse,
+                                    int* tot_sum,
+                                    uint32_t* var8x8);
+void aom_get_var_sse_sum_8x8_quad_neon(const uint8_t* src_ptr,
+                                       int source_stride,
+                                       const uint8_t* ref_ptr,
+                                       int ref_stride,
+                                       uint32_t* sse8x8,
+                                       int* sum8x8,
+                                       unsigned int* tot_sse,
+                                       int* tot_sum,
+                                       uint32_t* var8x8);
+#define aom_get_var_sse_sum_8x8_quad aom_get_var_sse_sum_8x8_quad_neon
 
 void aom_h_predictor_16x16_c(uint8_t* dst,
                              ptrdiff_t y_stride,
@@ -1264,12 +1288,18 @@ void aom_hadamard_16x16_neon(const int16_t* src_diff,
 void aom_hadamard_32x32_c(const int16_t* src_diff,
                           ptrdiff_t src_stride,
                           tran_low_t* coeff);
-#define aom_hadamard_32x32 aom_hadamard_32x32_c
+void aom_hadamard_32x32_neon(const int16_t* src_diff,
+                             ptrdiff_t src_stride,
+                             tran_low_t* coeff);
+#define aom_hadamard_32x32 aom_hadamard_32x32_neon
 
 void aom_hadamard_4x4_c(const int16_t* src_diff,
                         ptrdiff_t src_stride,
                         tran_low_t* coeff);
-#define aom_hadamard_4x4 aom_hadamard_4x4_c
+void aom_hadamard_4x4_neon(const int16_t* src_diff,
+                           ptrdiff_t src_stride,
+                           tran_low_t* coeff);
+#define aom_hadamard_4x4 aom_hadamard_4x4_neon
 
 void aom_hadamard_8x8_c(const int16_t* src_diff,
                         ptrdiff_t src_stride,
@@ -1718,7 +1748,15 @@ unsigned int aom_masked_sad128x128_c(const uint8_t* src,
                                      const uint8_t* msk,
                                      int msk_stride,
                                      int invert_mask);
-#define aom_masked_sad128x128 aom_masked_sad128x128_c
+unsigned int aom_masked_sad128x128_neon(const uint8_t* src,
+                                        int src_stride,
+                                        const uint8_t* ref,
+                                        int ref_stride,
+                                        const uint8_t* second_pred,
+                                        const uint8_t* msk,
+                                        int msk_stride,
+                                        int invert_mask);
+#define aom_masked_sad128x128 aom_masked_sad128x128_neon
 
 void aom_masked_sad128x128x4d_c(const uint8_t* src,
                                 int src_stride,
@@ -1739,7 +1777,15 @@ unsigned int aom_masked_sad128x64_c(const uint8_t* src,
                                     const uint8_t* msk,
                                     int msk_stride,
                                     int invert_mask);
-#define aom_masked_sad128x64 aom_masked_sad128x64_c
+unsigned int aom_masked_sad128x64_neon(const uint8_t* src,
+                                       int src_stride,
+                                       const uint8_t* ref,
+                                       int ref_stride,
+                                       const uint8_t* second_pred,
+                                       const uint8_t* msk,
+                                       int msk_stride,
+                                       int invert_mask);
+#define aom_masked_sad128x64 aom_masked_sad128x64_neon
 
 void aom_masked_sad128x64x4d_c(const uint8_t* src,
                                int src_stride,
@@ -1760,7 +1806,15 @@ unsigned int aom_masked_sad16x16_c(const uint8_t* src,
                                    const uint8_t* msk,
                                    int msk_stride,
                                    int invert_mask);
-#define aom_masked_sad16x16 aom_masked_sad16x16_c
+unsigned int aom_masked_sad16x16_neon(const uint8_t* src,
+                                      int src_stride,
+                                      const uint8_t* ref,
+                                      int ref_stride,
+                                      const uint8_t* second_pred,
+                                      const uint8_t* msk,
+                                      int msk_stride,
+                                      int invert_mask);
+#define aom_masked_sad16x16 aom_masked_sad16x16_neon
 
 void aom_masked_sad16x16x4d_c(const uint8_t* src,
                               int src_stride,
@@ -1781,7 +1835,15 @@ unsigned int aom_masked_sad16x32_c(const uint8_t* src,
                                    const uint8_t* msk,
                                    int msk_stride,
                                    int invert_mask);
-#define aom_masked_sad16x32 aom_masked_sad16x32_c
+unsigned int aom_masked_sad16x32_neon(const uint8_t* src,
+                                      int src_stride,
+                                      const uint8_t* ref,
+                                      int ref_stride,
+                                      const uint8_t* second_pred,
+                                      const uint8_t* msk,
+                                      int msk_stride,
+                                      int invert_mask);
+#define aom_masked_sad16x32 aom_masked_sad16x32_neon
 
 void aom_masked_sad16x32x4d_c(const uint8_t* src,
                               int src_stride,
@@ -1802,7 +1864,15 @@ unsigned int aom_masked_sad16x8_c(const uint8_t* src,
                                   const uint8_t* msk,
                                   int msk_stride,
                                   int invert_mask);
-#define aom_masked_sad16x8 aom_masked_sad16x8_c
+unsigned int aom_masked_sad16x8_neon(const uint8_t* src,
+                                     int src_stride,
+                                     const uint8_t* ref,
+                                     int ref_stride,
+                                     const uint8_t* second_pred,
+                                     const uint8_t* msk,
+                                     int msk_stride,
+                                     int invert_mask);
+#define aom_masked_sad16x8 aom_masked_sad16x8_neon
 
 void aom_masked_sad16x8x4d_c(const uint8_t* src,
                              int src_stride,
@@ -1823,7 +1893,15 @@ unsigned int aom_masked_sad32x16_c(const uint8_t* src,
                                    const uint8_t* msk,
                                    int msk_stride,
                                    int invert_mask);
-#define aom_masked_sad32x16 aom_masked_sad32x16_c
+unsigned int aom_masked_sad32x16_neon(const uint8_t* src,
+                                      int src_stride,
+                                      const uint8_t* ref,
+                                      int ref_stride,
+                                      const uint8_t* second_pred,
+                                      const uint8_t* msk,
+                                      int msk_stride,
+                                      int invert_mask);
+#define aom_masked_sad32x16 aom_masked_sad32x16_neon
 
 void aom_masked_sad32x16x4d_c(const uint8_t* src,
                               int src_stride,
@@ -1844,7 +1922,15 @@ unsigned int aom_masked_sad32x32_c(const uint8_t* src,
                                    const uint8_t* msk,
                                    int msk_stride,
                                    int invert_mask);
-#define aom_masked_sad32x32 aom_masked_sad32x32_c
+unsigned int aom_masked_sad32x32_neon(const uint8_t* src,
+                                      int src_stride,
+                                      const uint8_t* ref,
+                                      int ref_stride,
+                                      const uint8_t* second_pred,
+                                      const uint8_t* msk,
+                                      int msk_stride,
+                                      int invert_mask);
+#define aom_masked_sad32x32 aom_masked_sad32x32_neon
 
 void aom_masked_sad32x32x4d_c(const uint8_t* src,
                               int src_stride,
@@ -1865,7 +1951,15 @@ unsigned int aom_masked_sad32x64_c(const uint8_t* src,
                                    const uint8_t* msk,
                                    int msk_stride,
                                    int invert_mask);
-#define aom_masked_sad32x64 aom_masked_sad32x64_c
+unsigned int aom_masked_sad32x64_neon(const uint8_t* src,
+                                      int src_stride,
+                                      const uint8_t* ref,
+                                      int ref_stride,
+                                      const uint8_t* second_pred,
+                                      const uint8_t* msk,
+                                      int msk_stride,
+                                      int invert_mask);
+#define aom_masked_sad32x64 aom_masked_sad32x64_neon
 
 void aom_masked_sad32x64x4d_c(const uint8_t* src,
                               int src_stride,
@@ -1886,7 +1980,15 @@ unsigned int aom_masked_sad4x4_c(const uint8_t* src,
                                  const uint8_t* msk,
                                  int msk_stride,
                                  int invert_mask);
-#define aom_masked_sad4x4 aom_masked_sad4x4_c
+unsigned int aom_masked_sad4x4_neon(const uint8_t* src,
+                                    int src_stride,
+                                    const uint8_t* ref,
+                                    int ref_stride,
+                                    const uint8_t* second_pred,
+                                    const uint8_t* msk,
+                                    int msk_stride,
+                                    int invert_mask);
+#define aom_masked_sad4x4 aom_masked_sad4x4_neon
 
 void aom_masked_sad4x4x4d_c(const uint8_t* src,
                             int src_stride,
@@ -1907,7 +2009,15 @@ unsigned int aom_masked_sad4x8_c(const uint8_t* src,
                                  const uint8_t* msk,
                                  int msk_stride,
                                  int invert_mask);
-#define aom_masked_sad4x8 aom_masked_sad4x8_c
+unsigned int aom_masked_sad4x8_neon(const uint8_t* src,
+                                    int src_stride,
+                                    const uint8_t* ref,
+                                    int ref_stride,
+                                    const uint8_t* second_pred,
+                                    const uint8_t* msk,
+                                    int msk_stride,
+                                    int invert_mask);
+#define aom_masked_sad4x8 aom_masked_sad4x8_neon
 
 void aom_masked_sad4x8x4d_c(const uint8_t* src,
                             int src_stride,
@@ -1928,7 +2038,15 @@ unsigned int aom_masked_sad64x128_c(const uint8_t* src,
                                     const uint8_t* msk,
                                     int msk_stride,
                                     int invert_mask);
-#define aom_masked_sad64x128 aom_masked_sad64x128_c
+unsigned int aom_masked_sad64x128_neon(const uint8_t* src,
+                                       int src_stride,
+                                       const uint8_t* ref,
+                                       int ref_stride,
+                                       const uint8_t* second_pred,
+                                       const uint8_t* msk,
+                                       int msk_stride,
+                                       int invert_mask);
+#define aom_masked_sad64x128 aom_masked_sad64x128_neon
 
 void aom_masked_sad64x128x4d_c(const uint8_t* src,
                                int src_stride,
@@ -1949,7 +2067,15 @@ unsigned int aom_masked_sad64x32_c(const uint8_t* src,
                                    const uint8_t* msk,
                                    int msk_stride,
                                    int invert_mask);
-#define aom_masked_sad64x32 aom_masked_sad64x32_c
+unsigned int aom_masked_sad64x32_neon(const uint8_t* src,
+                                      int src_stride,
+                                      const uint8_t* ref,
+                                      int ref_stride,
+                                      const uint8_t* second_pred,
+                                      const uint8_t* msk,
+                                      int msk_stride,
+                                      int invert_mask);
+#define aom_masked_sad64x32 aom_masked_sad64x32_neon
 
 void aom_masked_sad64x32x4d_c(const uint8_t* src,
                               int src_stride,
@@ -1970,7 +2096,15 @@ unsigned int aom_masked_sad64x64_c(const uint8_t* src,
                                    const uint8_t* msk,
                                    int msk_stride,
                                    int invert_mask);
-#define aom_masked_sad64x64 aom_masked_sad64x64_c
+unsigned int aom_masked_sad64x64_neon(const uint8_t* src,
+                                      int src_stride,
+                                      const uint8_t* ref,
+                                      int ref_stride,
+                                      const uint8_t* second_pred,
+                                      const uint8_t* msk,
+                                      int msk_stride,
+                                      int invert_mask);
+#define aom_masked_sad64x64 aom_masked_sad64x64_neon
 
 void aom_masked_sad64x64x4d_c(const uint8_t* src,
                               int src_stride,
@@ -1991,7 +2125,15 @@ unsigned int aom_masked_sad8x16_c(const uint8_t* src,
                                   const uint8_t* msk,
                                   int msk_stride,
                                   int invert_mask);
-#define aom_masked_sad8x16 aom_masked_sad8x16_c
+unsigned int aom_masked_sad8x16_neon(const uint8_t* src,
+                                     int src_stride,
+                                     const uint8_t* ref,
+                                     int ref_stride,
+                                     const uint8_t* second_pred,
+                                     const uint8_t* msk,
+                                     int msk_stride,
+                                     int invert_mask);
+#define aom_masked_sad8x16 aom_masked_sad8x16_neon
 
 void aom_masked_sad8x16x4d_c(const uint8_t* src,
                              int src_stride,
@@ -2012,7 +2154,15 @@ unsigned int aom_masked_sad8x4_c(const uint8_t* src,
                                  const uint8_t* msk,
                                  int msk_stride,
                                  int invert_mask);
-#define aom_masked_sad8x4 aom_masked_sad8x4_c
+unsigned int aom_masked_sad8x4_neon(const uint8_t* src,
+                                    int src_stride,
+                                    const uint8_t* ref,
+                                    int ref_stride,
+                                    const uint8_t* second_pred,
+                                    const uint8_t* msk,
+                                    int msk_stride,
+                                    int invert_mask);
+#define aom_masked_sad8x4 aom_masked_sad8x4_neon
 
 void aom_masked_sad8x4x4d_c(const uint8_t* src,
                             int src_stride,
@@ -2033,7 +2183,15 @@ unsigned int aom_masked_sad8x8_c(const uint8_t* src,
                                  const uint8_t* msk,
                                  int msk_stride,
                                  int invert_mask);
-#define aom_masked_sad8x8 aom_masked_sad8x8_c
+unsigned int aom_masked_sad8x8_neon(const uint8_t* src,
+                                    int src_stride,
+                                    const uint8_t* ref,
+                                    int ref_stride,
+                                    const uint8_t* second_pred,
+                                    const uint8_t* msk,
+                                    int msk_stride,
+                                    int invert_mask);
+#define aom_masked_sad8x8 aom_masked_sad8x8_neon
 
 void aom_masked_sad8x8x4d_c(const uint8_t* src,
                             int src_stride,
@@ -2326,7 +2484,13 @@ uint64_t aom_mse_wxh_16bit_c(uint8_t* dst,
                              int sstride,
                              int w,
                              int h);
-#define aom_mse_wxh_16bit aom_mse_wxh_16bit_c
+uint64_t aom_mse_wxh_16bit_neon(uint8_t* dst,
+                                int dstride,
+                                uint16_t* src,
+                                int sstride,
+                                int w,
+                                int h);
+#define aom_mse_wxh_16bit aom_mse_wxh_16bit_neon
 
 void aom_paeth_predictor_16x16_c(uint8_t* dst,
                                  ptrdiff_t y_stride,
@@ -2619,7 +2783,19 @@ unsigned int aom_sad128x128_avg_c(const uint8_t* src_ptr,
                                   const uint8_t* ref_ptr,
                                   int ref_stride,
                                   const uint8_t* second_pred);
-#define aom_sad128x128_avg aom_sad128x128_avg_c
+unsigned int aom_sad128x128_avg_neon(const uint8_t* src_ptr,
+                                     int src_stride,
+                                     const uint8_t* ref_ptr,
+                                     int ref_stride,
+                                     const uint8_t* second_pred);
+#define aom_sad128x128_avg aom_sad128x128_avg_neon
+
+void aom_sad128x128x3d_c(const uint8_t* src_ptr,
+                         int src_stride,
+                         const uint8_t* const ref_ptr[4],
+                         int ref_stride,
+                         uint32_t sad_array[4]);
+#define aom_sad128x128x3d aom_sad128x128x3d_c
 
 void aom_sad128x128x4d_c(const uint8_t* src_ptr,
                          int src_stride,
@@ -2656,7 +2832,19 @@ unsigned int aom_sad128x64_avg_c(const uint8_t* src_ptr,
                                  const uint8_t* ref_ptr,
                                  int ref_stride,
                                  const uint8_t* second_pred);
-#define aom_sad128x64_avg aom_sad128x64_avg_c
+unsigned int aom_sad128x64_avg_neon(const uint8_t* src_ptr,
+                                    int src_stride,
+                                    const uint8_t* ref_ptr,
+                                    int ref_stride,
+                                    const uint8_t* second_pred);
+#define aom_sad128x64_avg aom_sad128x64_avg_neon
+
+void aom_sad128x64x3d_c(const uint8_t* src_ptr,
+                        int src_stride,
+                        const uint8_t* const ref_ptr[4],
+                        int ref_stride,
+                        uint32_t sad_array[4]);
+#define aom_sad128x64x3d aom_sad128x64x3d_c
 
 void aom_sad128x64x4d_c(const uint8_t* src_ptr,
                         int src_stride,
@@ -2701,7 +2889,19 @@ unsigned int aom_sad16x16_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* ref_ptr,
                                 int ref_stride,
                                 const uint8_t* second_pred);
-#define aom_sad16x16_avg aom_sad16x16_avg_c
+unsigned int aom_sad16x16_avg_neon(const uint8_t* src_ptr,
+                                   int src_stride,
+                                   const uint8_t* ref_ptr,
+                                   int ref_stride,
+                                   const uint8_t* second_pred);
+#define aom_sad16x16_avg aom_sad16x16_avg_neon
+
+void aom_sad16x16x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad16x16x3d aom_sad16x16x3d_c
 
 void aom_sad16x16x4d_c(const uint8_t* src_ptr,
                        int src_stride,
@@ -2738,7 +2938,19 @@ unsigned int aom_sad16x32_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* ref_ptr,
                                 int ref_stride,
                                 const uint8_t* second_pred);
-#define aom_sad16x32_avg aom_sad16x32_avg_c
+unsigned int aom_sad16x32_avg_neon(const uint8_t* src_ptr,
+                                   int src_stride,
+                                   const uint8_t* ref_ptr,
+                                   int ref_stride,
+                                   const uint8_t* second_pred);
+#define aom_sad16x32_avg aom_sad16x32_avg_neon
+
+void aom_sad16x32x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad16x32x3d aom_sad16x32x3d_c
 
 void aom_sad16x32x4d_c(const uint8_t* src_ptr,
                        int src_stride,
@@ -2775,7 +2987,19 @@ unsigned int aom_sad16x8_avg_c(const uint8_t* src_ptr,
                                const uint8_t* ref_ptr,
                                int ref_stride,
                                const uint8_t* second_pred);
-#define aom_sad16x8_avg aom_sad16x8_avg_c
+unsigned int aom_sad16x8_avg_neon(const uint8_t* src_ptr,
+                                  int src_stride,
+                                  const uint8_t* ref_ptr,
+                                  int ref_stride,
+                                  const uint8_t* second_pred);
+#define aom_sad16x8_avg aom_sad16x8_avg_neon
+
+void aom_sad16x8x3d_c(const uint8_t* src_ptr,
+                      int src_stride,
+                      const uint8_t* const ref_ptr[4],
+                      int ref_stride,
+                      uint32_t sad_array[4]);
+#define aom_sad16x8x3d aom_sad16x8x3d_c
 
 void aom_sad16x8x4d_c(const uint8_t* src_ptr,
                       int src_stride,
@@ -2820,7 +3044,19 @@ unsigned int aom_sad32x16_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* ref_ptr,
                                 int ref_stride,
                                 const uint8_t* second_pred);
-#define aom_sad32x16_avg aom_sad32x16_avg_c
+unsigned int aom_sad32x16_avg_neon(const uint8_t* src_ptr,
+                                   int src_stride,
+                                   const uint8_t* ref_ptr,
+                                   int ref_stride,
+                                   const uint8_t* second_pred);
+#define aom_sad32x16_avg aom_sad32x16_avg_neon
+
+void aom_sad32x16x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad32x16x3d aom_sad32x16x3d_c
 
 void aom_sad32x16x4d_c(const uint8_t* src_ptr,
                        int src_stride,
@@ -2857,7 +3093,19 @@ unsigned int aom_sad32x32_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* ref_ptr,
                                 int ref_stride,
                                 const uint8_t* second_pred);
-#define aom_sad32x32_avg aom_sad32x32_avg_c
+unsigned int aom_sad32x32_avg_neon(const uint8_t* src_ptr,
+                                   int src_stride,
+                                   const uint8_t* ref_ptr,
+                                   int ref_stride,
+                                   const uint8_t* second_pred);
+#define aom_sad32x32_avg aom_sad32x32_avg_neon
+
+void aom_sad32x32x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad32x32x3d aom_sad32x32x3d_c
 
 void aom_sad32x32x4d_c(const uint8_t* src_ptr,
                        int src_stride,
@@ -2894,7 +3142,19 @@ unsigned int aom_sad32x64_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* ref_ptr,
                                 int ref_stride,
                                 const uint8_t* second_pred);
-#define aom_sad32x64_avg aom_sad32x64_avg_c
+unsigned int aom_sad32x64_avg_neon(const uint8_t* src_ptr,
+                                   int src_stride,
+                                   const uint8_t* ref_ptr,
+                                   int ref_stride,
+                                   const uint8_t* second_pred);
+#define aom_sad32x64_avg aom_sad32x64_avg_neon
+
+void aom_sad32x64x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad32x64x3d aom_sad32x64x3d_c
 
 void aom_sad32x64x4d_c(const uint8_t* src_ptr,
                        int src_stride,
@@ -2939,7 +3199,19 @@ unsigned int aom_sad4x4_avg_c(const uint8_t* src_ptr,
                               const uint8_t* ref_ptr,
                               int ref_stride,
                               const uint8_t* second_pred);
-#define aom_sad4x4_avg aom_sad4x4_avg_c
+unsigned int aom_sad4x4_avg_neon(const uint8_t* src_ptr,
+                                 int src_stride,
+                                 const uint8_t* ref_ptr,
+                                 int ref_stride,
+                                 const uint8_t* second_pred);
+#define aom_sad4x4_avg aom_sad4x4_avg_neon
+
+void aom_sad4x4x3d_c(const uint8_t* src_ptr,
+                     int src_stride,
+                     const uint8_t* const ref_ptr[4],
+                     int ref_stride,
+                     uint32_t sad_array[4]);
+#define aom_sad4x4x3d aom_sad4x4x3d_c
 
 void aom_sad4x4x4d_c(const uint8_t* src_ptr,
                      int src_stride,
@@ -2976,7 +3248,19 @@ unsigned int aom_sad4x8_avg_c(const uint8_t* src_ptr,
                               const uint8_t* ref_ptr,
                               int ref_stride,
                               const uint8_t* second_pred);
-#define aom_sad4x8_avg aom_sad4x8_avg_c
+unsigned int aom_sad4x8_avg_neon(const uint8_t* src_ptr,
+                                 int src_stride,
+                                 const uint8_t* ref_ptr,
+                                 int ref_stride,
+                                 const uint8_t* second_pred);
+#define aom_sad4x8_avg aom_sad4x8_avg_neon
+
+void aom_sad4x8x3d_c(const uint8_t* src_ptr,
+                     int src_stride,
+                     const uint8_t* const ref_ptr[4],
+                     int ref_stride,
+                     uint32_t sad_array[4]);
+#define aom_sad4x8x3d aom_sad4x8x3d_c
 
 void aom_sad4x8x4d_c(const uint8_t* src_ptr,
                      int src_stride,
@@ -3021,7 +3305,19 @@ unsigned int aom_sad64x128_avg_c(const uint8_t* src_ptr,
                                  const uint8_t* ref_ptr,
                                  int ref_stride,
                                  const uint8_t* second_pred);
-#define aom_sad64x128_avg aom_sad64x128_avg_c
+unsigned int aom_sad64x128_avg_neon(const uint8_t* src_ptr,
+                                    int src_stride,
+                                    const uint8_t* ref_ptr,
+                                    int ref_stride,
+                                    const uint8_t* second_pred);
+#define aom_sad64x128_avg aom_sad64x128_avg_neon
+
+void aom_sad64x128x3d_c(const uint8_t* src_ptr,
+                        int src_stride,
+                        const uint8_t* const ref_ptr[4],
+                        int ref_stride,
+                        uint32_t sad_array[4]);
+#define aom_sad64x128x3d aom_sad64x128x3d_c
 
 void aom_sad64x128x4d_c(const uint8_t* src_ptr,
                         int src_stride,
@@ -3058,7 +3354,19 @@ unsigned int aom_sad64x32_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* ref_ptr,
                                 int ref_stride,
                                 const uint8_t* second_pred);
-#define aom_sad64x32_avg aom_sad64x32_avg_c
+unsigned int aom_sad64x32_avg_neon(const uint8_t* src_ptr,
+                                   int src_stride,
+                                   const uint8_t* ref_ptr,
+                                   int ref_stride,
+                                   const uint8_t* second_pred);
+#define aom_sad64x32_avg aom_sad64x32_avg_neon
+
+void aom_sad64x32x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad64x32x3d aom_sad64x32x3d_c
 
 void aom_sad64x32x4d_c(const uint8_t* src_ptr,
                        int src_stride,
@@ -3095,7 +3403,19 @@ unsigned int aom_sad64x64_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* ref_ptr,
                                 int ref_stride,
                                 const uint8_t* second_pred);
-#define aom_sad64x64_avg aom_sad64x64_avg_c
+unsigned int aom_sad64x64_avg_neon(const uint8_t* src_ptr,
+                                   int src_stride,
+                                   const uint8_t* ref_ptr,
+                                   int ref_stride,
+                                   const uint8_t* second_pred);
+#define aom_sad64x64_avg aom_sad64x64_avg_neon
+
+void aom_sad64x64x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad64x64x3d aom_sad64x64x3d_c
 
 void aom_sad64x64x4d_c(const uint8_t* src_ptr,
                        int src_stride,
@@ -3140,7 +3460,19 @@ unsigned int aom_sad8x16_avg_c(const uint8_t* src_ptr,
                                const uint8_t* ref_ptr,
                                int ref_stride,
                                const uint8_t* second_pred);
-#define aom_sad8x16_avg aom_sad8x16_avg_c
+unsigned int aom_sad8x16_avg_neon(const uint8_t* src_ptr,
+                                  int src_stride,
+                                  const uint8_t* ref_ptr,
+                                  int ref_stride,
+                                  const uint8_t* second_pred);
+#define aom_sad8x16_avg aom_sad8x16_avg_neon
+
+void aom_sad8x16x3d_c(const uint8_t* src_ptr,
+                      int src_stride,
+                      const uint8_t* const ref_ptr[4],
+                      int ref_stride,
+                      uint32_t sad_array[4]);
+#define aom_sad8x16x3d aom_sad8x16x3d_c
 
 void aom_sad8x16x4d_c(const uint8_t* src_ptr,
                       int src_stride,
@@ -3177,7 +3509,19 @@ unsigned int aom_sad8x4_avg_c(const uint8_t* src_ptr,
                               const uint8_t* ref_ptr,
                               int ref_stride,
                               const uint8_t* second_pred);
-#define aom_sad8x4_avg aom_sad8x4_avg_c
+unsigned int aom_sad8x4_avg_neon(const uint8_t* src_ptr,
+                                 int src_stride,
+                                 const uint8_t* ref_ptr,
+                                 int ref_stride,
+                                 const uint8_t* second_pred);
+#define aom_sad8x4_avg aom_sad8x4_avg_neon
+
+void aom_sad8x4x3d_c(const uint8_t* src_ptr,
+                     int src_stride,
+                     const uint8_t* const ref_ptr[4],
+                     int ref_stride,
+                     uint32_t sad_array[4]);
+#define aom_sad8x4x3d aom_sad8x4x3d_c
 
 void aom_sad8x4x4d_c(const uint8_t* src_ptr,
                      int src_stride,
@@ -3214,7 +3558,19 @@ unsigned int aom_sad8x8_avg_c(const uint8_t* src_ptr,
                               const uint8_t* ref_ptr,
                               int ref_stride,
                               const uint8_t* second_pred);
-#define aom_sad8x8_avg aom_sad8x8_avg_c
+unsigned int aom_sad8x8_avg_neon(const uint8_t* src_ptr,
+                                 int src_stride,
+                                 const uint8_t* ref_ptr,
+                                 int ref_stride,
+                                 const uint8_t* second_pred);
+#define aom_sad8x8_avg aom_sad8x8_avg_neon
+
+void aom_sad8x8x3d_c(const uint8_t* src_ptr,
+                     int src_stride,
+                     const uint8_t* const ref_ptr[4],
+                     int ref_stride,
+                     uint32_t sad_array[4]);
+#define aom_sad8x8x3d aom_sad8x8x3d_c
 
 void aom_sad8x8x4d_c(const uint8_t* src_ptr,
                      int src_stride,
@@ -4213,7 +4569,15 @@ uint32_t aom_sub_pixel_avg_variance128x128_c(const uint8_t* src_ptr,
                                              int ref_stride,
                                              uint32_t* sse,
                                              const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance128x128 aom_sub_pixel_avg_variance128x128_c
+uint32_t aom_sub_pixel_avg_variance128x128_neon(const uint8_t* src_ptr,
+                                                int source_stride,
+                                                int xoffset,
+                                                int yoffset,
+                                                const uint8_t* ref_ptr,
+                                                int ref_stride,
+                                                uint32_t* sse,
+                                                const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance128x128 aom_sub_pixel_avg_variance128x128_neon
 
 uint32_t aom_sub_pixel_avg_variance128x64_c(const uint8_t* src_ptr,
                                             int source_stride,
@@ -4223,7 +4587,15 @@ uint32_t aom_sub_pixel_avg_variance128x64_c(const uint8_t* src_ptr,
                                             int ref_stride,
                                             uint32_t* sse,
                                             const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance128x64 aom_sub_pixel_avg_variance128x64_c
+uint32_t aom_sub_pixel_avg_variance128x64_neon(const uint8_t* src_ptr,
+                                               int source_stride,
+                                               int xoffset,
+                                               int yoffset,
+                                               const uint8_t* ref_ptr,
+                                               int ref_stride,
+                                               uint32_t* sse,
+                                               const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance128x64 aom_sub_pixel_avg_variance128x64_neon
 
 uint32_t aom_sub_pixel_avg_variance16x16_c(const uint8_t* src_ptr,
                                            int source_stride,
@@ -4233,7 +4605,15 @@ uint32_t aom_sub_pixel_avg_variance16x16_c(const uint8_t* src_ptr,
                                            int ref_stride,
                                            uint32_t* sse,
                                            const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance16x16 aom_sub_pixel_avg_variance16x16_c
+uint32_t aom_sub_pixel_avg_variance16x16_neon(const uint8_t* src_ptr,
+                                              int source_stride,
+                                              int xoffset,
+                                              int yoffset,
+                                              const uint8_t* ref_ptr,
+                                              int ref_stride,
+                                              uint32_t* sse,
+                                              const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance16x16 aom_sub_pixel_avg_variance16x16_neon
 
 uint32_t aom_sub_pixel_avg_variance16x32_c(const uint8_t* src_ptr,
                                            int source_stride,
@@ -4243,7 +4623,15 @@ uint32_t aom_sub_pixel_avg_variance16x32_c(const uint8_t* src_ptr,
                                            int ref_stride,
                                            uint32_t* sse,
                                            const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance16x32 aom_sub_pixel_avg_variance16x32_c
+uint32_t aom_sub_pixel_avg_variance16x32_neon(const uint8_t* src_ptr,
+                                              int source_stride,
+                                              int xoffset,
+                                              int yoffset,
+                                              const uint8_t* ref_ptr,
+                                              int ref_stride,
+                                              uint32_t* sse,
+                                              const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance16x32 aom_sub_pixel_avg_variance16x32_neon
 
 uint32_t aom_sub_pixel_avg_variance16x8_c(const uint8_t* src_ptr,
                                           int source_stride,
@@ -4253,7 +4641,15 @@ uint32_t aom_sub_pixel_avg_variance16x8_c(const uint8_t* src_ptr,
                                           int ref_stride,
                                           uint32_t* sse,
                                           const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance16x8 aom_sub_pixel_avg_variance16x8_c
+uint32_t aom_sub_pixel_avg_variance16x8_neon(const uint8_t* src_ptr,
+                                             int source_stride,
+                                             int xoffset,
+                                             int yoffset,
+                                             const uint8_t* ref_ptr,
+                                             int ref_stride,
+                                             uint32_t* sse,
+                                             const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance16x8 aom_sub_pixel_avg_variance16x8_neon
 
 uint32_t aom_sub_pixel_avg_variance32x16_c(const uint8_t* src_ptr,
                                            int source_stride,
@@ -4263,7 +4659,15 @@ uint32_t aom_sub_pixel_avg_variance32x16_c(const uint8_t* src_ptr,
                                            int ref_stride,
                                            uint32_t* sse,
                                            const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance32x16 aom_sub_pixel_avg_variance32x16_c
+uint32_t aom_sub_pixel_avg_variance32x16_neon(const uint8_t* src_ptr,
+                                              int source_stride,
+                                              int xoffset,
+                                              int yoffset,
+                                              const uint8_t* ref_ptr,
+                                              int ref_stride,
+                                              uint32_t* sse,
+                                              const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance32x16 aom_sub_pixel_avg_variance32x16_neon
 
 uint32_t aom_sub_pixel_avg_variance32x32_c(const uint8_t* src_ptr,
                                            int source_stride,
@@ -4273,7 +4677,15 @@ uint32_t aom_sub_pixel_avg_variance32x32_c(const uint8_t* src_ptr,
                                            int ref_stride,
                                            uint32_t* sse,
                                            const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance32x32 aom_sub_pixel_avg_variance32x32_c
+uint32_t aom_sub_pixel_avg_variance32x32_neon(const uint8_t* src_ptr,
+                                              int source_stride,
+                                              int xoffset,
+                                              int yoffset,
+                                              const uint8_t* ref_ptr,
+                                              int ref_stride,
+                                              uint32_t* sse,
+                                              const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance32x32 aom_sub_pixel_avg_variance32x32_neon
 
 uint32_t aom_sub_pixel_avg_variance32x64_c(const uint8_t* src_ptr,
                                            int source_stride,
@@ -4283,7 +4695,15 @@ uint32_t aom_sub_pixel_avg_variance32x64_c(const uint8_t* src_ptr,
                                            int ref_stride,
                                            uint32_t* sse,
                                            const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance32x64 aom_sub_pixel_avg_variance32x64_c
+uint32_t aom_sub_pixel_avg_variance32x64_neon(const uint8_t* src_ptr,
+                                              int source_stride,
+                                              int xoffset,
+                                              int yoffset,
+                                              const uint8_t* ref_ptr,
+                                              int ref_stride,
+                                              uint32_t* sse,
+                                              const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance32x64 aom_sub_pixel_avg_variance32x64_neon
 
 uint32_t aom_sub_pixel_avg_variance4x4_c(const uint8_t* src_ptr,
                                          int source_stride,
@@ -4293,7 +4713,15 @@ uint32_t aom_sub_pixel_avg_variance4x4_c(const uint8_t* src_ptr,
                                          int ref_stride,
                                          uint32_t* sse,
                                          const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance4x4 aom_sub_pixel_avg_variance4x4_c
+uint32_t aom_sub_pixel_avg_variance4x4_neon(const uint8_t* src_ptr,
+                                            int source_stride,
+                                            int xoffset,
+                                            int yoffset,
+                                            const uint8_t* ref_ptr,
+                                            int ref_stride,
+                                            uint32_t* sse,
+                                            const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance4x4 aom_sub_pixel_avg_variance4x4_neon
 
 uint32_t aom_sub_pixel_avg_variance4x8_c(const uint8_t* src_ptr,
                                          int source_stride,
@@ -4303,7 +4731,15 @@ uint32_t aom_sub_pixel_avg_variance4x8_c(const uint8_t* src_ptr,
                                          int ref_stride,
                                          uint32_t* sse,
                                          const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance4x8 aom_sub_pixel_avg_variance4x8_c
+uint32_t aom_sub_pixel_avg_variance4x8_neon(const uint8_t* src_ptr,
+                                            int source_stride,
+                                            int xoffset,
+                                            int yoffset,
+                                            const uint8_t* ref_ptr,
+                                            int ref_stride,
+                                            uint32_t* sse,
+                                            const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance4x8 aom_sub_pixel_avg_variance4x8_neon
 
 uint32_t aom_sub_pixel_avg_variance64x128_c(const uint8_t* src_ptr,
                                             int source_stride,
@@ -4313,7 +4749,15 @@ uint32_t aom_sub_pixel_avg_variance64x128_c(const uint8_t* src_ptr,
                                             int ref_stride,
                                             uint32_t* sse,
                                             const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance64x128 aom_sub_pixel_avg_variance64x128_c
+uint32_t aom_sub_pixel_avg_variance64x128_neon(const uint8_t* src_ptr,
+                                               int source_stride,
+                                               int xoffset,
+                                               int yoffset,
+                                               const uint8_t* ref_ptr,
+                                               int ref_stride,
+                                               uint32_t* sse,
+                                               const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance64x128 aom_sub_pixel_avg_variance64x128_neon
 
 uint32_t aom_sub_pixel_avg_variance64x32_c(const uint8_t* src_ptr,
                                            int source_stride,
@@ -4323,7 +4767,15 @@ uint32_t aom_sub_pixel_avg_variance64x32_c(const uint8_t* src_ptr,
                                            int ref_stride,
                                            uint32_t* sse,
                                            const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance64x32 aom_sub_pixel_avg_variance64x32_c
+uint32_t aom_sub_pixel_avg_variance64x32_neon(const uint8_t* src_ptr,
+                                              int source_stride,
+                                              int xoffset,
+                                              int yoffset,
+                                              const uint8_t* ref_ptr,
+                                              int ref_stride,
+                                              uint32_t* sse,
+                                              const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance64x32 aom_sub_pixel_avg_variance64x32_neon
 
 uint32_t aom_sub_pixel_avg_variance64x64_c(const uint8_t* src_ptr,
                                            int source_stride,
@@ -4333,7 +4785,15 @@ uint32_t aom_sub_pixel_avg_variance64x64_c(const uint8_t* src_ptr,
                                            int ref_stride,
                                            uint32_t* sse,
                                            const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance64x64 aom_sub_pixel_avg_variance64x64_c
+uint32_t aom_sub_pixel_avg_variance64x64_neon(const uint8_t* src_ptr,
+                                              int source_stride,
+                                              int xoffset,
+                                              int yoffset,
+                                              const uint8_t* ref_ptr,
+                                              int ref_stride,
+                                              uint32_t* sse,
+                                              const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance64x64 aom_sub_pixel_avg_variance64x64_neon
 
 uint32_t aom_sub_pixel_avg_variance8x16_c(const uint8_t* src_ptr,
                                           int source_stride,
@@ -4343,7 +4803,15 @@ uint32_t aom_sub_pixel_avg_variance8x16_c(const uint8_t* src_ptr,
                                           int ref_stride,
                                           uint32_t* sse,
                                           const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance8x16 aom_sub_pixel_avg_variance8x16_c
+uint32_t aom_sub_pixel_avg_variance8x16_neon(const uint8_t* src_ptr,
+                                             int source_stride,
+                                             int xoffset,
+                                             int yoffset,
+                                             const uint8_t* ref_ptr,
+                                             int ref_stride,
+                                             uint32_t* sse,
+                                             const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance8x16 aom_sub_pixel_avg_variance8x16_neon
 
 uint32_t aom_sub_pixel_avg_variance8x4_c(const uint8_t* src_ptr,
                                          int source_stride,
@@ -4353,7 +4821,15 @@ uint32_t aom_sub_pixel_avg_variance8x4_c(const uint8_t* src_ptr,
                                          int ref_stride,
                                          uint32_t* sse,
                                          const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance8x4 aom_sub_pixel_avg_variance8x4_c
+uint32_t aom_sub_pixel_avg_variance8x4_neon(const uint8_t* src_ptr,
+                                            int source_stride,
+                                            int xoffset,
+                                            int yoffset,
+                                            const uint8_t* ref_ptr,
+                                            int ref_stride,
+                                            uint32_t* sse,
+                                            const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance8x4 aom_sub_pixel_avg_variance8x4_neon
 
 uint32_t aom_sub_pixel_avg_variance8x8_c(const uint8_t* src_ptr,
                                          int source_stride,
@@ -4363,7 +4839,15 @@ uint32_t aom_sub_pixel_avg_variance8x8_c(const uint8_t* src_ptr,
                                          int ref_stride,
                                          uint32_t* sse,
                                          const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance8x8 aom_sub_pixel_avg_variance8x8_c
+uint32_t aom_sub_pixel_avg_variance8x8_neon(const uint8_t* src_ptr,
+                                            int source_stride,
+                                            int xoffset,
+                                            int yoffset,
+                                            const uint8_t* ref_ptr,
+                                            int ref_stride,
+                                            uint32_t* sse,
+                                            const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance8x8 aom_sub_pixel_avg_variance8x8_neon
 
 uint32_t aom_sub_pixel_variance128x128_c(const uint8_t* src_ptr,
                                          int source_stride,
@@ -5013,8 +5497,8 @@ unsigned int aom_variance8x8_neon(const uint8_t* src_ptr,
                                   unsigned int* sse);
 #define aom_variance8x8 aom_variance8x8_neon
 
-int aom_vector_var_c(const int16_t* ref, const int16_t* src, const int bwl);
-int aom_vector_var_neon(const int16_t* ref, const int16_t* src, const int bwl);
+int aom_vector_var_c(const int16_t* ref, const int16_t* src, int bwl);
+int aom_vector_var_neon(const int16_t* ref, const int16_t* src, int bwl);
 #define aom_vector_var aom_vector_var_neon
 
 void aom_dsp_rtcd(void);
diff --git a/libaom/source/config/ios/arm64/config/aom_scale_rtcd.h b/libaom/source/config/ios/arm64/config/aom_scale_rtcd.h
index 7db7b9d..bc23102 100644
--- a/libaom/source/config/ios/arm64/config/aom_scale_rtcd.h
+++ b/libaom/source/config/ios/arm64/config/aom_scale_rtcd.h
@@ -155,6 +155,7 @@ void aom_yv12_partial_copy_y_c(const struct yv12_buffer_config* src_ybc,
 int aom_yv12_realloc_with_new_border_c(struct yv12_buffer_config* ybf,
                                        int new_border,
                                        int byte_alignment,
+                                       int num_pyramid_levels,
                                        int num_planes);
 #define aom_yv12_realloc_with_new_border aom_yv12_realloc_with_new_border_c
 
diff --git a/libaom/source/config/ios/arm64/config/av1_rtcd.h b/libaom/source/config/ios/arm64/config/av1_rtcd.h
index fd9ac83..37b5c0d 100644
--- a/libaom/source/config/ios/arm64/config/av1_rtcd.h
+++ b/libaom/source/config/ios/arm64/config/av1_rtcd.h
@@ -266,30 +266,22 @@ int64_t av1_calc_frame_error_c(const uint8_t* const ref,
                                int p_stride);
 #define av1_calc_frame_error av1_calc_frame_error_c
 
-void av1_calc_indices_dim1_c(const int* data,
-                             const int* centroids,
+void av1_calc_indices_dim1_c(const int16_t* data,
+                             const int16_t* centroids,
                              uint8_t* indices,
+                             int64_t* total_dist,
                              int n,
                              int k);
 #define av1_calc_indices_dim1 av1_calc_indices_dim1_c
 
-void av1_calc_indices_dim2_c(const int* data,
-                             const int* centroids,
+void av1_calc_indices_dim2_c(const int16_t* data,
+                             const int16_t* centroids,
                              uint8_t* indices,
+                             int64_t* total_dist,
                              int n,
                              int k);
 #define av1_calc_indices_dim2 av1_calc_indices_dim2_c
 
-double av1_compute_cross_correlation_c(unsigned char* im1,
-                                       int stride1,
-                                       int x1,
-                                       int y1,
-                                       unsigned char* im2,
-                                       int stride2,
-                                       int x2,
-                                       int y2);
-#define av1_compute_cross_correlation av1_compute_cross_correlation_c
-
 void av1_convolve_2d_scale_c(const uint8_t* src,
                              int src_stride,
                              uint8_t* dst,
@@ -765,12 +757,6 @@ void av1_get_nz_map_contexts_neon(const uint8_t* const levels,
                                   int8_t* const coeff_contexts);
 #define av1_get_nz_map_contexts av1_get_nz_map_contexts_neon
 
-void av1_highbd_fwht4x4_c(const int16_t* input, tran_low_t* output, int stride);
-void av1_highbd_fwht4x4_neon(const int16_t* input,
-                             tran_low_t* output,
-                             int stride);
-#define av1_highbd_fwht4x4 av1_highbd_fwht4x4_neon
-
 void av1_highbd_inv_txfm_add_c(const tran_low_t* input,
                                uint8_t* dest,
                                int stride,
@@ -1472,28 +1458,28 @@ void cdef_copy_rect8_16bit_to_16bit_c(uint16_t* dst,
                                       int dstride,
                                       const uint16_t* src,
                                       int sstride,
-                                      int v,
-                                      int h);
+                                      int width,
+                                      int height);
 void cdef_copy_rect8_16bit_to_16bit_neon(uint16_t* dst,
                                          int dstride,
                                          const uint16_t* src,
                                          int sstride,
-                                         int v,
-                                         int h);
+                                         int width,
+                                         int height);
 #define cdef_copy_rect8_16bit_to_16bit cdef_copy_rect8_16bit_to_16bit_neon
 
 void cdef_copy_rect8_8bit_to_16bit_c(uint16_t* dst,
                                      int dstride,
                                      const uint8_t* src,
                                      int sstride,
-                                     int v,
-                                     int h);
+                                     int width,
+                                     int height);
 void cdef_copy_rect8_8bit_to_16bit_neon(uint16_t* dst,
                                         int dstride,
                                         const uint8_t* src,
                                         int sstride,
-                                        int v,
-                                        int h);
+                                        int width,
+                                        int height);
 #define cdef_copy_rect8_8bit_to_16bit cdef_copy_rect8_8bit_to_16bit_neon
 
 void cdef_filter_16_0_c(void* dst16,
diff --git a/libaom/source/config/linux/arm-neon-cpu-detect/config/aom_config.asm b/libaom/source/config/linux/arm-neon-cpu-detect/config/aom_config.asm
index 4ee530a..d3203ad 100644
--- a/libaom/source/config/linux/arm-neon-cpu-detect/config/aom_config.asm
+++ b/libaom/source/config/linux/arm-neon-cpu-detect/config/aom_config.asm
@@ -1,5 +1,5 @@
 ;
-; Copyright (c) 2022, Alliance for Open Media. All rights reserved
+; Copyright (c) 2023, Alliance for Open Media. All rights reserved
 ;
 ; This source code is subject to the terms of the BSD 2 Clause License and
 ; the Alliance for Open Media Patent License 1.0. If the BSD 2 Clause License
@@ -46,6 +46,7 @@ CONFIG_NN_V2 equ 0
 CONFIG_NORMAL_TILE_MODE equ 1
 CONFIG_OPTICAL_FLOW_API equ 0
 CONFIG_OS_SUPPORT equ 1
+CONFIG_OUTPUT_FRAME_SIZE equ 0
 CONFIG_PARTITION_SEARCH_ORDER equ 0
 CONFIG_PIC equ 1
 CONFIG_RATECTRL_LOG equ 0
@@ -54,6 +55,7 @@ CONFIG_RD_DEBUG equ 0
 CONFIG_REALTIME_ONLY equ 1
 CONFIG_RT_ML_PARTITIONING equ 0
 CONFIG_RUNTIME_CPU_DETECT equ 1
+CONFIG_SALIENCY_MAP equ 0
 CONFIG_SHARED equ 0
 CONFIG_SIZE_LIMIT equ 1
 CONFIG_SPATIAL_RESAMPLING equ 1
diff --git a/libaom/source/config/linux/arm-neon-cpu-detect/config/aom_config.h b/libaom/source/config/linux/arm-neon-cpu-detect/config/aom_config.h
index 70f19c9..c68ea10 100644
--- a/libaom/source/config/linux/arm-neon-cpu-detect/config/aom_config.h
+++ b/libaom/source/config/linux/arm-neon-cpu-detect/config/aom_config.h
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022, Alliance for Open Media. All rights reserved
+ * Copyright (c) 2023, Alliance for Open Media. All rights reserved
  *
  * This source code is subject to the terms of the BSD 2 Clause License and
  * the Alliance for Open Media Patent License 1.0. If the BSD 2 Clause License
@@ -48,6 +48,7 @@
 #define CONFIG_NORMAL_TILE_MODE 1
 #define CONFIG_OPTICAL_FLOW_API 0
 #define CONFIG_OS_SUPPORT 1
+#define CONFIG_OUTPUT_FRAME_SIZE 0
 #define CONFIG_PARTITION_SEARCH_ORDER 0
 #define CONFIG_PIC 1
 #define CONFIG_RATECTRL_LOG 0
@@ -56,6 +57,7 @@
 #define CONFIG_REALTIME_ONLY 1
 #define CONFIG_RT_ML_PARTITIONING 0
 #define CONFIG_RUNTIME_CPU_DETECT 1
+#define CONFIG_SALIENCY_MAP 0
 #define CONFIG_SHARED 0
 #define CONFIG_SIZE_LIMIT 1
 #define CONFIG_SPATIAL_RESAMPLING 1
diff --git a/libaom/source/config/linux/arm-neon-cpu-detect/config/aom_dsp_rtcd.h b/libaom/source/config/linux/arm-neon-cpu-detect/config/aom_dsp_rtcd.h
index 088c4ec..4d3e741 100644
--- a/libaom/source/config/linux/arm-neon-cpu-detect/config/aom_dsp_rtcd.h
+++ b/libaom/source/config/linux/arm-neon-cpu-detect/config/aom_dsp_rtcd.h
@@ -1201,24 +1201,58 @@ void aom_get_blk_sse_sum_c(const int16_t* data,
 unsigned int aom_get_mb_ss_c(const int16_t*);
 #define aom_get_mb_ss aom_get_mb_ss_c
 
-void aom_get_sse_sum_8x8_quad_c(const uint8_t* src_ptr,
-                                int source_stride,
-                                const uint8_t* ref_ptr,
-                                int ref_stride,
-                                unsigned int* sse,
-                                int* sum);
-void aom_get_sse_sum_8x8_quad_neon(const uint8_t* src_ptr,
-                                   int source_stride,
-                                   const uint8_t* ref_ptr,
-                                   int ref_stride,
-                                   unsigned int* sse,
-                                   int* sum);
-RTCD_EXTERN void (*aom_get_sse_sum_8x8_quad)(const uint8_t* src_ptr,
-                                             int source_stride,
-                                             const uint8_t* ref_ptr,
-                                             int ref_stride,
-                                             unsigned int* sse,
-                                             int* sum);
+void aom_get_var_sse_sum_16x16_dual_c(const uint8_t* src_ptr,
+                                      int source_stride,
+                                      const uint8_t* ref_ptr,
+                                      int ref_stride,
+                                      uint32_t* sse16x16,
+                                      unsigned int* tot_sse,
+                                      int* tot_sum,
+                                      uint32_t* var16x16);
+void aom_get_var_sse_sum_16x16_dual_neon(const uint8_t* src_ptr,
+                                         int source_stride,
+                                         const uint8_t* ref_ptr,
+                                         int ref_stride,
+                                         uint32_t* sse16x16,
+                                         unsigned int* tot_sse,
+                                         int* tot_sum,
+                                         uint32_t* var16x16);
+RTCD_EXTERN void (*aom_get_var_sse_sum_16x16_dual)(const uint8_t* src_ptr,
+                                                   int source_stride,
+                                                   const uint8_t* ref_ptr,
+                                                   int ref_stride,
+                                                   uint32_t* sse16x16,
+                                                   unsigned int* tot_sse,
+                                                   int* tot_sum,
+                                                   uint32_t* var16x16);
+
+void aom_get_var_sse_sum_8x8_quad_c(const uint8_t* src_ptr,
+                                    int source_stride,
+                                    const uint8_t* ref_ptr,
+                                    int ref_stride,
+                                    uint32_t* sse8x8,
+                                    int* sum8x8,
+                                    unsigned int* tot_sse,
+                                    int* tot_sum,
+                                    uint32_t* var8x8);
+void aom_get_var_sse_sum_8x8_quad_neon(const uint8_t* src_ptr,
+                                       int source_stride,
+                                       const uint8_t* ref_ptr,
+                                       int ref_stride,
+                                       uint32_t* sse8x8,
+                                       int* sum8x8,
+                                       unsigned int* tot_sse,
+                                       int* tot_sum,
+                                       uint32_t* var8x8);
+RTCD_EXTERN void (*aom_get_var_sse_sum_8x8_quad)(const uint8_t* src_ptr,
+                                                 int source_stride,
+                                                 const uint8_t* ref_ptr,
+                                                 int ref_stride,
+                                                 uint32_t* sse8x8,
+                                                 int* sum8x8,
+                                                 unsigned int* tot_sse,
+                                                 int* tot_sum,
+                                                 uint32_t* var8x8);
 
 void aom_h_predictor_16x16_c(uint8_t* dst,
                              ptrdiff_t y_stride,
@@ -1375,12 +1409,22 @@ RTCD_EXTERN void (*aom_hadamard_16x16)(const int16_t* src_diff,
 void aom_hadamard_32x32_c(const int16_t* src_diff,
                           ptrdiff_t src_stride,
                           tran_low_t* coeff);
-#define aom_hadamard_32x32 aom_hadamard_32x32_c
+void aom_hadamard_32x32_neon(const int16_t* src_diff,
+                             ptrdiff_t src_stride,
+                             tran_low_t* coeff);
+RTCD_EXTERN void (*aom_hadamard_32x32)(const int16_t* src_diff,
+                                       ptrdiff_t src_stride,
+                                       tran_low_t* coeff);
 
 void aom_hadamard_4x4_c(const int16_t* src_diff,
                         ptrdiff_t src_stride,
                         tran_low_t* coeff);
-#define aom_hadamard_4x4 aom_hadamard_4x4_c
+void aom_hadamard_4x4_neon(const int16_t* src_diff,
+                           ptrdiff_t src_stride,
+                           tran_low_t* coeff);
+RTCD_EXTERN void (*aom_hadamard_4x4)(const int16_t* src_diff,
+                                     ptrdiff_t src_stride,
+                                     tran_low_t* coeff);
 
 void aom_hadamard_8x8_c(const int16_t* src_diff,
                         ptrdiff_t src_stride,
@@ -1979,7 +2023,22 @@ unsigned int aom_masked_sad128x128_c(const uint8_t* src,
                                      const uint8_t* msk,
                                      int msk_stride,
                                      int invert_mask);
-#define aom_masked_sad128x128 aom_masked_sad128x128_c
+unsigned int aom_masked_sad128x128_neon(const uint8_t* src,
+                                        int src_stride,
+                                        const uint8_t* ref,
+                                        int ref_stride,
+                                        const uint8_t* second_pred,
+                                        const uint8_t* msk,
+                                        int msk_stride,
+                                        int invert_mask);
+RTCD_EXTERN unsigned int (*aom_masked_sad128x128)(const uint8_t* src,
+                                                  int src_stride,
+                                                  const uint8_t* ref,
+                                                  int ref_stride,
+                                                  const uint8_t* second_pred,
+                                                  const uint8_t* msk,
+                                                  int msk_stride,
+                                                  int invert_mask);
 
 void aom_masked_sad128x128x4d_c(const uint8_t* src,
                                 int src_stride,
@@ -2000,7 +2059,22 @@ unsigned int aom_masked_sad128x64_c(const uint8_t* src,
                                     const uint8_t* msk,
                                     int msk_stride,
                                     int invert_mask);
-#define aom_masked_sad128x64 aom_masked_sad128x64_c
+unsigned int aom_masked_sad128x64_neon(const uint8_t* src,
+                                       int src_stride,
+                                       const uint8_t* ref,
+                                       int ref_stride,
+                                       const uint8_t* second_pred,
+                                       const uint8_t* msk,
+                                       int msk_stride,
+                                       int invert_mask);
+RTCD_EXTERN unsigned int (*aom_masked_sad128x64)(const uint8_t* src,
+                                                 int src_stride,
+                                                 const uint8_t* ref,
+                                                 int ref_stride,
+                                                 const uint8_t* second_pred,
+                                                 const uint8_t* msk,
+                                                 int msk_stride,
+                                                 int invert_mask);
 
 void aom_masked_sad128x64x4d_c(const uint8_t* src,
                                int src_stride,
@@ -2021,7 +2095,22 @@ unsigned int aom_masked_sad16x16_c(const uint8_t* src,
                                    const uint8_t* msk,
                                    int msk_stride,
                                    int invert_mask);
-#define aom_masked_sad16x16 aom_masked_sad16x16_c
+unsigned int aom_masked_sad16x16_neon(const uint8_t* src,
+                                      int src_stride,
+                                      const uint8_t* ref,
+                                      int ref_stride,
+                                      const uint8_t* second_pred,
+                                      const uint8_t* msk,
+                                      int msk_stride,
+                                      int invert_mask);
+RTCD_EXTERN unsigned int (*aom_masked_sad16x16)(const uint8_t* src,
+                                                int src_stride,
+                                                const uint8_t* ref,
+                                                int ref_stride,
+                                                const uint8_t* second_pred,
+                                                const uint8_t* msk,
+                                                int msk_stride,
+                                                int invert_mask);
 
 void aom_masked_sad16x16x4d_c(const uint8_t* src,
                               int src_stride,
@@ -2042,7 +2131,22 @@ unsigned int aom_masked_sad16x32_c(const uint8_t* src,
                                    const uint8_t* msk,
                                    int msk_stride,
                                    int invert_mask);
-#define aom_masked_sad16x32 aom_masked_sad16x32_c
+unsigned int aom_masked_sad16x32_neon(const uint8_t* src,
+                                      int src_stride,
+                                      const uint8_t* ref,
+                                      int ref_stride,
+                                      const uint8_t* second_pred,
+                                      const uint8_t* msk,
+                                      int msk_stride,
+                                      int invert_mask);
+RTCD_EXTERN unsigned int (*aom_masked_sad16x32)(const uint8_t* src,
+                                                int src_stride,
+                                                const uint8_t* ref,
+                                                int ref_stride,
+                                                const uint8_t* second_pred,
+                                                const uint8_t* msk,
+                                                int msk_stride,
+                                                int invert_mask);
 
 void aom_masked_sad16x32x4d_c(const uint8_t* src,
                               int src_stride,
@@ -2063,7 +2167,22 @@ unsigned int aom_masked_sad16x8_c(const uint8_t* src,
                                   const uint8_t* msk,
                                   int msk_stride,
                                   int invert_mask);
-#define aom_masked_sad16x8 aom_masked_sad16x8_c
+unsigned int aom_masked_sad16x8_neon(const uint8_t* src,
+                                     int src_stride,
+                                     const uint8_t* ref,
+                                     int ref_stride,
+                                     const uint8_t* second_pred,
+                                     const uint8_t* msk,
+                                     int msk_stride,
+                                     int invert_mask);
+RTCD_EXTERN unsigned int (*aom_masked_sad16x8)(const uint8_t* src,
+                                               int src_stride,
+                                               const uint8_t* ref,
+                                               int ref_stride,
+                                               const uint8_t* second_pred,
+                                               const uint8_t* msk,
+                                               int msk_stride,
+                                               int invert_mask);
 
 void aom_masked_sad16x8x4d_c(const uint8_t* src,
                              int src_stride,
@@ -2084,7 +2203,22 @@ unsigned int aom_masked_sad32x16_c(const uint8_t* src,
                                    const uint8_t* msk,
                                    int msk_stride,
                                    int invert_mask);
-#define aom_masked_sad32x16 aom_masked_sad32x16_c
+unsigned int aom_masked_sad32x16_neon(const uint8_t* src,
+                                      int src_stride,
+                                      const uint8_t* ref,
+                                      int ref_stride,
+                                      const uint8_t* second_pred,
+                                      const uint8_t* msk,
+                                      int msk_stride,
+                                      int invert_mask);
+RTCD_EXTERN unsigned int (*aom_masked_sad32x16)(const uint8_t* src,
+                                                int src_stride,
+                                                const uint8_t* ref,
+                                                int ref_stride,
+                                                const uint8_t* second_pred,
+                                                const uint8_t* msk,
+                                                int msk_stride,
+                                                int invert_mask);
 
 void aom_masked_sad32x16x4d_c(const uint8_t* src,
                               int src_stride,
@@ -2105,7 +2239,22 @@ unsigned int aom_masked_sad32x32_c(const uint8_t* src,
                                    const uint8_t* msk,
                                    int msk_stride,
                                    int invert_mask);
-#define aom_masked_sad32x32 aom_masked_sad32x32_c
+unsigned int aom_masked_sad32x32_neon(const uint8_t* src,
+                                      int src_stride,
+                                      const uint8_t* ref,
+                                      int ref_stride,
+                                      const uint8_t* second_pred,
+                                      const uint8_t* msk,
+                                      int msk_stride,
+                                      int invert_mask);
+RTCD_EXTERN unsigned int (*aom_masked_sad32x32)(const uint8_t* src,
+                                                int src_stride,
+                                                const uint8_t* ref,
+                                                int ref_stride,
+                                                const uint8_t* second_pred,
+                                                const uint8_t* msk,
+                                                int msk_stride,
+                                                int invert_mask);
 
 void aom_masked_sad32x32x4d_c(const uint8_t* src,
                               int src_stride,
@@ -2126,7 +2275,22 @@ unsigned int aom_masked_sad32x64_c(const uint8_t* src,
                                    const uint8_t* msk,
                                    int msk_stride,
                                    int invert_mask);
-#define aom_masked_sad32x64 aom_masked_sad32x64_c
+unsigned int aom_masked_sad32x64_neon(const uint8_t* src,
+                                      int src_stride,
+                                      const uint8_t* ref,
+                                      int ref_stride,
+                                      const uint8_t* second_pred,
+                                      const uint8_t* msk,
+                                      int msk_stride,
+                                      int invert_mask);
+RTCD_EXTERN unsigned int (*aom_masked_sad32x64)(const uint8_t* src,
+                                                int src_stride,
+                                                const uint8_t* ref,
+                                                int ref_stride,
+                                                const uint8_t* second_pred,
+                                                const uint8_t* msk,
+                                                int msk_stride,
+                                                int invert_mask);
 
 void aom_masked_sad32x64x4d_c(const uint8_t* src,
                               int src_stride,
@@ -2147,7 +2311,22 @@ unsigned int aom_masked_sad4x4_c(const uint8_t* src,
                                  const uint8_t* msk,
                                  int msk_stride,
                                  int invert_mask);
-#define aom_masked_sad4x4 aom_masked_sad4x4_c
+unsigned int aom_masked_sad4x4_neon(const uint8_t* src,
+                                    int src_stride,
+                                    const uint8_t* ref,
+                                    int ref_stride,
+                                    const uint8_t* second_pred,
+                                    const uint8_t* msk,
+                                    int msk_stride,
+                                    int invert_mask);
+RTCD_EXTERN unsigned int (*aom_masked_sad4x4)(const uint8_t* src,
+                                              int src_stride,
+                                              const uint8_t* ref,
+                                              int ref_stride,
+                                              const uint8_t* second_pred,
+                                              const uint8_t* msk,
+                                              int msk_stride,
+                                              int invert_mask);
 
 void aom_masked_sad4x4x4d_c(const uint8_t* src,
                             int src_stride,
@@ -2168,7 +2347,22 @@ unsigned int aom_masked_sad4x8_c(const uint8_t* src,
                                  const uint8_t* msk,
                                  int msk_stride,
                                  int invert_mask);
-#define aom_masked_sad4x8 aom_masked_sad4x8_c
+unsigned int aom_masked_sad4x8_neon(const uint8_t* src,
+                                    int src_stride,
+                                    const uint8_t* ref,
+                                    int ref_stride,
+                                    const uint8_t* second_pred,
+                                    const uint8_t* msk,
+                                    int msk_stride,
+                                    int invert_mask);
+RTCD_EXTERN unsigned int (*aom_masked_sad4x8)(const uint8_t* src,
+                                              int src_stride,
+                                              const uint8_t* ref,
+                                              int ref_stride,
+                                              const uint8_t* second_pred,
+                                              const uint8_t* msk,
+                                              int msk_stride,
+                                              int invert_mask);
 
 void aom_masked_sad4x8x4d_c(const uint8_t* src,
                             int src_stride,
@@ -2189,7 +2383,22 @@ unsigned int aom_masked_sad64x128_c(const uint8_t* src,
                                     const uint8_t* msk,
                                     int msk_stride,
                                     int invert_mask);
-#define aom_masked_sad64x128 aom_masked_sad64x128_c
+unsigned int aom_masked_sad64x128_neon(const uint8_t* src,
+                                       int src_stride,
+                                       const uint8_t* ref,
+                                       int ref_stride,
+                                       const uint8_t* second_pred,
+                                       const uint8_t* msk,
+                                       int msk_stride,
+                                       int invert_mask);
+RTCD_EXTERN unsigned int (*aom_masked_sad64x128)(const uint8_t* src,
+                                                 int src_stride,
+                                                 const uint8_t* ref,
+                                                 int ref_stride,
+                                                 const uint8_t* second_pred,
+                                                 const uint8_t* msk,
+                                                 int msk_stride,
+                                                 int invert_mask);
 
 void aom_masked_sad64x128x4d_c(const uint8_t* src,
                                int src_stride,
@@ -2210,7 +2419,22 @@ unsigned int aom_masked_sad64x32_c(const uint8_t* src,
                                    const uint8_t* msk,
                                    int msk_stride,
                                    int invert_mask);
-#define aom_masked_sad64x32 aom_masked_sad64x32_c
+unsigned int aom_masked_sad64x32_neon(const uint8_t* src,
+                                      int src_stride,
+                                      const uint8_t* ref,
+                                      int ref_stride,
+                                      const uint8_t* second_pred,
+                                      const uint8_t* msk,
+                                      int msk_stride,
+                                      int invert_mask);
+RTCD_EXTERN unsigned int (*aom_masked_sad64x32)(const uint8_t* src,
+                                                int src_stride,
+                                                const uint8_t* ref,
+                                                int ref_stride,
+                                                const uint8_t* second_pred,
+                                                const uint8_t* msk,
+                                                int msk_stride,
+                                                int invert_mask);
 
 void aom_masked_sad64x32x4d_c(const uint8_t* src,
                               int src_stride,
@@ -2231,7 +2455,22 @@ unsigned int aom_masked_sad64x64_c(const uint8_t* src,
                                    const uint8_t* msk,
                                    int msk_stride,
                                    int invert_mask);
-#define aom_masked_sad64x64 aom_masked_sad64x64_c
+unsigned int aom_masked_sad64x64_neon(const uint8_t* src,
+                                      int src_stride,
+                                      const uint8_t* ref,
+                                      int ref_stride,
+                                      const uint8_t* second_pred,
+                                      const uint8_t* msk,
+                                      int msk_stride,
+                                      int invert_mask);
+RTCD_EXTERN unsigned int (*aom_masked_sad64x64)(const uint8_t* src,
+                                                int src_stride,
+                                                const uint8_t* ref,
+                                                int ref_stride,
+                                                const uint8_t* second_pred,
+                                                const uint8_t* msk,
+                                                int msk_stride,
+                                                int invert_mask);
 
 void aom_masked_sad64x64x4d_c(const uint8_t* src,
                               int src_stride,
@@ -2252,7 +2491,22 @@ unsigned int aom_masked_sad8x16_c(const uint8_t* src,
                                   const uint8_t* msk,
                                   int msk_stride,
                                   int invert_mask);
-#define aom_masked_sad8x16 aom_masked_sad8x16_c
+unsigned int aom_masked_sad8x16_neon(const uint8_t* src,
+                                     int src_stride,
+                                     const uint8_t* ref,
+                                     int ref_stride,
+                                     const uint8_t* second_pred,
+                                     const uint8_t* msk,
+                                     int msk_stride,
+                                     int invert_mask);
+RTCD_EXTERN unsigned int (*aom_masked_sad8x16)(const uint8_t* src,
+                                               int src_stride,
+                                               const uint8_t* ref,
+                                               int ref_stride,
+                                               const uint8_t* second_pred,
+                                               const uint8_t* msk,
+                                               int msk_stride,
+                                               int invert_mask);
 
 void aom_masked_sad8x16x4d_c(const uint8_t* src,
                              int src_stride,
@@ -2273,7 +2527,22 @@ unsigned int aom_masked_sad8x4_c(const uint8_t* src,
                                  const uint8_t* msk,
                                  int msk_stride,
                                  int invert_mask);
-#define aom_masked_sad8x4 aom_masked_sad8x4_c
+unsigned int aom_masked_sad8x4_neon(const uint8_t* src,
+                                    int src_stride,
+                                    const uint8_t* ref,
+                                    int ref_stride,
+                                    const uint8_t* second_pred,
+                                    const uint8_t* msk,
+                                    int msk_stride,
+                                    int invert_mask);
+RTCD_EXTERN unsigned int (*aom_masked_sad8x4)(const uint8_t* src,
+                                              int src_stride,
+                                              const uint8_t* ref,
+                                              int ref_stride,
+                                              const uint8_t* second_pred,
+                                              const uint8_t* msk,
+                                              int msk_stride,
+                                              int invert_mask);
 
 void aom_masked_sad8x4x4d_c(const uint8_t* src,
                             int src_stride,
@@ -2294,7 +2563,22 @@ unsigned int aom_masked_sad8x8_c(const uint8_t* src,
                                  const uint8_t* msk,
                                  int msk_stride,
                                  int invert_mask);
-#define aom_masked_sad8x8 aom_masked_sad8x8_c
+unsigned int aom_masked_sad8x8_neon(const uint8_t* src,
+                                    int src_stride,
+                                    const uint8_t* ref,
+                                    int ref_stride,
+                                    const uint8_t* second_pred,
+                                    const uint8_t* msk,
+                                    int msk_stride,
+                                    int invert_mask);
+RTCD_EXTERN unsigned int (*aom_masked_sad8x8)(const uint8_t* src,
+                                              int src_stride,
+                                              const uint8_t* ref,
+                                              int ref_stride,
+                                              const uint8_t* second_pred,
+                                              const uint8_t* msk,
+                                              int msk_stride,
+                                              int invert_mask);
 
 void aom_masked_sad8x8x4d_c(const uint8_t* src,
                             int src_stride,
@@ -2603,7 +2887,18 @@ uint64_t aom_mse_wxh_16bit_c(uint8_t* dst,
                              int sstride,
                              int w,
                              int h);
-#define aom_mse_wxh_16bit aom_mse_wxh_16bit_c
+uint64_t aom_mse_wxh_16bit_neon(uint8_t* dst,
+                                int dstride,
+                                uint16_t* src,
+                                int sstride,
+                                int w,
+                                int h);
+RTCD_EXTERN uint64_t (*aom_mse_wxh_16bit)(uint8_t* dst,
+                                          int dstride,
+                                          uint16_t* src,
+                                          int sstride,
+                                          int w,
+                                          int h);
 
 void aom_paeth_predictor_16x16_c(uint8_t* dst,
                                  ptrdiff_t y_stride,
@@ -2989,7 +3284,23 @@ unsigned int aom_sad128x128_avg_c(const uint8_t* src_ptr,
                                   const uint8_t* ref_ptr,
                                   int ref_stride,
                                   const uint8_t* second_pred);
-#define aom_sad128x128_avg aom_sad128x128_avg_c
+unsigned int aom_sad128x128_avg_neon(const uint8_t* src_ptr,
+                                     int src_stride,
+                                     const uint8_t* ref_ptr,
+                                     int ref_stride,
+                                     const uint8_t* second_pred);
+RTCD_EXTERN unsigned int (*aom_sad128x128_avg)(const uint8_t* src_ptr,
+                                               int src_stride,
+                                               const uint8_t* ref_ptr,
+                                               int ref_stride,
+                                               const uint8_t* second_pred);
+
+void aom_sad128x128x3d_c(const uint8_t* src_ptr,
+                         int src_stride,
+                         const uint8_t* const ref_ptr[4],
+                         int ref_stride,
+                         uint32_t sad_array[4]);
+#define aom_sad128x128x3d aom_sad128x128x3d_c
 
 void aom_sad128x128x4d_c(const uint8_t* src_ptr,
                          int src_stride,
@@ -3033,7 +3344,23 @@ unsigned int aom_sad128x64_avg_c(const uint8_t* src_ptr,
                                  const uint8_t* ref_ptr,
                                  int ref_stride,
                                  const uint8_t* second_pred);
-#define aom_sad128x64_avg aom_sad128x64_avg_c
+unsigned int aom_sad128x64_avg_neon(const uint8_t* src_ptr,
+                                    int src_stride,
+                                    const uint8_t* ref_ptr,
+                                    int ref_stride,
+                                    const uint8_t* second_pred);
+RTCD_EXTERN unsigned int (*aom_sad128x64_avg)(const uint8_t* src_ptr,
+                                              int src_stride,
+                                              const uint8_t* ref_ptr,
+                                              int ref_stride,
+                                              const uint8_t* second_pred);
+
+void aom_sad128x64x3d_c(const uint8_t* src_ptr,
+                        int src_stride,
+                        const uint8_t* const ref_ptr[4],
+                        int ref_stride,
+                        uint32_t sad_array[4]);
+#define aom_sad128x64x3d aom_sad128x64x3d_c
 
 void aom_sad128x64x4d_c(const uint8_t* src_ptr,
                         int src_stride,
@@ -3085,7 +3412,23 @@ unsigned int aom_sad16x16_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* ref_ptr,
                                 int ref_stride,
                                 const uint8_t* second_pred);
-#define aom_sad16x16_avg aom_sad16x16_avg_c
+unsigned int aom_sad16x16_avg_neon(const uint8_t* src_ptr,
+                                   int src_stride,
+                                   const uint8_t* ref_ptr,
+                                   int ref_stride,
+                                   const uint8_t* second_pred);
+RTCD_EXTERN unsigned int (*aom_sad16x16_avg)(const uint8_t* src_ptr,
+                                             int src_stride,
+                                             const uint8_t* ref_ptr,
+                                             int ref_stride,
+                                             const uint8_t* second_pred);
+
+void aom_sad16x16x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad16x16x3d aom_sad16x16x3d_c
 
 void aom_sad16x16x4d_c(const uint8_t* src_ptr,
                        int src_stride,
@@ -3129,7 +3472,23 @@ unsigned int aom_sad16x32_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* ref_ptr,
                                 int ref_stride,
                                 const uint8_t* second_pred);
-#define aom_sad16x32_avg aom_sad16x32_avg_c
+unsigned int aom_sad16x32_avg_neon(const uint8_t* src_ptr,
+                                   int src_stride,
+                                   const uint8_t* ref_ptr,
+                                   int ref_stride,
+                                   const uint8_t* second_pred);
+RTCD_EXTERN unsigned int (*aom_sad16x32_avg)(const uint8_t* src_ptr,
+                                             int src_stride,
+                                             const uint8_t* ref_ptr,
+                                             int ref_stride,
+                                             const uint8_t* second_pred);
+
+void aom_sad16x32x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad16x32x3d aom_sad16x32x3d_c
 
 void aom_sad16x32x4d_c(const uint8_t* src_ptr,
                        int src_stride,
@@ -3173,7 +3532,23 @@ unsigned int aom_sad16x8_avg_c(const uint8_t* src_ptr,
                                const uint8_t* ref_ptr,
                                int ref_stride,
                                const uint8_t* second_pred);
-#define aom_sad16x8_avg aom_sad16x8_avg_c
+unsigned int aom_sad16x8_avg_neon(const uint8_t* src_ptr,
+                                  int src_stride,
+                                  const uint8_t* ref_ptr,
+                                  int ref_stride,
+                                  const uint8_t* second_pred);
+RTCD_EXTERN unsigned int (*aom_sad16x8_avg)(const uint8_t* src_ptr,
+                                            int src_stride,
+                                            const uint8_t* ref_ptr,
+                                            int ref_stride,
+                                            const uint8_t* second_pred);
+
+void aom_sad16x8x3d_c(const uint8_t* src_ptr,
+                      int src_stride,
+                      const uint8_t* const ref_ptr[4],
+                      int ref_stride,
+                      uint32_t sad_array[4]);
+#define aom_sad16x8x3d aom_sad16x8x3d_c
 
 void aom_sad16x8x4d_c(const uint8_t* src_ptr,
                       int src_stride,
@@ -3225,7 +3600,23 @@ unsigned int aom_sad32x16_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* ref_ptr,
                                 int ref_stride,
                                 const uint8_t* second_pred);
-#define aom_sad32x16_avg aom_sad32x16_avg_c
+unsigned int aom_sad32x16_avg_neon(const uint8_t* src_ptr,
+                                   int src_stride,
+                                   const uint8_t* ref_ptr,
+                                   int ref_stride,
+                                   const uint8_t* second_pred);
+RTCD_EXTERN unsigned int (*aom_sad32x16_avg)(const uint8_t* src_ptr,
+                                             int src_stride,
+                                             const uint8_t* ref_ptr,
+                                             int ref_stride,
+                                             const uint8_t* second_pred);
+
+void aom_sad32x16x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad32x16x3d aom_sad32x16x3d_c
 
 void aom_sad32x16x4d_c(const uint8_t* src_ptr,
                        int src_stride,
@@ -3269,7 +3660,23 @@ unsigned int aom_sad32x32_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* ref_ptr,
                                 int ref_stride,
                                 const uint8_t* second_pred);
-#define aom_sad32x32_avg aom_sad32x32_avg_c
+unsigned int aom_sad32x32_avg_neon(const uint8_t* src_ptr,
+                                   int src_stride,
+                                   const uint8_t* ref_ptr,
+                                   int ref_stride,
+                                   const uint8_t* second_pred);
+RTCD_EXTERN unsigned int (*aom_sad32x32_avg)(const uint8_t* src_ptr,
+                                             int src_stride,
+                                             const uint8_t* ref_ptr,
+                                             int ref_stride,
+                                             const uint8_t* second_pred);
+
+void aom_sad32x32x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad32x32x3d aom_sad32x32x3d_c
 
 void aom_sad32x32x4d_c(const uint8_t* src_ptr,
                        int src_stride,
@@ -3313,8 +3720,24 @@ unsigned int aom_sad32x64_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* ref_ptr,
                                 int ref_stride,
                                 const uint8_t* second_pred);
-#define aom_sad32x64_avg aom_sad32x64_avg_c
-
+unsigned int aom_sad32x64_avg_neon(const uint8_t* src_ptr,
+                                   int src_stride,
+                                   const uint8_t* ref_ptr,
+                                   int ref_stride,
+                                   const uint8_t* second_pred);
+RTCD_EXTERN unsigned int (*aom_sad32x64_avg)(const uint8_t* src_ptr,
+                                             int src_stride,
+                                             const uint8_t* ref_ptr,
+                                             int ref_stride,
+                                             const uint8_t* second_pred);
+
+void aom_sad32x64x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad32x64x3d aom_sad32x64x3d_c
+
 void aom_sad32x64x4d_c(const uint8_t* src_ptr,
                        int src_stride,
                        const uint8_t* const ref_ptr[4],
@@ -3365,7 +3788,23 @@ unsigned int aom_sad4x4_avg_c(const uint8_t* src_ptr,
                               const uint8_t* ref_ptr,
                               int ref_stride,
                               const uint8_t* second_pred);
-#define aom_sad4x4_avg aom_sad4x4_avg_c
+unsigned int aom_sad4x4_avg_neon(const uint8_t* src_ptr,
+                                 int src_stride,
+                                 const uint8_t* ref_ptr,
+                                 int ref_stride,
+                                 const uint8_t* second_pred);
+RTCD_EXTERN unsigned int (*aom_sad4x4_avg)(const uint8_t* src_ptr,
+                                           int src_stride,
+                                           const uint8_t* ref_ptr,
+                                           int ref_stride,
+                                           const uint8_t* second_pred);
+
+void aom_sad4x4x3d_c(const uint8_t* src_ptr,
+                     int src_stride,
+                     const uint8_t* const ref_ptr[4],
+                     int ref_stride,
+                     uint32_t sad_array[4]);
+#define aom_sad4x4x3d aom_sad4x4x3d_c
 
 void aom_sad4x4x4d_c(const uint8_t* src_ptr,
                      int src_stride,
@@ -3409,7 +3848,23 @@ unsigned int aom_sad4x8_avg_c(const uint8_t* src_ptr,
                               const uint8_t* ref_ptr,
                               int ref_stride,
                               const uint8_t* second_pred);
-#define aom_sad4x8_avg aom_sad4x8_avg_c
+unsigned int aom_sad4x8_avg_neon(const uint8_t* src_ptr,
+                                 int src_stride,
+                                 const uint8_t* ref_ptr,
+                                 int ref_stride,
+                                 const uint8_t* second_pred);
+RTCD_EXTERN unsigned int (*aom_sad4x8_avg)(const uint8_t* src_ptr,
+                                           int src_stride,
+                                           const uint8_t* ref_ptr,
+                                           int ref_stride,
+                                           const uint8_t* second_pred);
+
+void aom_sad4x8x3d_c(const uint8_t* src_ptr,
+                     int src_stride,
+                     const uint8_t* const ref_ptr[4],
+                     int ref_stride,
+                     uint32_t sad_array[4]);
+#define aom_sad4x8x3d aom_sad4x8x3d_c
 
 void aom_sad4x8x4d_c(const uint8_t* src_ptr,
                      int src_stride,
@@ -3461,7 +3916,23 @@ unsigned int aom_sad64x128_avg_c(const uint8_t* src_ptr,
                                  const uint8_t* ref_ptr,
                                  int ref_stride,
                                  const uint8_t* second_pred);
-#define aom_sad64x128_avg aom_sad64x128_avg_c
+unsigned int aom_sad64x128_avg_neon(const uint8_t* src_ptr,
+                                    int src_stride,
+                                    const uint8_t* ref_ptr,
+                                    int ref_stride,
+                                    const uint8_t* second_pred);
+RTCD_EXTERN unsigned int (*aom_sad64x128_avg)(const uint8_t* src_ptr,
+                                              int src_stride,
+                                              const uint8_t* ref_ptr,
+                                              int ref_stride,
+                                              const uint8_t* second_pred);
+
+void aom_sad64x128x3d_c(const uint8_t* src_ptr,
+                        int src_stride,
+                        const uint8_t* const ref_ptr[4],
+                        int ref_stride,
+                        uint32_t sad_array[4]);
+#define aom_sad64x128x3d aom_sad64x128x3d_c
 
 void aom_sad64x128x4d_c(const uint8_t* src_ptr,
                         int src_stride,
@@ -3505,7 +3976,23 @@ unsigned int aom_sad64x32_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* ref_ptr,
                                 int ref_stride,
                                 const uint8_t* second_pred);
-#define aom_sad64x32_avg aom_sad64x32_avg_c
+unsigned int aom_sad64x32_avg_neon(const uint8_t* src_ptr,
+                                   int src_stride,
+                                   const uint8_t* ref_ptr,
+                                   int ref_stride,
+                                   const uint8_t* second_pred);
+RTCD_EXTERN unsigned int (*aom_sad64x32_avg)(const uint8_t* src_ptr,
+                                             int src_stride,
+                                             const uint8_t* ref_ptr,
+                                             int ref_stride,
+                                             const uint8_t* second_pred);
+
+void aom_sad64x32x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad64x32x3d aom_sad64x32x3d_c
 
 void aom_sad64x32x4d_c(const uint8_t* src_ptr,
                        int src_stride,
@@ -3549,7 +4036,23 @@ unsigned int aom_sad64x64_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* ref_ptr,
                                 int ref_stride,
                                 const uint8_t* second_pred);
-#define aom_sad64x64_avg aom_sad64x64_avg_c
+unsigned int aom_sad64x64_avg_neon(const uint8_t* src_ptr,
+                                   int src_stride,
+                                   const uint8_t* ref_ptr,
+                                   int ref_stride,
+                                   const uint8_t* second_pred);
+RTCD_EXTERN unsigned int (*aom_sad64x64_avg)(const uint8_t* src_ptr,
+                                             int src_stride,
+                                             const uint8_t* ref_ptr,
+                                             int ref_stride,
+                                             const uint8_t* second_pred);
+
+void aom_sad64x64x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad64x64x3d aom_sad64x64x3d_c
 
 void aom_sad64x64x4d_c(const uint8_t* src_ptr,
                        int src_stride,
@@ -3601,7 +4104,23 @@ unsigned int aom_sad8x16_avg_c(const uint8_t* src_ptr,
                                const uint8_t* ref_ptr,
                                int ref_stride,
                                const uint8_t* second_pred);
-#define aom_sad8x16_avg aom_sad8x16_avg_c
+unsigned int aom_sad8x16_avg_neon(const uint8_t* src_ptr,
+                                  int src_stride,
+                                  const uint8_t* ref_ptr,
+                                  int ref_stride,
+                                  const uint8_t* second_pred);
+RTCD_EXTERN unsigned int (*aom_sad8x16_avg)(const uint8_t* src_ptr,
+                                            int src_stride,
+                                            const uint8_t* ref_ptr,
+                                            int ref_stride,
+                                            const uint8_t* second_pred);
+
+void aom_sad8x16x3d_c(const uint8_t* src_ptr,
+                      int src_stride,
+                      const uint8_t* const ref_ptr[4],
+                      int ref_stride,
+                      uint32_t sad_array[4]);
+#define aom_sad8x16x3d aom_sad8x16x3d_c
 
 void aom_sad8x16x4d_c(const uint8_t* src_ptr,
                       int src_stride,
@@ -3645,7 +4164,23 @@ unsigned int aom_sad8x4_avg_c(const uint8_t* src_ptr,
                               const uint8_t* ref_ptr,
                               int ref_stride,
                               const uint8_t* second_pred);
-#define aom_sad8x4_avg aom_sad8x4_avg_c
+unsigned int aom_sad8x4_avg_neon(const uint8_t* src_ptr,
+                                 int src_stride,
+                                 const uint8_t* ref_ptr,
+                                 int ref_stride,
+                                 const uint8_t* second_pred);
+RTCD_EXTERN unsigned int (*aom_sad8x4_avg)(const uint8_t* src_ptr,
+                                           int src_stride,
+                                           const uint8_t* ref_ptr,
+                                           int ref_stride,
+                                           const uint8_t* second_pred);
+
+void aom_sad8x4x3d_c(const uint8_t* src_ptr,
+                     int src_stride,
+                     const uint8_t* const ref_ptr[4],
+                     int ref_stride,
+                     uint32_t sad_array[4]);
+#define aom_sad8x4x3d aom_sad8x4x3d_c
 
 void aom_sad8x4x4d_c(const uint8_t* src_ptr,
                      int src_stride,
@@ -3689,7 +4224,23 @@ unsigned int aom_sad8x8_avg_c(const uint8_t* src_ptr,
                               const uint8_t* ref_ptr,
                               int ref_stride,
                               const uint8_t* second_pred);
-#define aom_sad8x8_avg aom_sad8x8_avg_c
+unsigned int aom_sad8x8_avg_neon(const uint8_t* src_ptr,
+                                 int src_stride,
+                                 const uint8_t* ref_ptr,
+                                 int ref_stride,
+                                 const uint8_t* second_pred);
+RTCD_EXTERN unsigned int (*aom_sad8x8_avg)(const uint8_t* src_ptr,
+                                           int src_stride,
+                                           const uint8_t* ref_ptr,
+                                           int ref_stride,
+                                           const uint8_t* second_pred);
+
+void aom_sad8x8x3d_c(const uint8_t* src_ptr,
+                     int src_stride,
+                     const uint8_t* const ref_ptr[4],
+                     int ref_stride,
+                     uint32_t sad_array[4]);
+#define aom_sad8x8x3d aom_sad8x8x3d_c
 
 void aom_sad8x8x4d_c(const uint8_t* src_ptr,
                      int src_stride,
@@ -4976,7 +5527,23 @@ uint32_t aom_sub_pixel_avg_variance128x128_c(const uint8_t* src_ptr,
                                              int ref_stride,
                                              uint32_t* sse,
                                              const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance128x128 aom_sub_pixel_avg_variance128x128_c
+uint32_t aom_sub_pixel_avg_variance128x128_neon(const uint8_t* src_ptr,
+                                                int source_stride,
+                                                int xoffset,
+                                                int yoffset,
+                                                const uint8_t* ref_ptr,
+                                                int ref_stride,
+                                                uint32_t* sse,
+                                                const uint8_t* second_pred);
+RTCD_EXTERN uint32_t (*aom_sub_pixel_avg_variance128x128)(
+    const uint8_t* src_ptr,
+    int source_stride,
+    int xoffset,
+    int yoffset,
+    const uint8_t* ref_ptr,
+    int ref_stride,
+    uint32_t* sse,
+    const uint8_t* second_pred);
 
 uint32_t aom_sub_pixel_avg_variance128x64_c(const uint8_t* src_ptr,
                                             int source_stride,
@@ -4986,7 +5553,23 @@ uint32_t aom_sub_pixel_avg_variance128x64_c(const uint8_t* src_ptr,
                                             int ref_stride,
                                             uint32_t* sse,
                                             const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance128x64 aom_sub_pixel_avg_variance128x64_c
+uint32_t aom_sub_pixel_avg_variance128x64_neon(const uint8_t* src_ptr,
+                                               int source_stride,
+                                               int xoffset,
+                                               int yoffset,
+                                               const uint8_t* ref_ptr,
+                                               int ref_stride,
+                                               uint32_t* sse,
+                                               const uint8_t* second_pred);
+RTCD_EXTERN uint32_t (*aom_sub_pixel_avg_variance128x64)(
+    const uint8_t* src_ptr,
+    int source_stride,
+    int xoffset,
+    int yoffset,
+    const uint8_t* ref_ptr,
+    int ref_stride,
+    uint32_t* sse,
+    const uint8_t* second_pred);
 
 uint32_t aom_sub_pixel_avg_variance16x16_c(const uint8_t* src_ptr,
                                            int source_stride,
@@ -4996,7 +5579,23 @@ uint32_t aom_sub_pixel_avg_variance16x16_c(const uint8_t* src_ptr,
                                            int ref_stride,
                                            uint32_t* sse,
                                            const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance16x16 aom_sub_pixel_avg_variance16x16_c
+uint32_t aom_sub_pixel_avg_variance16x16_neon(const uint8_t* src_ptr,
+                                              int source_stride,
+                                              int xoffset,
+                                              int yoffset,
+                                              const uint8_t* ref_ptr,
+                                              int ref_stride,
+                                              uint32_t* sse,
+                                              const uint8_t* second_pred);
+RTCD_EXTERN uint32_t (*aom_sub_pixel_avg_variance16x16)(
+    const uint8_t* src_ptr,
+    int source_stride,
+    int xoffset,
+    int yoffset,
+    const uint8_t* ref_ptr,
+    int ref_stride,
+    uint32_t* sse,
+    const uint8_t* second_pred);
 
 uint32_t aom_sub_pixel_avg_variance16x32_c(const uint8_t* src_ptr,
                                            int source_stride,
@@ -5006,7 +5605,23 @@ uint32_t aom_sub_pixel_avg_variance16x32_c(const uint8_t* src_ptr,
                                            int ref_stride,
                                            uint32_t* sse,
                                            const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance16x32 aom_sub_pixel_avg_variance16x32_c
+uint32_t aom_sub_pixel_avg_variance16x32_neon(const uint8_t* src_ptr,
+                                              int source_stride,
+                                              int xoffset,
+                                              int yoffset,
+                                              const uint8_t* ref_ptr,
+                                              int ref_stride,
+                                              uint32_t* sse,
+                                              const uint8_t* second_pred);
+RTCD_EXTERN uint32_t (*aom_sub_pixel_avg_variance16x32)(
+    const uint8_t* src_ptr,
+    int source_stride,
+    int xoffset,
+    int yoffset,
+    const uint8_t* ref_ptr,
+    int ref_stride,
+    uint32_t* sse,
+    const uint8_t* second_pred);
 
 uint32_t aom_sub_pixel_avg_variance16x8_c(const uint8_t* src_ptr,
                                           int source_stride,
@@ -5016,7 +5631,23 @@ uint32_t aom_sub_pixel_avg_variance16x8_c(const uint8_t* src_ptr,
                                           int ref_stride,
                                           uint32_t* sse,
                                           const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance16x8 aom_sub_pixel_avg_variance16x8_c
+uint32_t aom_sub_pixel_avg_variance16x8_neon(const uint8_t* src_ptr,
+                                             int source_stride,
+                                             int xoffset,
+                                             int yoffset,
+                                             const uint8_t* ref_ptr,
+                                             int ref_stride,
+                                             uint32_t* sse,
+                                             const uint8_t* second_pred);
+RTCD_EXTERN uint32_t (*aom_sub_pixel_avg_variance16x8)(
+    const uint8_t* src_ptr,
+    int source_stride,
+    int xoffset,
+    int yoffset,
+    const uint8_t* ref_ptr,
+    int ref_stride,
+    uint32_t* sse,
+    const uint8_t* second_pred);
 
 uint32_t aom_sub_pixel_avg_variance32x16_c(const uint8_t* src_ptr,
                                            int source_stride,
@@ -5026,7 +5657,23 @@ uint32_t aom_sub_pixel_avg_variance32x16_c(const uint8_t* src_ptr,
                                            int ref_stride,
                                            uint32_t* sse,
                                            const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance32x16 aom_sub_pixel_avg_variance32x16_c
+uint32_t aom_sub_pixel_avg_variance32x16_neon(const uint8_t* src_ptr,
+                                              int source_stride,
+                                              int xoffset,
+                                              int yoffset,
+                                              const uint8_t* ref_ptr,
+                                              int ref_stride,
+                                              uint32_t* sse,
+                                              const uint8_t* second_pred);
+RTCD_EXTERN uint32_t (*aom_sub_pixel_avg_variance32x16)(
+    const uint8_t* src_ptr,
+    int source_stride,
+    int xoffset,
+    int yoffset,
+    const uint8_t* ref_ptr,
+    int ref_stride,
+    uint32_t* sse,
+    const uint8_t* second_pred);
 
 uint32_t aom_sub_pixel_avg_variance32x32_c(const uint8_t* src_ptr,
                                            int source_stride,
@@ -5036,7 +5683,23 @@ uint32_t aom_sub_pixel_avg_variance32x32_c(const uint8_t* src_ptr,
                                            int ref_stride,
                                            uint32_t* sse,
                                            const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance32x32 aom_sub_pixel_avg_variance32x32_c
+uint32_t aom_sub_pixel_avg_variance32x32_neon(const uint8_t* src_ptr,
+                                              int source_stride,
+                                              int xoffset,
+                                              int yoffset,
+                                              const uint8_t* ref_ptr,
+                                              int ref_stride,
+                                              uint32_t* sse,
+                                              const uint8_t* second_pred);
+RTCD_EXTERN uint32_t (*aom_sub_pixel_avg_variance32x32)(
+    const uint8_t* src_ptr,
+    int source_stride,
+    int xoffset,
+    int yoffset,
+    const uint8_t* ref_ptr,
+    int ref_stride,
+    uint32_t* sse,
+    const uint8_t* second_pred);
 
 uint32_t aom_sub_pixel_avg_variance32x64_c(const uint8_t* src_ptr,
                                            int source_stride,
@@ -5046,7 +5709,23 @@ uint32_t aom_sub_pixel_avg_variance32x64_c(const uint8_t* src_ptr,
                                            int ref_stride,
                                            uint32_t* sse,
                                            const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance32x64 aom_sub_pixel_avg_variance32x64_c
+uint32_t aom_sub_pixel_avg_variance32x64_neon(const uint8_t* src_ptr,
+                                              int source_stride,
+                                              int xoffset,
+                                              int yoffset,
+                                              const uint8_t* ref_ptr,
+                                              int ref_stride,
+                                              uint32_t* sse,
+                                              const uint8_t* second_pred);
+RTCD_EXTERN uint32_t (*aom_sub_pixel_avg_variance32x64)(
+    const uint8_t* src_ptr,
+    int source_stride,
+    int xoffset,
+    int yoffset,
+    const uint8_t* ref_ptr,
+    int ref_stride,
+    uint32_t* sse,
+    const uint8_t* second_pred);
 
 uint32_t aom_sub_pixel_avg_variance4x4_c(const uint8_t* src_ptr,
                                          int source_stride,
@@ -5056,7 +5735,23 @@ uint32_t aom_sub_pixel_avg_variance4x4_c(const uint8_t* src_ptr,
                                          int ref_stride,
                                          uint32_t* sse,
                                          const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance4x4 aom_sub_pixel_avg_variance4x4_c
+uint32_t aom_sub_pixel_avg_variance4x4_neon(const uint8_t* src_ptr,
+                                            int source_stride,
+                                            int xoffset,
+                                            int yoffset,
+                                            const uint8_t* ref_ptr,
+                                            int ref_stride,
+                                            uint32_t* sse,
+                                            const uint8_t* second_pred);
+RTCD_EXTERN uint32_t (*aom_sub_pixel_avg_variance4x4)(
+    const uint8_t* src_ptr,
+    int source_stride,
+    int xoffset,
+    int yoffset,
+    const uint8_t* ref_ptr,
+    int ref_stride,
+    uint32_t* sse,
+    const uint8_t* second_pred);
 
 uint32_t aom_sub_pixel_avg_variance4x8_c(const uint8_t* src_ptr,
                                          int source_stride,
@@ -5066,7 +5761,23 @@ uint32_t aom_sub_pixel_avg_variance4x8_c(const uint8_t* src_ptr,
                                          int ref_stride,
                                          uint32_t* sse,
                                          const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance4x8 aom_sub_pixel_avg_variance4x8_c
+uint32_t aom_sub_pixel_avg_variance4x8_neon(const uint8_t* src_ptr,
+                                            int source_stride,
+                                            int xoffset,
+                                            int yoffset,
+                                            const uint8_t* ref_ptr,
+                                            int ref_stride,
+                                            uint32_t* sse,
+                                            const uint8_t* second_pred);
+RTCD_EXTERN uint32_t (*aom_sub_pixel_avg_variance4x8)(
+    const uint8_t* src_ptr,
+    int source_stride,
+    int xoffset,
+    int yoffset,
+    const uint8_t* ref_ptr,
+    int ref_stride,
+    uint32_t* sse,
+    const uint8_t* second_pred);
 
 uint32_t aom_sub_pixel_avg_variance64x128_c(const uint8_t* src_ptr,
                                             int source_stride,
@@ -5076,7 +5787,23 @@ uint32_t aom_sub_pixel_avg_variance64x128_c(const uint8_t* src_ptr,
                                             int ref_stride,
                                             uint32_t* sse,
                                             const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance64x128 aom_sub_pixel_avg_variance64x128_c
+uint32_t aom_sub_pixel_avg_variance64x128_neon(const uint8_t* src_ptr,
+                                               int source_stride,
+                                               int xoffset,
+                                               int yoffset,
+                                               const uint8_t* ref_ptr,
+                                               int ref_stride,
+                                               uint32_t* sse,
+                                               const uint8_t* second_pred);
+RTCD_EXTERN uint32_t (*aom_sub_pixel_avg_variance64x128)(
+    const uint8_t* src_ptr,
+    int source_stride,
+    int xoffset,
+    int yoffset,
+    const uint8_t* ref_ptr,
+    int ref_stride,
+    uint32_t* sse,
+    const uint8_t* second_pred);
 
 uint32_t aom_sub_pixel_avg_variance64x32_c(const uint8_t* src_ptr,
                                            int source_stride,
@@ -5086,7 +5813,23 @@ uint32_t aom_sub_pixel_avg_variance64x32_c(const uint8_t* src_ptr,
                                            int ref_stride,
                                            uint32_t* sse,
                                            const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance64x32 aom_sub_pixel_avg_variance64x32_c
+uint32_t aom_sub_pixel_avg_variance64x32_neon(const uint8_t* src_ptr,
+                                              int source_stride,
+                                              int xoffset,
+                                              int yoffset,
+                                              const uint8_t* ref_ptr,
+                                              int ref_stride,
+                                              uint32_t* sse,
+                                              const uint8_t* second_pred);
+RTCD_EXTERN uint32_t (*aom_sub_pixel_avg_variance64x32)(
+    const uint8_t* src_ptr,
+    int source_stride,
+    int xoffset,
+    int yoffset,
+    const uint8_t* ref_ptr,
+    int ref_stride,
+    uint32_t* sse,
+    const uint8_t* second_pred);
 
 uint32_t aom_sub_pixel_avg_variance64x64_c(const uint8_t* src_ptr,
                                            int source_stride,
@@ -5096,7 +5839,23 @@ uint32_t aom_sub_pixel_avg_variance64x64_c(const uint8_t* src_ptr,
                                            int ref_stride,
                                            uint32_t* sse,
                                            const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance64x64 aom_sub_pixel_avg_variance64x64_c
+uint32_t aom_sub_pixel_avg_variance64x64_neon(const uint8_t* src_ptr,
+                                              int source_stride,
+                                              int xoffset,
+                                              int yoffset,
+                                              const uint8_t* ref_ptr,
+                                              int ref_stride,
+                                              uint32_t* sse,
+                                              const uint8_t* second_pred);
+RTCD_EXTERN uint32_t (*aom_sub_pixel_avg_variance64x64)(
+    const uint8_t* src_ptr,
+    int source_stride,
+    int xoffset,
+    int yoffset,
+    const uint8_t* ref_ptr,
+    int ref_stride,
+    uint32_t* sse,
+    const uint8_t* second_pred);
 
 uint32_t aom_sub_pixel_avg_variance8x16_c(const uint8_t* src_ptr,
                                           int source_stride,
@@ -5106,7 +5865,23 @@ uint32_t aom_sub_pixel_avg_variance8x16_c(const uint8_t* src_ptr,
                                           int ref_stride,
                                           uint32_t* sse,
                                           const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance8x16 aom_sub_pixel_avg_variance8x16_c
+uint32_t aom_sub_pixel_avg_variance8x16_neon(const uint8_t* src_ptr,
+                                             int source_stride,
+                                             int xoffset,
+                                             int yoffset,
+                                             const uint8_t* ref_ptr,
+                                             int ref_stride,
+                                             uint32_t* sse,
+                                             const uint8_t* second_pred);
+RTCD_EXTERN uint32_t (*aom_sub_pixel_avg_variance8x16)(
+    const uint8_t* src_ptr,
+    int source_stride,
+    int xoffset,
+    int yoffset,
+    const uint8_t* ref_ptr,
+    int ref_stride,
+    uint32_t* sse,
+    const uint8_t* second_pred);
 
 uint32_t aom_sub_pixel_avg_variance8x4_c(const uint8_t* src_ptr,
                                          int source_stride,
@@ -5116,7 +5891,23 @@ uint32_t aom_sub_pixel_avg_variance8x4_c(const uint8_t* src_ptr,
                                          int ref_stride,
                                          uint32_t* sse,
                                          const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance8x4 aom_sub_pixel_avg_variance8x4_c
+uint32_t aom_sub_pixel_avg_variance8x4_neon(const uint8_t* src_ptr,
+                                            int source_stride,
+                                            int xoffset,
+                                            int yoffset,
+                                            const uint8_t* ref_ptr,
+                                            int ref_stride,
+                                            uint32_t* sse,
+                                            const uint8_t* second_pred);
+RTCD_EXTERN uint32_t (*aom_sub_pixel_avg_variance8x4)(
+    const uint8_t* src_ptr,
+    int source_stride,
+    int xoffset,
+    int yoffset,
+    const uint8_t* ref_ptr,
+    int ref_stride,
+    uint32_t* sse,
+    const uint8_t* second_pred);
 
 uint32_t aom_sub_pixel_avg_variance8x8_c(const uint8_t* src_ptr,
                                          int source_stride,
@@ -5126,7 +5917,23 @@ uint32_t aom_sub_pixel_avg_variance8x8_c(const uint8_t* src_ptr,
                                          int ref_stride,
                                          uint32_t* sse,
                                          const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance8x8 aom_sub_pixel_avg_variance8x8_c
+uint32_t aom_sub_pixel_avg_variance8x8_neon(const uint8_t* src_ptr,
+                                            int source_stride,
+                                            int xoffset,
+                                            int yoffset,
+                                            const uint8_t* ref_ptr,
+                                            int ref_stride,
+                                            uint32_t* sse,
+                                            const uint8_t* second_pred);
+RTCD_EXTERN uint32_t (*aom_sub_pixel_avg_variance8x8)(
+    const uint8_t* src_ptr,
+    int source_stride,
+    int xoffset,
+    int yoffset,
+    const uint8_t* ref_ptr,
+    int ref_stride,
+    uint32_t* sse,
+    const uint8_t* second_pred);
 
 uint32_t aom_sub_pixel_variance128x128_c(const uint8_t* src_ptr,
                                          int source_stride,
@@ -5962,11 +6769,11 @@ RTCD_EXTERN unsigned int (*aom_variance8x8)(const uint8_t* src_ptr,
                                             int ref_stride,
                                             unsigned int* sse);
 
-int aom_vector_var_c(const int16_t* ref, const int16_t* src, const int bwl);
-int aom_vector_var_neon(const int16_t* ref, const int16_t* src, const int bwl);
+int aom_vector_var_c(const int16_t* ref, const int16_t* src, int bwl);
+int aom_vector_var_neon(const int16_t* ref, const int16_t* src, int bwl);
 RTCD_EXTERN int (*aom_vector_var)(const int16_t* ref,
                                   const int16_t* src,
-                                  const int bwl);
+                                  int bwl);
 
 void aom_dsp_rtcd(void);
 
@@ -5980,761 +6787,1221 @@ static void setup_rtcd_internal(void) {
   (void)flags;
 
   aom_avg_4x4 = aom_avg_4x4_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_avg_4x4 = aom_avg_4x4_neon;
+  }
   aom_avg_8x8 = aom_avg_8x8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_avg_8x8 = aom_avg_8x8_neon;
+  }
   aom_avg_8x8_quad = aom_avg_8x8_quad_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_avg_8x8_quad = aom_avg_8x8_quad_neon;
+  }
   aom_blend_a64_hmask = aom_blend_a64_hmask_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_blend_a64_hmask = aom_blend_a64_hmask_neon;
+  }
   aom_blend_a64_vmask = aom_blend_a64_vmask_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_blend_a64_vmask = aom_blend_a64_vmask_neon;
+  }
   aom_convolve_copy = aom_convolve_copy_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_convolve_copy = aom_convolve_copy_neon;
+  }
   aom_dc_128_predictor_16x16 = aom_dc_128_predictor_16x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_dc_128_predictor_16x16 = aom_dc_128_predictor_16x16_neon;
+  }
   aom_dc_128_predictor_32x32 = aom_dc_128_predictor_32x32_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_dc_128_predictor_32x32 = aom_dc_128_predictor_32x32_neon;
+  }
   aom_dc_128_predictor_4x4 = aom_dc_128_predictor_4x4_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_dc_128_predictor_4x4 = aom_dc_128_predictor_4x4_neon;
+  }
   aom_dc_128_predictor_8x8 = aom_dc_128_predictor_8x8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_dc_128_predictor_8x8 = aom_dc_128_predictor_8x8_neon;
+  }
   aom_dc_left_predictor_16x16 = aom_dc_left_predictor_16x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_dc_left_predictor_16x16 = aom_dc_left_predictor_16x16_neon;
+  }
   aom_dc_left_predictor_32x32 = aom_dc_left_predictor_32x32_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_dc_left_predictor_32x32 = aom_dc_left_predictor_32x32_neon;
+  }
   aom_dc_left_predictor_4x4 = aom_dc_left_predictor_4x4_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_dc_left_predictor_4x4 = aom_dc_left_predictor_4x4_neon;
+  }
   aom_dc_left_predictor_8x8 = aom_dc_left_predictor_8x8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_dc_left_predictor_8x8 = aom_dc_left_predictor_8x8_neon;
+  }
   aom_dc_predictor_16x16 = aom_dc_predictor_16x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_dc_predictor_16x16 = aom_dc_predictor_16x16_neon;
+  }
   aom_dc_predictor_32x32 = aom_dc_predictor_32x32_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_dc_predictor_32x32 = aom_dc_predictor_32x32_neon;
+  }
   aom_dc_predictor_4x4 = aom_dc_predictor_4x4_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_dc_predictor_4x4 = aom_dc_predictor_4x4_neon;
+  }
   aom_dc_predictor_8x8 = aom_dc_predictor_8x8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_dc_predictor_8x8 = aom_dc_predictor_8x8_neon;
+  }
   aom_dc_top_predictor_16x16 = aom_dc_top_predictor_16x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_dc_top_predictor_16x16 = aom_dc_top_predictor_16x16_neon;
+  }
   aom_dc_top_predictor_32x32 = aom_dc_top_predictor_32x32_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_dc_top_predictor_32x32 = aom_dc_top_predictor_32x32_neon;
+  }
   aom_dc_top_predictor_4x4 = aom_dc_top_predictor_4x4_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_dc_top_predictor_4x4 = aom_dc_top_predictor_4x4_neon;
+  }
   aom_dc_top_predictor_8x8 = aom_dc_top_predictor_8x8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_dc_top_predictor_8x8 = aom_dc_top_predictor_8x8_neon;
+  }
   aom_fdct4x4 = aom_fdct4x4_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_fdct4x4 = aom_fdct4x4_neon;
+  }
   aom_fdct4x4_lp = aom_fdct4x4_lp_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_fdct4x4_lp = aom_fdct4x4_lp_neon;
+  }
   aom_fdct8x8 = aom_fdct8x8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_fdct8x8 = aom_fdct8x8_neon;
+  }
   aom_get16x16var = aom_get16x16var_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_get16x16var = aom_get16x16var_neon;
+  }
   aom_get4x4sse_cs = aom_get4x4sse_cs_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_get4x4sse_cs = aom_get4x4sse_cs_neon;
+  }
   aom_get8x8var = aom_get8x8var_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_get8x8var = aom_get8x8var_neon;
-  aom_get_sse_sum_8x8_quad = aom_get_sse_sum_8x8_quad_c;
-  if (flags & HAS_NEON)
-    aom_get_sse_sum_8x8_quad = aom_get_sse_sum_8x8_quad_neon;
+  }
+  aom_get_var_sse_sum_16x16_dual = aom_get_var_sse_sum_16x16_dual_c;
+  if (flags & HAS_NEON) {
+    aom_get_var_sse_sum_16x16_dual = aom_get_var_sse_sum_16x16_dual_neon;
+  }
+  aom_get_var_sse_sum_8x8_quad = aom_get_var_sse_sum_8x8_quad_c;
+  if (flags & HAS_NEON) {
+    aom_get_var_sse_sum_8x8_quad = aom_get_var_sse_sum_8x8_quad_neon;
+  }
   aom_h_predictor_16x16 = aom_h_predictor_16x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_h_predictor_16x16 = aom_h_predictor_16x16_neon;
+  }
   aom_h_predictor_32x32 = aom_h_predictor_32x32_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_h_predictor_32x32 = aom_h_predictor_32x32_neon;
+  }
   aom_h_predictor_4x4 = aom_h_predictor_4x4_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_h_predictor_4x4 = aom_h_predictor_4x4_neon;
+  }
   aom_h_predictor_8x8 = aom_h_predictor_8x8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_h_predictor_8x8 = aom_h_predictor_8x8_neon;
+  }
   aom_hadamard_16x16 = aom_hadamard_16x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_hadamard_16x16 = aom_hadamard_16x16_neon;
+  }
+  aom_hadamard_32x32 = aom_hadamard_32x32_c;
+  if (flags & HAS_NEON) {
+    aom_hadamard_32x32 = aom_hadamard_32x32_neon;
+  }
+  aom_hadamard_4x4 = aom_hadamard_4x4_c;
+  if (flags & HAS_NEON) {
+    aom_hadamard_4x4 = aom_hadamard_4x4_neon;
+  }
   aom_hadamard_8x8 = aom_hadamard_8x8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_hadamard_8x8 = aom_hadamard_8x8_neon;
+  }
   aom_hadamard_lp_16x16 = aom_hadamard_lp_16x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_hadamard_lp_16x16 = aom_hadamard_lp_16x16_neon;
+  }
   aom_hadamard_lp_8x8 = aom_hadamard_lp_8x8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_hadamard_lp_8x8 = aom_hadamard_lp_8x8_neon;
+  }
   aom_hadamard_lp_8x8_dual = aom_hadamard_lp_8x8_dual_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_hadamard_lp_8x8_dual = aom_hadamard_lp_8x8_dual_neon;
+  }
   aom_int_pro_col = aom_int_pro_col_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_int_pro_col = aom_int_pro_col_neon;
+  }
   aom_int_pro_row = aom_int_pro_row_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_int_pro_row = aom_int_pro_row_neon;
+  }
   aom_lowbd_blend_a64_d16_mask = aom_lowbd_blend_a64_d16_mask_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_lowbd_blend_a64_d16_mask = aom_lowbd_blend_a64_d16_mask_neon;
+  }
   aom_lpf_horizontal_14 = aom_lpf_horizontal_14_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_lpf_horizontal_14 = aom_lpf_horizontal_14_neon;
+  }
   aom_lpf_horizontal_14_dual = aom_lpf_horizontal_14_dual_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_lpf_horizontal_14_dual = aom_lpf_horizontal_14_dual_neon;
+  }
   aom_lpf_horizontal_14_quad = aom_lpf_horizontal_14_quad_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_lpf_horizontal_14_quad = aom_lpf_horizontal_14_quad_neon;
+  }
   aom_lpf_horizontal_4 = aom_lpf_horizontal_4_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_lpf_horizontal_4 = aom_lpf_horizontal_4_neon;
+  }
   aom_lpf_horizontal_4_dual = aom_lpf_horizontal_4_dual_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_lpf_horizontal_4_dual = aom_lpf_horizontal_4_dual_neon;
+  }
   aom_lpf_horizontal_4_quad = aom_lpf_horizontal_4_quad_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_lpf_horizontal_4_quad = aom_lpf_horizontal_4_quad_neon;
+  }
   aom_lpf_horizontal_6 = aom_lpf_horizontal_6_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_lpf_horizontal_6 = aom_lpf_horizontal_6_neon;
+  }
   aom_lpf_horizontal_6_dual = aom_lpf_horizontal_6_dual_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_lpf_horizontal_6_dual = aom_lpf_horizontal_6_dual_neon;
+  }
   aom_lpf_horizontal_6_quad = aom_lpf_horizontal_6_quad_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_lpf_horizontal_6_quad = aom_lpf_horizontal_6_quad_neon;
+  }
   aom_lpf_horizontal_8 = aom_lpf_horizontal_8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_lpf_horizontal_8 = aom_lpf_horizontal_8_neon;
+  }
   aom_lpf_horizontal_8_dual = aom_lpf_horizontal_8_dual_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_lpf_horizontal_8_dual = aom_lpf_horizontal_8_dual_neon;
+  }
   aom_lpf_horizontal_8_quad = aom_lpf_horizontal_8_quad_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_lpf_horizontal_8_quad = aom_lpf_horizontal_8_quad_neon;
+  }
   aom_lpf_vertical_14 = aom_lpf_vertical_14_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_lpf_vertical_14 = aom_lpf_vertical_14_neon;
+  }
   aom_lpf_vertical_14_dual = aom_lpf_vertical_14_dual_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_lpf_vertical_14_dual = aom_lpf_vertical_14_dual_neon;
+  }
   aom_lpf_vertical_14_quad = aom_lpf_vertical_14_quad_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_lpf_vertical_14_quad = aom_lpf_vertical_14_quad_neon;
+  }
   aom_lpf_vertical_4 = aom_lpf_vertical_4_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_lpf_vertical_4 = aom_lpf_vertical_4_neon;
+  }
   aom_lpf_vertical_4_dual = aom_lpf_vertical_4_dual_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_lpf_vertical_4_dual = aom_lpf_vertical_4_dual_neon;
+  }
   aom_lpf_vertical_4_quad = aom_lpf_vertical_4_quad_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_lpf_vertical_4_quad = aom_lpf_vertical_4_quad_neon;
+  }
   aom_lpf_vertical_6 = aom_lpf_vertical_6_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_lpf_vertical_6 = aom_lpf_vertical_6_neon;
+  }
   aom_lpf_vertical_6_dual = aom_lpf_vertical_6_dual_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_lpf_vertical_6_dual = aom_lpf_vertical_6_dual_neon;
+  }
   aom_lpf_vertical_6_quad = aom_lpf_vertical_6_quad_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_lpf_vertical_6_quad = aom_lpf_vertical_6_quad_neon;
+  }
   aom_lpf_vertical_8 = aom_lpf_vertical_8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_lpf_vertical_8 = aom_lpf_vertical_8_neon;
+  }
   aom_lpf_vertical_8_dual = aom_lpf_vertical_8_dual_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_lpf_vertical_8_dual = aom_lpf_vertical_8_dual_neon;
+  }
   aom_lpf_vertical_8_quad = aom_lpf_vertical_8_quad_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_lpf_vertical_8_quad = aom_lpf_vertical_8_quad_neon;
+  }
+  aom_masked_sad128x128 = aom_masked_sad128x128_c;
+  if (flags & HAS_NEON) {
+    aom_masked_sad128x128 = aom_masked_sad128x128_neon;
+  }
+  aom_masked_sad128x64 = aom_masked_sad128x64_c;
+  if (flags & HAS_NEON) {
+    aom_masked_sad128x64 = aom_masked_sad128x64_neon;
+  }
+  aom_masked_sad16x16 = aom_masked_sad16x16_c;
+  if (flags & HAS_NEON) {
+    aom_masked_sad16x16 = aom_masked_sad16x16_neon;
+  }
+  aom_masked_sad16x32 = aom_masked_sad16x32_c;
+  if (flags & HAS_NEON) {
+    aom_masked_sad16x32 = aom_masked_sad16x32_neon;
+  }
+  aom_masked_sad16x8 = aom_masked_sad16x8_c;
+  if (flags & HAS_NEON) {
+    aom_masked_sad16x8 = aom_masked_sad16x8_neon;
+  }
+  aom_masked_sad32x16 = aom_masked_sad32x16_c;
+  if (flags & HAS_NEON) {
+    aom_masked_sad32x16 = aom_masked_sad32x16_neon;
+  }
+  aom_masked_sad32x32 = aom_masked_sad32x32_c;
+  if (flags & HAS_NEON) {
+    aom_masked_sad32x32 = aom_masked_sad32x32_neon;
+  }
+  aom_masked_sad32x64 = aom_masked_sad32x64_c;
+  if (flags & HAS_NEON) {
+    aom_masked_sad32x64 = aom_masked_sad32x64_neon;
+  }
+  aom_masked_sad4x4 = aom_masked_sad4x4_c;
+  if (flags & HAS_NEON) {
+    aom_masked_sad4x4 = aom_masked_sad4x4_neon;
+  }
+  aom_masked_sad4x8 = aom_masked_sad4x8_c;
+  if (flags & HAS_NEON) {
+    aom_masked_sad4x8 = aom_masked_sad4x8_neon;
+  }
+  aom_masked_sad64x128 = aom_masked_sad64x128_c;
+  if (flags & HAS_NEON) {
+    aom_masked_sad64x128 = aom_masked_sad64x128_neon;
+  }
+  aom_masked_sad64x32 = aom_masked_sad64x32_c;
+  if (flags & HAS_NEON) {
+    aom_masked_sad64x32 = aom_masked_sad64x32_neon;
+  }
+  aom_masked_sad64x64 = aom_masked_sad64x64_c;
+  if (flags & HAS_NEON) {
+    aom_masked_sad64x64 = aom_masked_sad64x64_neon;
+  }
+  aom_masked_sad8x16 = aom_masked_sad8x16_c;
+  if (flags & HAS_NEON) {
+    aom_masked_sad8x16 = aom_masked_sad8x16_neon;
+  }
+  aom_masked_sad8x4 = aom_masked_sad8x4_c;
+  if (flags & HAS_NEON) {
+    aom_masked_sad8x4 = aom_masked_sad8x4_neon;
+  }
+  aom_masked_sad8x8 = aom_masked_sad8x8_c;
+  if (flags & HAS_NEON) {
+    aom_masked_sad8x8 = aom_masked_sad8x8_neon;
+  }
   aom_mse16x16 = aom_mse16x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_mse16x16 = aom_mse16x16_neon;
+  }
   aom_mse16x8 = aom_mse16x8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_mse16x8 = aom_mse16x8_neon;
+  }
   aom_mse8x16 = aom_mse8x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_mse8x16 = aom_mse8x16_neon;
+  }
   aom_mse8x8 = aom_mse8x8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_mse8x8 = aom_mse8x8_neon;
+  }
+  aom_mse_wxh_16bit = aom_mse_wxh_16bit_c;
+  if (flags & HAS_NEON) {
+    aom_mse_wxh_16bit = aom_mse_wxh_16bit_neon;
+  }
   aom_paeth_predictor_16x16 = aom_paeth_predictor_16x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_paeth_predictor_16x16 = aom_paeth_predictor_16x16_neon;
+  }
   aom_paeth_predictor_16x32 = aom_paeth_predictor_16x32_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_paeth_predictor_16x32 = aom_paeth_predictor_16x32_neon;
+  }
   aom_paeth_predictor_16x4 = aom_paeth_predictor_16x4_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_paeth_predictor_16x4 = aom_paeth_predictor_16x4_neon;
+  }
   aom_paeth_predictor_16x64 = aom_paeth_predictor_16x64_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_paeth_predictor_16x64 = aom_paeth_predictor_16x64_neon;
+  }
   aom_paeth_predictor_16x8 = aom_paeth_predictor_16x8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_paeth_predictor_16x8 = aom_paeth_predictor_16x8_neon;
+  }
   aom_paeth_predictor_32x16 = aom_paeth_predictor_32x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_paeth_predictor_32x16 = aom_paeth_predictor_32x16_neon;
+  }
   aom_paeth_predictor_32x32 = aom_paeth_predictor_32x32_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_paeth_predictor_32x32 = aom_paeth_predictor_32x32_neon;
+  }
   aom_paeth_predictor_32x64 = aom_paeth_predictor_32x64_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_paeth_predictor_32x64 = aom_paeth_predictor_32x64_neon;
+  }
   aom_paeth_predictor_32x8 = aom_paeth_predictor_32x8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_paeth_predictor_32x8 = aom_paeth_predictor_32x8_neon;
+  }
   aom_paeth_predictor_4x16 = aom_paeth_predictor_4x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_paeth_predictor_4x16 = aom_paeth_predictor_4x16_neon;
+  }
   aom_paeth_predictor_4x4 = aom_paeth_predictor_4x4_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_paeth_predictor_4x4 = aom_paeth_predictor_4x4_neon;
+  }
   aom_paeth_predictor_4x8 = aom_paeth_predictor_4x8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_paeth_predictor_4x8 = aom_paeth_predictor_4x8_neon;
+  }
   aom_paeth_predictor_64x16 = aom_paeth_predictor_64x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_paeth_predictor_64x16 = aom_paeth_predictor_64x16_neon;
+  }
   aom_paeth_predictor_64x32 = aom_paeth_predictor_64x32_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_paeth_predictor_64x32 = aom_paeth_predictor_64x32_neon;
+  }
   aom_paeth_predictor_64x64 = aom_paeth_predictor_64x64_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_paeth_predictor_64x64 = aom_paeth_predictor_64x64_neon;
+  }
   aom_paeth_predictor_8x16 = aom_paeth_predictor_8x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_paeth_predictor_8x16 = aom_paeth_predictor_8x16_neon;
+  }
   aom_paeth_predictor_8x32 = aom_paeth_predictor_8x32_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_paeth_predictor_8x32 = aom_paeth_predictor_8x32_neon;
+  }
   aom_paeth_predictor_8x4 = aom_paeth_predictor_8x4_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_paeth_predictor_8x4 = aom_paeth_predictor_8x4_neon;
+  }
   aom_paeth_predictor_8x8 = aom_paeth_predictor_8x8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_paeth_predictor_8x8 = aom_paeth_predictor_8x8_neon;
+  }
   aom_quantize_b = aom_quantize_b_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_quantize_b = aom_quantize_b_neon;
+  }
   aom_quantize_b_32x32 = aom_quantize_b_32x32_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_quantize_b_32x32 = aom_quantize_b_32x32_neon;
+  }
   aom_quantize_b_64x64 = aom_quantize_b_64x64_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_quantize_b_64x64 = aom_quantize_b_64x64_neon;
+  }
   aom_sad128x128 = aom_sad128x128_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad128x128 = aom_sad128x128_neon;
+  }
+  aom_sad128x128_avg = aom_sad128x128_avg_c;
+  if (flags & HAS_NEON) {
+    aom_sad128x128_avg = aom_sad128x128_avg_neon;
+  }
   aom_sad128x128x4d = aom_sad128x128x4d_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad128x128x4d = aom_sad128x128x4d_neon;
+  }
   aom_sad128x64 = aom_sad128x64_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad128x64 = aom_sad128x64_neon;
+  }
+  aom_sad128x64_avg = aom_sad128x64_avg_c;
+  if (flags & HAS_NEON) {
+    aom_sad128x64_avg = aom_sad128x64_avg_neon;
+  }
   aom_sad128x64x4d = aom_sad128x64x4d_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad128x64x4d = aom_sad128x64x4d_neon;
+  }
   aom_sad16x16 = aom_sad16x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad16x16 = aom_sad16x16_neon;
+  }
+  aom_sad16x16_avg = aom_sad16x16_avg_c;
+  if (flags & HAS_NEON) {
+    aom_sad16x16_avg = aom_sad16x16_avg_neon;
+  }
   aom_sad16x16x4d = aom_sad16x16x4d_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad16x16x4d = aom_sad16x16x4d_neon;
+  }
   aom_sad16x32 = aom_sad16x32_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad16x32 = aom_sad16x32_neon;
+  }
+  aom_sad16x32_avg = aom_sad16x32_avg_c;
+  if (flags & HAS_NEON) {
+    aom_sad16x32_avg = aom_sad16x32_avg_neon;
+  }
   aom_sad16x32x4d = aom_sad16x32x4d_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad16x32x4d = aom_sad16x32x4d_neon;
+  }
   aom_sad16x8 = aom_sad16x8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad16x8 = aom_sad16x8_neon;
+  }
+  aom_sad16x8_avg = aom_sad16x8_avg_c;
+  if (flags & HAS_NEON) {
+    aom_sad16x8_avg = aom_sad16x8_avg_neon;
+  }
   aom_sad16x8x4d = aom_sad16x8x4d_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad16x8x4d = aom_sad16x8x4d_neon;
+  }
   aom_sad32x16 = aom_sad32x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad32x16 = aom_sad32x16_neon;
+  }
+  aom_sad32x16_avg = aom_sad32x16_avg_c;
+  if (flags & HAS_NEON) {
+    aom_sad32x16_avg = aom_sad32x16_avg_neon;
+  }
   aom_sad32x16x4d = aom_sad32x16x4d_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad32x16x4d = aom_sad32x16x4d_neon;
+  }
   aom_sad32x32 = aom_sad32x32_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad32x32 = aom_sad32x32_neon;
+  }
+  aom_sad32x32_avg = aom_sad32x32_avg_c;
+  if (flags & HAS_NEON) {
+    aom_sad32x32_avg = aom_sad32x32_avg_neon;
+  }
   aom_sad32x32x4d = aom_sad32x32x4d_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad32x32x4d = aom_sad32x32x4d_neon;
+  }
   aom_sad32x64 = aom_sad32x64_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad32x64 = aom_sad32x64_neon;
+  }
+  aom_sad32x64_avg = aom_sad32x64_avg_c;
+  if (flags & HAS_NEON) {
+    aom_sad32x64_avg = aom_sad32x64_avg_neon;
+  }
   aom_sad32x64x4d = aom_sad32x64x4d_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad32x64x4d = aom_sad32x64x4d_neon;
+  }
   aom_sad4x4 = aom_sad4x4_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad4x4 = aom_sad4x4_neon;
+  }
+  aom_sad4x4_avg = aom_sad4x4_avg_c;
+  if (flags & HAS_NEON) {
+    aom_sad4x4_avg = aom_sad4x4_avg_neon;
+  }
   aom_sad4x4x4d = aom_sad4x4x4d_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad4x4x4d = aom_sad4x4x4d_neon;
+  }
   aom_sad4x8 = aom_sad4x8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad4x8 = aom_sad4x8_neon;
+  }
+  aom_sad4x8_avg = aom_sad4x8_avg_c;
+  if (flags & HAS_NEON) {
+    aom_sad4x8_avg = aom_sad4x8_avg_neon;
+  }
   aom_sad4x8x4d = aom_sad4x8x4d_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad4x8x4d = aom_sad4x8x4d_neon;
+  }
   aom_sad64x128 = aom_sad64x128_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad64x128 = aom_sad64x128_neon;
+  }
+  aom_sad64x128_avg = aom_sad64x128_avg_c;
+  if (flags & HAS_NEON) {
+    aom_sad64x128_avg = aom_sad64x128_avg_neon;
+  }
   aom_sad64x128x4d = aom_sad64x128x4d_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad64x128x4d = aom_sad64x128x4d_neon;
+  }
   aom_sad64x32 = aom_sad64x32_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad64x32 = aom_sad64x32_neon;
+  }
+  aom_sad64x32_avg = aom_sad64x32_avg_c;
+  if (flags & HAS_NEON) {
+    aom_sad64x32_avg = aom_sad64x32_avg_neon;
+  }
   aom_sad64x32x4d = aom_sad64x32x4d_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad64x32x4d = aom_sad64x32x4d_neon;
+  }
   aom_sad64x64 = aom_sad64x64_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad64x64 = aom_sad64x64_neon;
+  }
+  aom_sad64x64_avg = aom_sad64x64_avg_c;
+  if (flags & HAS_NEON) {
+    aom_sad64x64_avg = aom_sad64x64_avg_neon;
+  }
   aom_sad64x64x4d = aom_sad64x64x4d_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad64x64x4d = aom_sad64x64x4d_neon;
+  }
   aom_sad8x16 = aom_sad8x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad8x16 = aom_sad8x16_neon;
+  }
+  aom_sad8x16_avg = aom_sad8x16_avg_c;
+  if (flags & HAS_NEON) {
+    aom_sad8x16_avg = aom_sad8x16_avg_neon;
+  }
   aom_sad8x16x4d = aom_sad8x16x4d_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad8x16x4d = aom_sad8x16x4d_neon;
+  }
   aom_sad8x4 = aom_sad8x4_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad8x4 = aom_sad8x4_neon;
+  }
+  aom_sad8x4_avg = aom_sad8x4_avg_c;
+  if (flags & HAS_NEON) {
+    aom_sad8x4_avg = aom_sad8x4_avg_neon;
+  }
   aom_sad8x4x4d = aom_sad8x4x4d_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad8x4x4d = aom_sad8x4x4d_neon;
+  }
   aom_sad8x8 = aom_sad8x8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad8x8 = aom_sad8x8_neon;
+  }
+  aom_sad8x8_avg = aom_sad8x8_avg_c;
+  if (flags & HAS_NEON) {
+    aom_sad8x8_avg = aom_sad8x8_avg_neon;
+  }
   aom_sad8x8x4d = aom_sad8x8x4d_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad8x8x4d = aom_sad8x8x4d_neon;
+  }
   aom_sad_skip_128x128 = aom_sad_skip_128x128_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad_skip_128x128 = aom_sad_skip_128x128_neon;
+  }
   aom_sad_skip_128x128x4d = aom_sad_skip_128x128x4d_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad_skip_128x128x4d = aom_sad_skip_128x128x4d_neon;
+  }
   aom_sad_skip_128x64 = aom_sad_skip_128x64_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad_skip_128x64 = aom_sad_skip_128x64_neon;
+  }
   aom_sad_skip_128x64x4d = aom_sad_skip_128x64x4d_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad_skip_128x64x4d = aom_sad_skip_128x64x4d_neon;
+  }
   aom_sad_skip_16x16 = aom_sad_skip_16x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad_skip_16x16 = aom_sad_skip_16x16_neon;
+  }
   aom_sad_skip_16x16x4d = aom_sad_skip_16x16x4d_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad_skip_16x16x4d = aom_sad_skip_16x16x4d_neon;
+  }
   aom_sad_skip_16x32 = aom_sad_skip_16x32_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad_skip_16x32 = aom_sad_skip_16x32_neon;
+  }
   aom_sad_skip_16x32x4d = aom_sad_skip_16x32x4d_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad_skip_16x32x4d = aom_sad_skip_16x32x4d_neon;
+  }
   aom_sad_skip_16x8 = aom_sad_skip_16x8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad_skip_16x8 = aom_sad_skip_16x8_neon;
+  }
   aom_sad_skip_16x8x4d = aom_sad_skip_16x8x4d_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad_skip_16x8x4d = aom_sad_skip_16x8x4d_neon;
+  }
   aom_sad_skip_32x16 = aom_sad_skip_32x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad_skip_32x16 = aom_sad_skip_32x16_neon;
+  }
   aom_sad_skip_32x16x4d = aom_sad_skip_32x16x4d_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad_skip_32x16x4d = aom_sad_skip_32x16x4d_neon;
+  }
   aom_sad_skip_32x32 = aom_sad_skip_32x32_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad_skip_32x32 = aom_sad_skip_32x32_neon;
+  }
   aom_sad_skip_32x32x4d = aom_sad_skip_32x32x4d_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad_skip_32x32x4d = aom_sad_skip_32x32x4d_neon;
+  }
   aom_sad_skip_32x64 = aom_sad_skip_32x64_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad_skip_32x64 = aom_sad_skip_32x64_neon;
+  }
   aom_sad_skip_32x64x4d = aom_sad_skip_32x64x4d_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad_skip_32x64x4d = aom_sad_skip_32x64x4d_neon;
+  }
   aom_sad_skip_4x8 = aom_sad_skip_4x8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad_skip_4x8 = aom_sad_skip_4x8_neon;
+  }
   aom_sad_skip_4x8x4d = aom_sad_skip_4x8x4d_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad_skip_4x8x4d = aom_sad_skip_4x8x4d_neon;
+  }
   aom_sad_skip_64x128 = aom_sad_skip_64x128_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad_skip_64x128 = aom_sad_skip_64x128_neon;
+  }
   aom_sad_skip_64x128x4d = aom_sad_skip_64x128x4d_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad_skip_64x128x4d = aom_sad_skip_64x128x4d_neon;
+  }
   aom_sad_skip_64x32 = aom_sad_skip_64x32_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad_skip_64x32 = aom_sad_skip_64x32_neon;
+  }
   aom_sad_skip_64x32x4d = aom_sad_skip_64x32x4d_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad_skip_64x32x4d = aom_sad_skip_64x32x4d_neon;
+  }
   aom_sad_skip_64x64 = aom_sad_skip_64x64_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad_skip_64x64 = aom_sad_skip_64x64_neon;
+  }
   aom_sad_skip_64x64x4d = aom_sad_skip_64x64x4d_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad_skip_64x64x4d = aom_sad_skip_64x64x4d_neon;
+  }
   aom_sad_skip_8x16 = aom_sad_skip_8x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad_skip_8x16 = aom_sad_skip_8x16_neon;
+  }
   aom_sad_skip_8x16x4d = aom_sad_skip_8x16x4d_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad_skip_8x16x4d = aom_sad_skip_8x16x4d_neon;
+  }
   aom_sad_skip_8x8 = aom_sad_skip_8x8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad_skip_8x8 = aom_sad_skip_8x8_neon;
+  }
   aom_sad_skip_8x8x4d = aom_sad_skip_8x8x4d_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sad_skip_8x8x4d = aom_sad_skip_8x8x4d_neon;
+  }
   aom_satd = aom_satd_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_satd = aom_satd_neon;
+  }
   aom_satd_lp = aom_satd_lp_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_satd_lp = aom_satd_lp_neon;
+  }
   aom_scaled_2d = aom_scaled_2d_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_scaled_2d = aom_scaled_2d_neon;
+  }
   aom_smooth_h_predictor_16x16 = aom_smooth_h_predictor_16x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_h_predictor_16x16 = aom_smooth_h_predictor_16x16_neon;
+  }
   aom_smooth_h_predictor_16x32 = aom_smooth_h_predictor_16x32_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_h_predictor_16x32 = aom_smooth_h_predictor_16x32_neon;
+  }
   aom_smooth_h_predictor_16x4 = aom_smooth_h_predictor_16x4_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_h_predictor_16x4 = aom_smooth_h_predictor_16x4_neon;
+  }
   aom_smooth_h_predictor_16x64 = aom_smooth_h_predictor_16x64_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_h_predictor_16x64 = aom_smooth_h_predictor_16x64_neon;
+  }
   aom_smooth_h_predictor_16x8 = aom_smooth_h_predictor_16x8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_h_predictor_16x8 = aom_smooth_h_predictor_16x8_neon;
+  }
   aom_smooth_h_predictor_32x16 = aom_smooth_h_predictor_32x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_h_predictor_32x16 = aom_smooth_h_predictor_32x16_neon;
+  }
   aom_smooth_h_predictor_32x32 = aom_smooth_h_predictor_32x32_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_h_predictor_32x32 = aom_smooth_h_predictor_32x32_neon;
+  }
   aom_smooth_h_predictor_32x64 = aom_smooth_h_predictor_32x64_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_h_predictor_32x64 = aom_smooth_h_predictor_32x64_neon;
+  }
   aom_smooth_h_predictor_32x8 = aom_smooth_h_predictor_32x8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_h_predictor_32x8 = aom_smooth_h_predictor_32x8_neon;
+  }
   aom_smooth_h_predictor_4x16 = aom_smooth_h_predictor_4x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_h_predictor_4x16 = aom_smooth_h_predictor_4x16_neon;
+  }
   aom_smooth_h_predictor_4x4 = aom_smooth_h_predictor_4x4_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_h_predictor_4x4 = aom_smooth_h_predictor_4x4_neon;
+  }
   aom_smooth_h_predictor_4x8 = aom_smooth_h_predictor_4x8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_h_predictor_4x8 = aom_smooth_h_predictor_4x8_neon;
+  }
   aom_smooth_h_predictor_64x16 = aom_smooth_h_predictor_64x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_h_predictor_64x16 = aom_smooth_h_predictor_64x16_neon;
+  }
   aom_smooth_h_predictor_64x32 = aom_smooth_h_predictor_64x32_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_h_predictor_64x32 = aom_smooth_h_predictor_64x32_neon;
+  }
   aom_smooth_h_predictor_64x64 = aom_smooth_h_predictor_64x64_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_h_predictor_64x64 = aom_smooth_h_predictor_64x64_neon;
+  }
   aom_smooth_h_predictor_8x16 = aom_smooth_h_predictor_8x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_h_predictor_8x16 = aom_smooth_h_predictor_8x16_neon;
+  }
   aom_smooth_h_predictor_8x32 = aom_smooth_h_predictor_8x32_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_h_predictor_8x32 = aom_smooth_h_predictor_8x32_neon;
+  }
   aom_smooth_h_predictor_8x4 = aom_smooth_h_predictor_8x4_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_h_predictor_8x4 = aom_smooth_h_predictor_8x4_neon;
+  }
   aom_smooth_h_predictor_8x8 = aom_smooth_h_predictor_8x8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_h_predictor_8x8 = aom_smooth_h_predictor_8x8_neon;
+  }
   aom_smooth_predictor_16x16 = aom_smooth_predictor_16x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_predictor_16x16 = aom_smooth_predictor_16x16_neon;
+  }
   aom_smooth_predictor_16x32 = aom_smooth_predictor_16x32_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_predictor_16x32 = aom_smooth_predictor_16x32_neon;
+  }
   aom_smooth_predictor_16x4 = aom_smooth_predictor_16x4_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_predictor_16x4 = aom_smooth_predictor_16x4_neon;
+  }
   aom_smooth_predictor_16x64 = aom_smooth_predictor_16x64_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_predictor_16x64 = aom_smooth_predictor_16x64_neon;
+  }
   aom_smooth_predictor_16x8 = aom_smooth_predictor_16x8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_predictor_16x8 = aom_smooth_predictor_16x8_neon;
+  }
   aom_smooth_predictor_32x16 = aom_smooth_predictor_32x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_predictor_32x16 = aom_smooth_predictor_32x16_neon;
+  }
   aom_smooth_predictor_32x32 = aom_smooth_predictor_32x32_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_predictor_32x32 = aom_smooth_predictor_32x32_neon;
+  }
   aom_smooth_predictor_32x64 = aom_smooth_predictor_32x64_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_predictor_32x64 = aom_smooth_predictor_32x64_neon;
+  }
   aom_smooth_predictor_32x8 = aom_smooth_predictor_32x8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_predictor_32x8 = aom_smooth_predictor_32x8_neon;
+  }
   aom_smooth_predictor_4x16 = aom_smooth_predictor_4x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_predictor_4x16 = aom_smooth_predictor_4x16_neon;
+  }
   aom_smooth_predictor_4x4 = aom_smooth_predictor_4x4_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_predictor_4x4 = aom_smooth_predictor_4x4_neon;
+  }
   aom_smooth_predictor_4x8 = aom_smooth_predictor_4x8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_predictor_4x8 = aom_smooth_predictor_4x8_neon;
+  }
   aom_smooth_predictor_64x16 = aom_smooth_predictor_64x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_predictor_64x16 = aom_smooth_predictor_64x16_neon;
+  }
   aom_smooth_predictor_64x32 = aom_smooth_predictor_64x32_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_predictor_64x32 = aom_smooth_predictor_64x32_neon;
+  }
   aom_smooth_predictor_64x64 = aom_smooth_predictor_64x64_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_predictor_64x64 = aom_smooth_predictor_64x64_neon;
+  }
   aom_smooth_predictor_8x16 = aom_smooth_predictor_8x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_predictor_8x16 = aom_smooth_predictor_8x16_neon;
+  }
   aom_smooth_predictor_8x32 = aom_smooth_predictor_8x32_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_predictor_8x32 = aom_smooth_predictor_8x32_neon;
+  }
   aom_smooth_predictor_8x4 = aom_smooth_predictor_8x4_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_predictor_8x4 = aom_smooth_predictor_8x4_neon;
+  }
   aom_smooth_predictor_8x8 = aom_smooth_predictor_8x8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_predictor_8x8 = aom_smooth_predictor_8x8_neon;
+  }
   aom_smooth_v_predictor_16x16 = aom_smooth_v_predictor_16x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_v_predictor_16x16 = aom_smooth_v_predictor_16x16_neon;
+  }
   aom_smooth_v_predictor_16x32 = aom_smooth_v_predictor_16x32_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_v_predictor_16x32 = aom_smooth_v_predictor_16x32_neon;
+  }
   aom_smooth_v_predictor_16x4 = aom_smooth_v_predictor_16x4_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_v_predictor_16x4 = aom_smooth_v_predictor_16x4_neon;
+  }
   aom_smooth_v_predictor_16x64 = aom_smooth_v_predictor_16x64_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_v_predictor_16x64 = aom_smooth_v_predictor_16x64_neon;
+  }
   aom_smooth_v_predictor_16x8 = aom_smooth_v_predictor_16x8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_v_predictor_16x8 = aom_smooth_v_predictor_16x8_neon;
+  }
   aom_smooth_v_predictor_32x16 = aom_smooth_v_predictor_32x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_v_predictor_32x16 = aom_smooth_v_predictor_32x16_neon;
+  }
   aom_smooth_v_predictor_32x32 = aom_smooth_v_predictor_32x32_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_v_predictor_32x32 = aom_smooth_v_predictor_32x32_neon;
+  }
   aom_smooth_v_predictor_32x64 = aom_smooth_v_predictor_32x64_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_v_predictor_32x64 = aom_smooth_v_predictor_32x64_neon;
+  }
   aom_smooth_v_predictor_32x8 = aom_smooth_v_predictor_32x8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_v_predictor_32x8 = aom_smooth_v_predictor_32x8_neon;
+  }
   aom_smooth_v_predictor_4x16 = aom_smooth_v_predictor_4x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_v_predictor_4x16 = aom_smooth_v_predictor_4x16_neon;
+  }
   aom_smooth_v_predictor_4x4 = aom_smooth_v_predictor_4x4_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_v_predictor_4x4 = aom_smooth_v_predictor_4x4_neon;
+  }
   aom_smooth_v_predictor_4x8 = aom_smooth_v_predictor_4x8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_v_predictor_4x8 = aom_smooth_v_predictor_4x8_neon;
+  }
   aom_smooth_v_predictor_64x16 = aom_smooth_v_predictor_64x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_v_predictor_64x16 = aom_smooth_v_predictor_64x16_neon;
+  }
   aom_smooth_v_predictor_64x32 = aom_smooth_v_predictor_64x32_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_v_predictor_64x32 = aom_smooth_v_predictor_64x32_neon;
+  }
   aom_smooth_v_predictor_64x64 = aom_smooth_v_predictor_64x64_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_v_predictor_64x64 = aom_smooth_v_predictor_64x64_neon;
+  }
   aom_smooth_v_predictor_8x16 = aom_smooth_v_predictor_8x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_v_predictor_8x16 = aom_smooth_v_predictor_8x16_neon;
+  }
   aom_smooth_v_predictor_8x32 = aom_smooth_v_predictor_8x32_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_v_predictor_8x32 = aom_smooth_v_predictor_8x32_neon;
+  }
   aom_smooth_v_predictor_8x4 = aom_smooth_v_predictor_8x4_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_v_predictor_8x4 = aom_smooth_v_predictor_8x4_neon;
+  }
   aom_smooth_v_predictor_8x8 = aom_smooth_v_predictor_8x8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_smooth_v_predictor_8x8 = aom_smooth_v_predictor_8x8_neon;
+  }
   aom_sse = aom_sse_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sse = aom_sse_neon;
+  }
+  aom_sub_pixel_avg_variance128x128 = aom_sub_pixel_avg_variance128x128_c;
+  if (flags & HAS_NEON) {
+    aom_sub_pixel_avg_variance128x128 = aom_sub_pixel_avg_variance128x128_neon;
+  }
+  aom_sub_pixel_avg_variance128x64 = aom_sub_pixel_avg_variance128x64_c;
+  if (flags & HAS_NEON) {
+    aom_sub_pixel_avg_variance128x64 = aom_sub_pixel_avg_variance128x64_neon;
+  }
+  aom_sub_pixel_avg_variance16x16 = aom_sub_pixel_avg_variance16x16_c;
+  if (flags & HAS_NEON) {
+    aom_sub_pixel_avg_variance16x16 = aom_sub_pixel_avg_variance16x16_neon;
+  }
+  aom_sub_pixel_avg_variance16x32 = aom_sub_pixel_avg_variance16x32_c;
+  if (flags & HAS_NEON) {
+    aom_sub_pixel_avg_variance16x32 = aom_sub_pixel_avg_variance16x32_neon;
+  }
+  aom_sub_pixel_avg_variance16x8 = aom_sub_pixel_avg_variance16x8_c;
+  if (flags & HAS_NEON) {
+    aom_sub_pixel_avg_variance16x8 = aom_sub_pixel_avg_variance16x8_neon;
+  }
+  aom_sub_pixel_avg_variance32x16 = aom_sub_pixel_avg_variance32x16_c;
+  if (flags & HAS_NEON) {
+    aom_sub_pixel_avg_variance32x16 = aom_sub_pixel_avg_variance32x16_neon;
+  }
+  aom_sub_pixel_avg_variance32x32 = aom_sub_pixel_avg_variance32x32_c;
+  if (flags & HAS_NEON) {
+    aom_sub_pixel_avg_variance32x32 = aom_sub_pixel_avg_variance32x32_neon;
+  }
+  aom_sub_pixel_avg_variance32x64 = aom_sub_pixel_avg_variance32x64_c;
+  if (flags & HAS_NEON) {
+    aom_sub_pixel_avg_variance32x64 = aom_sub_pixel_avg_variance32x64_neon;
+  }
+  aom_sub_pixel_avg_variance4x4 = aom_sub_pixel_avg_variance4x4_c;
+  if (flags & HAS_NEON) {
+    aom_sub_pixel_avg_variance4x4 = aom_sub_pixel_avg_variance4x4_neon;
+  }
+  aom_sub_pixel_avg_variance4x8 = aom_sub_pixel_avg_variance4x8_c;
+  if (flags & HAS_NEON) {
+    aom_sub_pixel_avg_variance4x8 = aom_sub_pixel_avg_variance4x8_neon;
+  }
+  aom_sub_pixel_avg_variance64x128 = aom_sub_pixel_avg_variance64x128_c;
+  if (flags & HAS_NEON) {
+    aom_sub_pixel_avg_variance64x128 = aom_sub_pixel_avg_variance64x128_neon;
+  }
+  aom_sub_pixel_avg_variance64x32 = aom_sub_pixel_avg_variance64x32_c;
+  if (flags & HAS_NEON) {
+    aom_sub_pixel_avg_variance64x32 = aom_sub_pixel_avg_variance64x32_neon;
+  }
+  aom_sub_pixel_avg_variance64x64 = aom_sub_pixel_avg_variance64x64_c;
+  if (flags & HAS_NEON) {
+    aom_sub_pixel_avg_variance64x64 = aom_sub_pixel_avg_variance64x64_neon;
+  }
+  aom_sub_pixel_avg_variance8x16 = aom_sub_pixel_avg_variance8x16_c;
+  if (flags & HAS_NEON) {
+    aom_sub_pixel_avg_variance8x16 = aom_sub_pixel_avg_variance8x16_neon;
+  }
+  aom_sub_pixel_avg_variance8x4 = aom_sub_pixel_avg_variance8x4_c;
+  if (flags & HAS_NEON) {
+    aom_sub_pixel_avg_variance8x4 = aom_sub_pixel_avg_variance8x4_neon;
+  }
+  aom_sub_pixel_avg_variance8x8 = aom_sub_pixel_avg_variance8x8_c;
+  if (flags & HAS_NEON) {
+    aom_sub_pixel_avg_variance8x8 = aom_sub_pixel_avg_variance8x8_neon;
+  }
   aom_sub_pixel_variance128x128 = aom_sub_pixel_variance128x128_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sub_pixel_variance128x128 = aom_sub_pixel_variance128x128_neon;
+  }
   aom_sub_pixel_variance128x64 = aom_sub_pixel_variance128x64_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sub_pixel_variance128x64 = aom_sub_pixel_variance128x64_neon;
+  }
   aom_sub_pixel_variance16x16 = aom_sub_pixel_variance16x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sub_pixel_variance16x16 = aom_sub_pixel_variance16x16_neon;
+  }
   aom_sub_pixel_variance16x32 = aom_sub_pixel_variance16x32_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sub_pixel_variance16x32 = aom_sub_pixel_variance16x32_neon;
+  }
   aom_sub_pixel_variance16x8 = aom_sub_pixel_variance16x8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sub_pixel_variance16x8 = aom_sub_pixel_variance16x8_neon;
+  }
   aom_sub_pixel_variance32x16 = aom_sub_pixel_variance32x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sub_pixel_variance32x16 = aom_sub_pixel_variance32x16_neon;
+  }
   aom_sub_pixel_variance32x32 = aom_sub_pixel_variance32x32_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sub_pixel_variance32x32 = aom_sub_pixel_variance32x32_neon;
+  }
   aom_sub_pixel_variance32x64 = aom_sub_pixel_variance32x64_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sub_pixel_variance32x64 = aom_sub_pixel_variance32x64_neon;
+  }
   aom_sub_pixel_variance4x4 = aom_sub_pixel_variance4x4_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sub_pixel_variance4x4 = aom_sub_pixel_variance4x4_neon;
+  }
   aom_sub_pixel_variance4x8 = aom_sub_pixel_variance4x8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sub_pixel_variance4x8 = aom_sub_pixel_variance4x8_neon;
+  }
   aom_sub_pixel_variance64x128 = aom_sub_pixel_variance64x128_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sub_pixel_variance64x128 = aom_sub_pixel_variance64x128_neon;
+  }
   aom_sub_pixel_variance64x32 = aom_sub_pixel_variance64x32_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sub_pixel_variance64x32 = aom_sub_pixel_variance64x32_neon;
+  }
   aom_sub_pixel_variance64x64 = aom_sub_pixel_variance64x64_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sub_pixel_variance64x64 = aom_sub_pixel_variance64x64_neon;
+  }
   aom_sub_pixel_variance8x16 = aom_sub_pixel_variance8x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sub_pixel_variance8x16 = aom_sub_pixel_variance8x16_neon;
+  }
   aom_sub_pixel_variance8x4 = aom_sub_pixel_variance8x4_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sub_pixel_variance8x4 = aom_sub_pixel_variance8x4_neon;
+  }
   aom_sub_pixel_variance8x8 = aom_sub_pixel_variance8x8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sub_pixel_variance8x8 = aom_sub_pixel_variance8x8_neon;
+  }
   aom_subtract_block = aom_subtract_block_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_subtract_block = aom_subtract_block_neon;
+  }
   aom_sum_squares_2d_i16 = aom_sum_squares_2d_i16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sum_squares_2d_i16 = aom_sum_squares_2d_i16_neon;
+  }
   aom_sum_sse_2d_i16 = aom_sum_sse_2d_i16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_sum_sse_2d_i16 = aom_sum_sse_2d_i16_neon;
+  }
   aom_v_predictor_16x16 = aom_v_predictor_16x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_v_predictor_16x16 = aom_v_predictor_16x16_neon;
+  }
   aom_v_predictor_32x32 = aom_v_predictor_32x32_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_v_predictor_32x32 = aom_v_predictor_32x32_neon;
+  }
   aom_v_predictor_4x4 = aom_v_predictor_4x4_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_v_predictor_4x4 = aom_v_predictor_4x4_neon;
+  }
   aom_v_predictor_8x8 = aom_v_predictor_8x8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_v_predictor_8x8 = aom_v_predictor_8x8_neon;
+  }
   aom_variance128x128 = aom_variance128x128_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_variance128x128 = aom_variance128x128_neon;
+  }
   aom_variance128x64 = aom_variance128x64_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_variance128x64 = aom_variance128x64_neon;
+  }
   aom_variance16x16 = aom_variance16x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_variance16x16 = aom_variance16x16_neon;
+  }
   aom_variance16x32 = aom_variance16x32_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_variance16x32 = aom_variance16x32_neon;
+  }
   aom_variance16x8 = aom_variance16x8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_variance16x8 = aom_variance16x8_neon;
+  }
   aom_variance32x16 = aom_variance32x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_variance32x16 = aom_variance32x16_neon;
+  }
   aom_variance32x32 = aom_variance32x32_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_variance32x32 = aom_variance32x32_neon;
+  }
   aom_variance32x64 = aom_variance32x64_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_variance32x64 = aom_variance32x64_neon;
+  }
   aom_variance4x4 = aom_variance4x4_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_variance4x4 = aom_variance4x4_neon;
+  }
   aom_variance4x8 = aom_variance4x8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_variance4x8 = aom_variance4x8_neon;
+  }
   aom_variance64x128 = aom_variance64x128_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_variance64x128 = aom_variance64x128_neon;
+  }
   aom_variance64x32 = aom_variance64x32_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_variance64x32 = aom_variance64x32_neon;
+  }
   aom_variance64x64 = aom_variance64x64_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_variance64x64 = aom_variance64x64_neon;
+  }
   aom_variance8x16 = aom_variance8x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_variance8x16 = aom_variance8x16_neon;
+  }
   aom_variance8x4 = aom_variance8x4_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_variance8x4 = aom_variance8x4_neon;
+  }
   aom_variance8x8 = aom_variance8x8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_variance8x8 = aom_variance8x8_neon;
+  }
   aom_vector_var = aom_vector_var_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_vector_var = aom_vector_var_neon;
+  }
 }
 #endif
 
diff --git a/libaom/source/config/linux/arm-neon-cpu-detect/config/aom_scale_rtcd.h b/libaom/source/config/linux/arm-neon-cpu-detect/config/aom_scale_rtcd.h
index 7db7b9d..bc23102 100644
--- a/libaom/source/config/linux/arm-neon-cpu-detect/config/aom_scale_rtcd.h
+++ b/libaom/source/config/linux/arm-neon-cpu-detect/config/aom_scale_rtcd.h
@@ -155,6 +155,7 @@ void aom_yv12_partial_copy_y_c(const struct yv12_buffer_config* src_ybc,
 int aom_yv12_realloc_with_new_border_c(struct yv12_buffer_config* ybf,
                                        int new_border,
                                        int byte_alignment,
+                                       int num_pyramid_levels,
                                        int num_planes);
 #define aom_yv12_realloc_with_new_border aom_yv12_realloc_with_new_border_c
 
diff --git a/libaom/source/config/linux/arm-neon-cpu-detect/config/av1_rtcd.h b/libaom/source/config/linux/arm-neon-cpu-detect/config/av1_rtcd.h
index 09e25d1..9fbabdd 100644
--- a/libaom/source/config/linux/arm-neon-cpu-detect/config/av1_rtcd.h
+++ b/libaom/source/config/linux/arm-neon-cpu-detect/config/av1_rtcd.h
@@ -304,30 +304,22 @@ int64_t av1_calc_frame_error_c(const uint8_t* const ref,
                                int p_stride);
 #define av1_calc_frame_error av1_calc_frame_error_c
 
-void av1_calc_indices_dim1_c(const int* data,
-                             const int* centroids,
+void av1_calc_indices_dim1_c(const int16_t* data,
+                             const int16_t* centroids,
                              uint8_t* indices,
+                             int64_t* total_dist,
                              int n,
                              int k);
 #define av1_calc_indices_dim1 av1_calc_indices_dim1_c
 
-void av1_calc_indices_dim2_c(const int* data,
-                             const int* centroids,
+void av1_calc_indices_dim2_c(const int16_t* data,
+                             const int16_t* centroids,
                              uint8_t* indices,
+                             int64_t* total_dist,
                              int n,
                              int k);
 #define av1_calc_indices_dim2 av1_calc_indices_dim2_c
 
-double av1_compute_cross_correlation_c(unsigned char* im1,
-                                       int stride1,
-                                       int x1,
-                                       int y1,
-                                       unsigned char* im2,
-                                       int stride2,
-                                       int x2,
-                                       int y2);
-#define av1_compute_cross_correlation av1_compute_cross_correlation_c
-
 void av1_convolve_2d_scale_c(const uint8_t* src,
                              int src_stride,
                              uint8_t* dst,
@@ -970,14 +962,6 @@ RTCD_EXTERN void (*av1_get_nz_map_contexts)(const uint8_t* const levels,
                                             const TX_CLASS tx_class,
                                             int8_t* const coeff_contexts);
 
-void av1_highbd_fwht4x4_c(const int16_t* input, tran_low_t* output, int stride);
-void av1_highbd_fwht4x4_neon(const int16_t* input,
-                             tran_low_t* output,
-                             int stride);
-RTCD_EXTERN void (*av1_highbd_fwht4x4)(const int16_t* input,
-                                       tran_low_t* output,
-                                       int stride);
-
 void av1_highbd_inv_txfm_add_c(const tran_low_t* input,
                                uint8_t* dest,
                                int stride,
@@ -1894,39 +1878,39 @@ void cdef_copy_rect8_16bit_to_16bit_c(uint16_t* dst,
                                       int dstride,
                                       const uint16_t* src,
                                       int sstride,
-                                      int v,
-                                      int h);
+                                      int width,
+                                      int height);
 void cdef_copy_rect8_16bit_to_16bit_neon(uint16_t* dst,
                                          int dstride,
                                          const uint16_t* src,
                                          int sstride,
-                                         int v,
-                                         int h);
+                                         int width,
+                                         int height);
 RTCD_EXTERN void (*cdef_copy_rect8_16bit_to_16bit)(uint16_t* dst,
                                                    int dstride,
                                                    const uint16_t* src,
                                                    int sstride,
-                                                   int v,
-                                                   int h);
+                                                   int width,
+                                                   int height);
 
 void cdef_copy_rect8_8bit_to_16bit_c(uint16_t* dst,
                                      int dstride,
                                      const uint8_t* src,
                                      int sstride,
-                                     int v,
-                                     int h);
+                                     int width,
+                                     int height);
 void cdef_copy_rect8_8bit_to_16bit_neon(uint16_t* dst,
                                         int dstride,
                                         const uint8_t* src,
                                         int sstride,
-                                        int v,
-                                        int h);
+                                        int width,
+                                        int height);
 RTCD_EXTERN void (*cdef_copy_rect8_8bit_to_16bit)(uint16_t* dst,
                                                   int dstride,
                                                   const uint8_t* src,
                                                   int sstride,
-                                                  int v,
-                                                  int h);
+                                                  int width,
+                                                  int height);
 
 void cdef_filter_16_0_c(void* dst16,
                         int dstride,
@@ -2274,303 +2258,398 @@ static void setup_rtcd_internal(void) {
   (void)flags;
 
   aom_quantize_b_helper = aom_quantize_b_helper_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     aom_quantize_b_helper = aom_quantize_b_helper_neon;
+  }
   av1_apply_selfguided_restoration = av1_apply_selfguided_restoration_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_apply_selfguided_restoration = av1_apply_selfguided_restoration_neon;
+  }
   av1_block_error = av1_block_error_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_block_error = av1_block_error_neon;
+  }
   av1_block_error_lp = av1_block_error_lp_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_block_error_lp = av1_block_error_lp_neon;
+  }
   av1_build_compound_diffwtd_mask_d16 = av1_build_compound_diffwtd_mask_d16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_build_compound_diffwtd_mask_d16 =
         av1_build_compound_diffwtd_mask_d16_neon;
+  }
   av1_convolve_2d_sr = av1_convolve_2d_sr_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_convolve_2d_sr = av1_convolve_2d_sr_neon;
+  }
   av1_convolve_x_sr = av1_convolve_x_sr_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_convolve_x_sr = av1_convolve_x_sr_neon;
+  }
   av1_convolve_y_sr = av1_convolve_y_sr_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_convolve_y_sr = av1_convolve_y_sr_neon;
+  }
   av1_denoiser_filter = av1_denoiser_filter_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_denoiser_filter = av1_denoiser_filter_neon;
+  }
   av1_dist_wtd_convolve_2d = av1_dist_wtd_convolve_2d_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_dist_wtd_convolve_2d = av1_dist_wtd_convolve_2d_neon;
+  }
   av1_dist_wtd_convolve_2d_copy = av1_dist_wtd_convolve_2d_copy_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_dist_wtd_convolve_2d_copy = av1_dist_wtd_convolve_2d_copy_neon;
+  }
   av1_dist_wtd_convolve_x = av1_dist_wtd_convolve_x_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_dist_wtd_convolve_x = av1_dist_wtd_convolve_x_neon;
+  }
   av1_dist_wtd_convolve_y = av1_dist_wtd_convolve_y_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_dist_wtd_convolve_y = av1_dist_wtd_convolve_y_neon;
+  }
   av1_dr_prediction_z1 = av1_dr_prediction_z1_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_dr_prediction_z1 = av1_dr_prediction_z1_neon;
+  }
   av1_dr_prediction_z2 = av1_dr_prediction_z2_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_dr_prediction_z2 = av1_dr_prediction_z2_neon;
+  }
   av1_dr_prediction_z3 = av1_dr_prediction_z3_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_dr_prediction_z3 = av1_dr_prediction_z3_neon;
+  }
   av1_filter_intra_predictor = av1_filter_intra_predictor_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_filter_intra_predictor = av1_filter_intra_predictor_neon;
+  }
   av1_fwd_txfm2d_16x16 = av1_fwd_txfm2d_16x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_fwd_txfm2d_16x16 = av1_fwd_txfm2d_16x16_neon;
+  }
   av1_fwd_txfm2d_16x32 = av1_fwd_txfm2d_16x32_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_fwd_txfm2d_16x32 = av1_fwd_txfm2d_16x32_neon;
+  }
   av1_fwd_txfm2d_16x4 = av1_fwd_txfm2d_16x4_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_fwd_txfm2d_16x4 = av1_fwd_txfm2d_16x4_neon;
+  }
   av1_fwd_txfm2d_16x8 = av1_fwd_txfm2d_16x8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_fwd_txfm2d_16x8 = av1_fwd_txfm2d_16x8_neon;
+  }
   av1_fwd_txfm2d_32x16 = av1_fwd_txfm2d_32x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_fwd_txfm2d_32x16 = av1_fwd_txfm2d_32x16_neon;
+  }
   av1_fwd_txfm2d_32x32 = av1_fwd_txfm2d_32x32_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_fwd_txfm2d_32x32 = av1_fwd_txfm2d_32x32_neon;
+  }
   av1_fwd_txfm2d_32x64 = av1_fwd_txfm2d_32x64_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_fwd_txfm2d_32x64 = av1_fwd_txfm2d_32x64_neon;
+  }
   av1_fwd_txfm2d_4x4 = av1_fwd_txfm2d_4x4_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_fwd_txfm2d_4x4 = av1_fwd_txfm2d_4x4_neon;
+  }
   av1_fwd_txfm2d_4x8 = av1_fwd_txfm2d_4x8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_fwd_txfm2d_4x8 = av1_fwd_txfm2d_4x8_neon;
+  }
   av1_fwd_txfm2d_64x32 = av1_fwd_txfm2d_64x32_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_fwd_txfm2d_64x32 = av1_fwd_txfm2d_64x32_neon;
+  }
   av1_fwd_txfm2d_64x64 = av1_fwd_txfm2d_64x64_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_fwd_txfm2d_64x64 = av1_fwd_txfm2d_64x64_neon;
+  }
   av1_fwd_txfm2d_8x16 = av1_fwd_txfm2d_8x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_fwd_txfm2d_8x16 = av1_fwd_txfm2d_8x16_neon;
+  }
   av1_fwd_txfm2d_8x4 = av1_fwd_txfm2d_8x4_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_fwd_txfm2d_8x4 = av1_fwd_txfm2d_8x4_neon;
+  }
   av1_fwd_txfm2d_8x8 = av1_fwd_txfm2d_8x8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_fwd_txfm2d_8x8 = av1_fwd_txfm2d_8x8_neon;
+  }
   av1_fwht4x4 = av1_fwht4x4_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_fwht4x4 = av1_fwht4x4_neon;
+  }
   av1_get_horver_correlation_full = av1_get_horver_correlation_full_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_get_horver_correlation_full = av1_get_horver_correlation_full_neon;
+  }
   av1_get_nz_map_contexts = av1_get_nz_map_contexts_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_get_nz_map_contexts = av1_get_nz_map_contexts_neon;
-  av1_highbd_fwht4x4 = av1_highbd_fwht4x4_c;
-  if (flags & HAS_NEON)
-    av1_highbd_fwht4x4 = av1_highbd_fwht4x4_neon;
+  }
   av1_highbd_inv_txfm_add = av1_highbd_inv_txfm_add_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_highbd_inv_txfm_add = av1_highbd_inv_txfm_add_neon;
+  }
   av1_highbd_inv_txfm_add_16x32 = av1_highbd_inv_txfm_add_16x32_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_highbd_inv_txfm_add_16x32 = av1_highbd_inv_txfm_add_16x32_neon;
+  }
   av1_highbd_inv_txfm_add_16x4 = av1_highbd_inv_txfm_add_16x4_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_highbd_inv_txfm_add_16x4 = av1_highbd_inv_txfm_add_16x4_neon;
+  }
   av1_highbd_inv_txfm_add_16x8 = av1_highbd_inv_txfm_add_16x8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_highbd_inv_txfm_add_16x8 = av1_highbd_inv_txfm_add_16x8_neon;
+  }
   av1_highbd_inv_txfm_add_32x16 = av1_highbd_inv_txfm_add_32x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_highbd_inv_txfm_add_32x16 = av1_highbd_inv_txfm_add_32x16_neon;
+  }
   av1_highbd_inv_txfm_add_32x32 = av1_highbd_inv_txfm_add_32x32_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_highbd_inv_txfm_add_32x32 = av1_highbd_inv_txfm_add_32x32_neon;
+  }
   av1_highbd_inv_txfm_add_32x64 = av1_highbd_inv_txfm_add_32x64_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_highbd_inv_txfm_add_32x64 = av1_highbd_inv_txfm_add_32x64_neon;
+  }
   av1_highbd_inv_txfm_add_4x16 = av1_highbd_inv_txfm_add_4x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_highbd_inv_txfm_add_4x16 = av1_highbd_inv_txfm_add_4x16_neon;
+  }
   av1_highbd_inv_txfm_add_4x4 = av1_highbd_inv_txfm_add_4x4_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_highbd_inv_txfm_add_4x4 = av1_highbd_inv_txfm_add_4x4_neon;
+  }
   av1_highbd_inv_txfm_add_4x8 = av1_highbd_inv_txfm_add_4x8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_highbd_inv_txfm_add_4x8 = av1_highbd_inv_txfm_add_4x8_neon;
+  }
   av1_highbd_inv_txfm_add_64x32 = av1_highbd_inv_txfm_add_64x32_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_highbd_inv_txfm_add_64x32 = av1_highbd_inv_txfm_add_64x32_neon;
+  }
   av1_highbd_inv_txfm_add_64x64 = av1_highbd_inv_txfm_add_64x64_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_highbd_inv_txfm_add_64x64 = av1_highbd_inv_txfm_add_64x64_neon;
+  }
   av1_highbd_inv_txfm_add_8x16 = av1_highbd_inv_txfm_add_8x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_highbd_inv_txfm_add_8x16 = av1_highbd_inv_txfm_add_8x16_neon;
+  }
   av1_highbd_inv_txfm_add_8x4 = av1_highbd_inv_txfm_add_8x4_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_highbd_inv_txfm_add_8x4 = av1_highbd_inv_txfm_add_8x4_neon;
+  }
   av1_highbd_inv_txfm_add_8x8 = av1_highbd_inv_txfm_add_8x8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_highbd_inv_txfm_add_8x8 = av1_highbd_inv_txfm_add_8x8_neon;
+  }
   av1_inv_txfm2d_add_16x32 = av1_inv_txfm2d_add_16x32_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_inv_txfm2d_add_16x32 = av1_inv_txfm2d_add_16x32_neon;
+  }
   av1_inv_txfm2d_add_16x4 = av1_inv_txfm2d_add_16x4_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_inv_txfm2d_add_16x4 = av1_inv_txfm2d_add_16x4_neon;
+  }
   av1_inv_txfm2d_add_16x64 = av1_inv_txfm2d_add_16x64_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_inv_txfm2d_add_16x64 = av1_inv_txfm2d_add_16x64_neon;
+  }
   av1_inv_txfm2d_add_16x8 = av1_inv_txfm2d_add_16x8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_inv_txfm2d_add_16x8 = av1_inv_txfm2d_add_16x8_neon;
+  }
   av1_inv_txfm2d_add_32x16 = av1_inv_txfm2d_add_32x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_inv_txfm2d_add_32x16 = av1_inv_txfm2d_add_32x16_neon;
+  }
   av1_inv_txfm2d_add_32x32 = av1_inv_txfm2d_add_32x32_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_inv_txfm2d_add_32x32 = av1_inv_txfm2d_add_32x32_neon;
+  }
   av1_inv_txfm2d_add_32x64 = av1_inv_txfm2d_add_32x64_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_inv_txfm2d_add_32x64 = av1_inv_txfm2d_add_32x64_neon;
+  }
   av1_inv_txfm2d_add_32x8 = av1_inv_txfm2d_add_32x8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_inv_txfm2d_add_32x8 = av1_inv_txfm2d_add_32x8_neon;
+  }
   av1_inv_txfm2d_add_4x16 = av1_inv_txfm2d_add_4x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_inv_txfm2d_add_4x16 = av1_inv_txfm2d_add_4x16_neon;
+  }
   av1_inv_txfm2d_add_4x4 = av1_inv_txfm2d_add_4x4_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_inv_txfm2d_add_4x4 = av1_inv_txfm2d_add_4x4_neon;
+  }
   av1_inv_txfm2d_add_4x8 = av1_inv_txfm2d_add_4x8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_inv_txfm2d_add_4x8 = av1_inv_txfm2d_add_4x8_neon;
+  }
   av1_inv_txfm2d_add_64x16 = av1_inv_txfm2d_add_64x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_inv_txfm2d_add_64x16 = av1_inv_txfm2d_add_64x16_neon;
+  }
   av1_inv_txfm2d_add_64x32 = av1_inv_txfm2d_add_64x32_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_inv_txfm2d_add_64x32 = av1_inv_txfm2d_add_64x32_neon;
+  }
   av1_inv_txfm2d_add_64x64 = av1_inv_txfm2d_add_64x64_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_inv_txfm2d_add_64x64 = av1_inv_txfm2d_add_64x64_neon;
+  }
   av1_inv_txfm2d_add_8x16 = av1_inv_txfm2d_add_8x16_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_inv_txfm2d_add_8x16 = av1_inv_txfm2d_add_8x16_neon;
+  }
   av1_inv_txfm2d_add_8x32 = av1_inv_txfm2d_add_8x32_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_inv_txfm2d_add_8x32 = av1_inv_txfm2d_add_8x32_neon;
+  }
   av1_inv_txfm2d_add_8x4 = av1_inv_txfm2d_add_8x4_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_inv_txfm2d_add_8x4 = av1_inv_txfm2d_add_8x4_neon;
+  }
   av1_inv_txfm2d_add_8x8 = av1_inv_txfm2d_add_8x8_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_inv_txfm2d_add_8x8 = av1_inv_txfm2d_add_8x8_neon;
+  }
   av1_inv_txfm_add = av1_inv_txfm_add_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_inv_txfm_add = av1_inv_txfm_add_neon;
+  }
   av1_lowbd_fwd_txfm = av1_lowbd_fwd_txfm_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_lowbd_fwd_txfm = av1_lowbd_fwd_txfm_neon;
+  }
   av1_nn_predict = av1_nn_predict_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_nn_predict = av1_nn_predict_neon;
+  }
   av1_quantize_fp = av1_quantize_fp_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_quantize_fp = av1_quantize_fp_neon;
+  }
   av1_quantize_fp_32x32 = av1_quantize_fp_32x32_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_quantize_fp_32x32 = av1_quantize_fp_32x32_neon;
+  }
   av1_quantize_fp_64x64 = av1_quantize_fp_64x64_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_quantize_fp_64x64 = av1_quantize_fp_64x64_neon;
+  }
   av1_quantize_lp = av1_quantize_lp_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_quantize_lp = av1_quantize_lp_neon;
+  }
   av1_resize_and_extend_frame = av1_resize_and_extend_frame_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_resize_and_extend_frame = av1_resize_and_extend_frame_neon;
+  }
   av1_round_shift_array = av1_round_shift_array_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_round_shift_array = av1_round_shift_array_neon;
+  }
   av1_selfguided_restoration = av1_selfguided_restoration_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_selfguided_restoration = av1_selfguided_restoration_neon;
+  }
   av1_txb_init_levels = av1_txb_init_levels_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_txb_init_levels = av1_txb_init_levels_neon;
+  }
   av1_warp_affine = av1_warp_affine_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_warp_affine = av1_warp_affine_neon;
+  }
   av1_wedge_sse_from_residuals = av1_wedge_sse_from_residuals_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_wedge_sse_from_residuals = av1_wedge_sse_from_residuals_neon;
+  }
   av1_wiener_convolve_add_src = av1_wiener_convolve_add_src_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     av1_wiener_convolve_add_src = av1_wiener_convolve_add_src_neon;
+  }
   cdef_copy_rect8_16bit_to_16bit = cdef_copy_rect8_16bit_to_16bit_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     cdef_copy_rect8_16bit_to_16bit = cdef_copy_rect8_16bit_to_16bit_neon;
+  }
   cdef_copy_rect8_8bit_to_16bit = cdef_copy_rect8_8bit_to_16bit_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     cdef_copy_rect8_8bit_to_16bit = cdef_copy_rect8_8bit_to_16bit_neon;
+  }
   cdef_filter_16_0 = cdef_filter_16_0_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     cdef_filter_16_0 = cdef_filter_16_0_neon;
+  }
   cdef_filter_16_1 = cdef_filter_16_1_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     cdef_filter_16_1 = cdef_filter_16_1_neon;
+  }
   cdef_filter_16_2 = cdef_filter_16_2_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     cdef_filter_16_2 = cdef_filter_16_2_neon;
+  }
   cdef_filter_16_3 = cdef_filter_16_3_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     cdef_filter_16_3 = cdef_filter_16_3_neon;
+  }
   cdef_filter_8_0 = cdef_filter_8_0_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     cdef_filter_8_0 = cdef_filter_8_0_neon;
+  }
   cdef_filter_8_1 = cdef_filter_8_1_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     cdef_filter_8_1 = cdef_filter_8_1_neon;
+  }
   cdef_filter_8_2 = cdef_filter_8_2_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     cdef_filter_8_2 = cdef_filter_8_2_neon;
+  }
   cdef_filter_8_3 = cdef_filter_8_3_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     cdef_filter_8_3 = cdef_filter_8_3_neon;
+  }
   cdef_find_dir = cdef_find_dir_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     cdef_find_dir = cdef_find_dir_neon;
+  }
   cdef_find_dir_dual = cdef_find_dir_dual_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     cdef_find_dir_dual = cdef_find_dir_dual_neon;
+  }
   cfl_get_luma_subsampling_420_lbd = cfl_get_luma_subsampling_420_lbd_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     cfl_get_luma_subsampling_420_lbd = cfl_get_luma_subsampling_420_lbd_neon;
+  }
   cfl_get_luma_subsampling_422_lbd = cfl_get_luma_subsampling_422_lbd_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     cfl_get_luma_subsampling_422_lbd = cfl_get_luma_subsampling_422_lbd_neon;
+  }
   cfl_get_luma_subsampling_444_lbd = cfl_get_luma_subsampling_444_lbd_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     cfl_get_luma_subsampling_444_lbd = cfl_get_luma_subsampling_444_lbd_neon;
+  }
   cfl_get_predict_lbd_fn = cfl_get_predict_lbd_fn_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     cfl_get_predict_lbd_fn = cfl_get_predict_lbd_fn_neon;
+  }
   cfl_get_subtract_average_fn = cfl_get_subtract_average_fn_c;
-  if (flags & HAS_NEON)
+  if (flags & HAS_NEON) {
     cfl_get_subtract_average_fn = cfl_get_subtract_average_fn_neon;
+  }
 }
 #endif
 
diff --git a/libaom/source/config/linux/arm-neon/config/aom_config.asm b/libaom/source/config/linux/arm-neon/config/aom_config.asm
index c5ebd6a..56f39b6 100644
--- a/libaom/source/config/linux/arm-neon/config/aom_config.asm
+++ b/libaom/source/config/linux/arm-neon/config/aom_config.asm
@@ -1,5 +1,5 @@
 ;
-; Copyright (c) 2022, Alliance for Open Media. All rights reserved
+; Copyright (c) 2023, Alliance for Open Media. All rights reserved
 ;
 ; This source code is subject to the terms of the BSD 2 Clause License and
 ; the Alliance for Open Media Patent License 1.0. If the BSD 2 Clause License
@@ -46,6 +46,7 @@ CONFIG_NN_V2 equ 0
 CONFIG_NORMAL_TILE_MODE equ 1
 CONFIG_OPTICAL_FLOW_API equ 0
 CONFIG_OS_SUPPORT equ 1
+CONFIG_OUTPUT_FRAME_SIZE equ 0
 CONFIG_PARTITION_SEARCH_ORDER equ 0
 CONFIG_PIC equ 1
 CONFIG_RATECTRL_LOG equ 0
@@ -54,6 +55,7 @@ CONFIG_RD_DEBUG equ 0
 CONFIG_REALTIME_ONLY equ 1
 CONFIG_RT_ML_PARTITIONING equ 0
 CONFIG_RUNTIME_CPU_DETECT equ 0
+CONFIG_SALIENCY_MAP equ 0
 CONFIG_SHARED equ 0
 CONFIG_SIZE_LIMIT equ 1
 CONFIG_SPATIAL_RESAMPLING equ 1
diff --git a/libaom/source/config/linux/arm-neon/config/aom_config.h b/libaom/source/config/linux/arm-neon/config/aom_config.h
index dbbde99..ad39421 100644
--- a/libaom/source/config/linux/arm-neon/config/aom_config.h
+++ b/libaom/source/config/linux/arm-neon/config/aom_config.h
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022, Alliance for Open Media. All rights reserved
+ * Copyright (c) 2023, Alliance for Open Media. All rights reserved
  *
  * This source code is subject to the terms of the BSD 2 Clause License and
  * the Alliance for Open Media Patent License 1.0. If the BSD 2 Clause License
@@ -48,6 +48,7 @@
 #define CONFIG_NORMAL_TILE_MODE 1
 #define CONFIG_OPTICAL_FLOW_API 0
 #define CONFIG_OS_SUPPORT 1
+#define CONFIG_OUTPUT_FRAME_SIZE 0
 #define CONFIG_PARTITION_SEARCH_ORDER 0
 #define CONFIG_PIC 1
 #define CONFIG_RATECTRL_LOG 0
@@ -56,6 +57,7 @@
 #define CONFIG_REALTIME_ONLY 1
 #define CONFIG_RT_ML_PARTITIONING 0
 #define CONFIG_RUNTIME_CPU_DETECT 0
+#define CONFIG_SALIENCY_MAP 0
 #define CONFIG_SHARED 0
 #define CONFIG_SIZE_LIMIT 1
 #define CONFIG_SPATIAL_RESAMPLING 1
diff --git a/libaom/source/config/linux/arm-neon/config/aom_dsp_rtcd.h b/libaom/source/config/linux/arm-neon/config/aom_dsp_rtcd.h
index 78b5bb8..5e621eb 100644
--- a/libaom/source/config/linux/arm-neon/config/aom_dsp_rtcd.h
+++ b/libaom/source/config/linux/arm-neon/config/aom_dsp_rtcd.h
@@ -1109,19 +1109,43 @@ void aom_get_blk_sse_sum_c(const int16_t* data,
 unsigned int aom_get_mb_ss_c(const int16_t*);
 #define aom_get_mb_ss aom_get_mb_ss_c
 
-void aom_get_sse_sum_8x8_quad_c(const uint8_t* src_ptr,
-                                int source_stride,
-                                const uint8_t* ref_ptr,
-                                int ref_stride,
-                                unsigned int* sse,
-                                int* sum);
-void aom_get_sse_sum_8x8_quad_neon(const uint8_t* src_ptr,
-                                   int source_stride,
-                                   const uint8_t* ref_ptr,
-                                   int ref_stride,
-                                   unsigned int* sse,
-                                   int* sum);
-#define aom_get_sse_sum_8x8_quad aom_get_sse_sum_8x8_quad_neon
+void aom_get_var_sse_sum_16x16_dual_c(const uint8_t* src_ptr,
+                                      int source_stride,
+                                      const uint8_t* ref_ptr,
+                                      int ref_stride,
+                                      uint32_t* sse16x16,
+                                      unsigned int* tot_sse,
+                                      int* tot_sum,
+                                      uint32_t* var16x16);
+void aom_get_var_sse_sum_16x16_dual_neon(const uint8_t* src_ptr,
+                                         int source_stride,
+                                         const uint8_t* ref_ptr,
+                                         int ref_stride,
+                                         uint32_t* sse16x16,
+                                         unsigned int* tot_sse,
+                                         int* tot_sum,
+                                         uint32_t* var16x16);
+#define aom_get_var_sse_sum_16x16_dual aom_get_var_sse_sum_16x16_dual_neon
+
+void aom_get_var_sse_sum_8x8_quad_c(const uint8_t* src_ptr,
+                                    int source_stride,
+                                    const uint8_t* ref_ptr,
+                                    int ref_stride,
+                                    uint32_t* sse8x8,
+                                    int* sum8x8,
+                                    unsigned int* tot_sse,
+                                    int* tot_sum,
+                                    uint32_t* var8x8);
+void aom_get_var_sse_sum_8x8_quad_neon(const uint8_t* src_ptr,
+                                       int source_stride,
+                                       const uint8_t* ref_ptr,
+                                       int ref_stride,
+                                       uint32_t* sse8x8,
+                                       int* sum8x8,
+                                       unsigned int* tot_sse,
+                                       int* tot_sum,
+                                       uint32_t* var8x8);
+#define aom_get_var_sse_sum_8x8_quad aom_get_var_sse_sum_8x8_quad_neon
 
 void aom_h_predictor_16x16_c(uint8_t* dst,
                              ptrdiff_t y_stride,
@@ -1264,12 +1288,18 @@ void aom_hadamard_16x16_neon(const int16_t* src_diff,
 void aom_hadamard_32x32_c(const int16_t* src_diff,
                           ptrdiff_t src_stride,
                           tran_low_t* coeff);
-#define aom_hadamard_32x32 aom_hadamard_32x32_c
+void aom_hadamard_32x32_neon(const int16_t* src_diff,
+                             ptrdiff_t src_stride,
+                             tran_low_t* coeff);
+#define aom_hadamard_32x32 aom_hadamard_32x32_neon
 
 void aom_hadamard_4x4_c(const int16_t* src_diff,
                         ptrdiff_t src_stride,
                         tran_low_t* coeff);
-#define aom_hadamard_4x4 aom_hadamard_4x4_c
+void aom_hadamard_4x4_neon(const int16_t* src_diff,
+                           ptrdiff_t src_stride,
+                           tran_low_t* coeff);
+#define aom_hadamard_4x4 aom_hadamard_4x4_neon
 
 void aom_hadamard_8x8_c(const int16_t* src_diff,
                         ptrdiff_t src_stride,
@@ -1718,7 +1748,15 @@ unsigned int aom_masked_sad128x128_c(const uint8_t* src,
                                      const uint8_t* msk,
                                      int msk_stride,
                                      int invert_mask);
-#define aom_masked_sad128x128 aom_masked_sad128x128_c
+unsigned int aom_masked_sad128x128_neon(const uint8_t* src,
+                                        int src_stride,
+                                        const uint8_t* ref,
+                                        int ref_stride,
+                                        const uint8_t* second_pred,
+                                        const uint8_t* msk,
+                                        int msk_stride,
+                                        int invert_mask);
+#define aom_masked_sad128x128 aom_masked_sad128x128_neon
 
 void aom_masked_sad128x128x4d_c(const uint8_t* src,
                                 int src_stride,
@@ -1739,7 +1777,15 @@ unsigned int aom_masked_sad128x64_c(const uint8_t* src,
                                     const uint8_t* msk,
                                     int msk_stride,
                                     int invert_mask);
-#define aom_masked_sad128x64 aom_masked_sad128x64_c
+unsigned int aom_masked_sad128x64_neon(const uint8_t* src,
+                                       int src_stride,
+                                       const uint8_t* ref,
+                                       int ref_stride,
+                                       const uint8_t* second_pred,
+                                       const uint8_t* msk,
+                                       int msk_stride,
+                                       int invert_mask);
+#define aom_masked_sad128x64 aom_masked_sad128x64_neon
 
 void aom_masked_sad128x64x4d_c(const uint8_t* src,
                                int src_stride,
@@ -1760,7 +1806,15 @@ unsigned int aom_masked_sad16x16_c(const uint8_t* src,
                                    const uint8_t* msk,
                                    int msk_stride,
                                    int invert_mask);
-#define aom_masked_sad16x16 aom_masked_sad16x16_c
+unsigned int aom_masked_sad16x16_neon(const uint8_t* src,
+                                      int src_stride,
+                                      const uint8_t* ref,
+                                      int ref_stride,
+                                      const uint8_t* second_pred,
+                                      const uint8_t* msk,
+                                      int msk_stride,
+                                      int invert_mask);
+#define aom_masked_sad16x16 aom_masked_sad16x16_neon
 
 void aom_masked_sad16x16x4d_c(const uint8_t* src,
                               int src_stride,
@@ -1781,7 +1835,15 @@ unsigned int aom_masked_sad16x32_c(const uint8_t* src,
                                    const uint8_t* msk,
                                    int msk_stride,
                                    int invert_mask);
-#define aom_masked_sad16x32 aom_masked_sad16x32_c
+unsigned int aom_masked_sad16x32_neon(const uint8_t* src,
+                                      int src_stride,
+                                      const uint8_t* ref,
+                                      int ref_stride,
+                                      const uint8_t* second_pred,
+                                      const uint8_t* msk,
+                                      int msk_stride,
+                                      int invert_mask);
+#define aom_masked_sad16x32 aom_masked_sad16x32_neon
 
 void aom_masked_sad16x32x4d_c(const uint8_t* src,
                               int src_stride,
@@ -1802,7 +1864,15 @@ unsigned int aom_masked_sad16x8_c(const uint8_t* src,
                                   const uint8_t* msk,
                                   int msk_stride,
                                   int invert_mask);
-#define aom_masked_sad16x8 aom_masked_sad16x8_c
+unsigned int aom_masked_sad16x8_neon(const uint8_t* src,
+                                     int src_stride,
+                                     const uint8_t* ref,
+                                     int ref_stride,
+                                     const uint8_t* second_pred,
+                                     const uint8_t* msk,
+                                     int msk_stride,
+                                     int invert_mask);
+#define aom_masked_sad16x8 aom_masked_sad16x8_neon
 
 void aom_masked_sad16x8x4d_c(const uint8_t* src,
                              int src_stride,
@@ -1823,7 +1893,15 @@ unsigned int aom_masked_sad32x16_c(const uint8_t* src,
                                    const uint8_t* msk,
                                    int msk_stride,
                                    int invert_mask);
-#define aom_masked_sad32x16 aom_masked_sad32x16_c
+unsigned int aom_masked_sad32x16_neon(const uint8_t* src,
+                                      int src_stride,
+                                      const uint8_t* ref,
+                                      int ref_stride,
+                                      const uint8_t* second_pred,
+                                      const uint8_t* msk,
+                                      int msk_stride,
+                                      int invert_mask);
+#define aom_masked_sad32x16 aom_masked_sad32x16_neon
 
 void aom_masked_sad32x16x4d_c(const uint8_t* src,
                               int src_stride,
@@ -1844,7 +1922,15 @@ unsigned int aom_masked_sad32x32_c(const uint8_t* src,
                                    const uint8_t* msk,
                                    int msk_stride,
                                    int invert_mask);
-#define aom_masked_sad32x32 aom_masked_sad32x32_c
+unsigned int aom_masked_sad32x32_neon(const uint8_t* src,
+                                      int src_stride,
+                                      const uint8_t* ref,
+                                      int ref_stride,
+                                      const uint8_t* second_pred,
+                                      const uint8_t* msk,
+                                      int msk_stride,
+                                      int invert_mask);
+#define aom_masked_sad32x32 aom_masked_sad32x32_neon
 
 void aom_masked_sad32x32x4d_c(const uint8_t* src,
                               int src_stride,
@@ -1865,7 +1951,15 @@ unsigned int aom_masked_sad32x64_c(const uint8_t* src,
                                    const uint8_t* msk,
                                    int msk_stride,
                                    int invert_mask);
-#define aom_masked_sad32x64 aom_masked_sad32x64_c
+unsigned int aom_masked_sad32x64_neon(const uint8_t* src,
+                                      int src_stride,
+                                      const uint8_t* ref,
+                                      int ref_stride,
+                                      const uint8_t* second_pred,
+                                      const uint8_t* msk,
+                                      int msk_stride,
+                                      int invert_mask);
+#define aom_masked_sad32x64 aom_masked_sad32x64_neon
 
 void aom_masked_sad32x64x4d_c(const uint8_t* src,
                               int src_stride,
@@ -1886,7 +1980,15 @@ unsigned int aom_masked_sad4x4_c(const uint8_t* src,
                                  const uint8_t* msk,
                                  int msk_stride,
                                  int invert_mask);
-#define aom_masked_sad4x4 aom_masked_sad4x4_c
+unsigned int aom_masked_sad4x4_neon(const uint8_t* src,
+                                    int src_stride,
+                                    const uint8_t* ref,
+                                    int ref_stride,
+                                    const uint8_t* second_pred,
+                                    const uint8_t* msk,
+                                    int msk_stride,
+                                    int invert_mask);
+#define aom_masked_sad4x4 aom_masked_sad4x4_neon
 
 void aom_masked_sad4x4x4d_c(const uint8_t* src,
                             int src_stride,
@@ -1907,7 +2009,15 @@ unsigned int aom_masked_sad4x8_c(const uint8_t* src,
                                  const uint8_t* msk,
                                  int msk_stride,
                                  int invert_mask);
-#define aom_masked_sad4x8 aom_masked_sad4x8_c
+unsigned int aom_masked_sad4x8_neon(const uint8_t* src,
+                                    int src_stride,
+                                    const uint8_t* ref,
+                                    int ref_stride,
+                                    const uint8_t* second_pred,
+                                    const uint8_t* msk,
+                                    int msk_stride,
+                                    int invert_mask);
+#define aom_masked_sad4x8 aom_masked_sad4x8_neon
 
 void aom_masked_sad4x8x4d_c(const uint8_t* src,
                             int src_stride,
@@ -1928,7 +2038,15 @@ unsigned int aom_masked_sad64x128_c(const uint8_t* src,
                                     const uint8_t* msk,
                                     int msk_stride,
                                     int invert_mask);
-#define aom_masked_sad64x128 aom_masked_sad64x128_c
+unsigned int aom_masked_sad64x128_neon(const uint8_t* src,
+                                       int src_stride,
+                                       const uint8_t* ref,
+                                       int ref_stride,
+                                       const uint8_t* second_pred,
+                                       const uint8_t* msk,
+                                       int msk_stride,
+                                       int invert_mask);
+#define aom_masked_sad64x128 aom_masked_sad64x128_neon
 
 void aom_masked_sad64x128x4d_c(const uint8_t* src,
                                int src_stride,
@@ -1949,7 +2067,15 @@ unsigned int aom_masked_sad64x32_c(const uint8_t* src,
                                    const uint8_t* msk,
                                    int msk_stride,
                                    int invert_mask);
-#define aom_masked_sad64x32 aom_masked_sad64x32_c
+unsigned int aom_masked_sad64x32_neon(const uint8_t* src,
+                                      int src_stride,
+                                      const uint8_t* ref,
+                                      int ref_stride,
+                                      const uint8_t* second_pred,
+                                      const uint8_t* msk,
+                                      int msk_stride,
+                                      int invert_mask);
+#define aom_masked_sad64x32 aom_masked_sad64x32_neon
 
 void aom_masked_sad64x32x4d_c(const uint8_t* src,
                               int src_stride,
@@ -1970,7 +2096,15 @@ unsigned int aom_masked_sad64x64_c(const uint8_t* src,
                                    const uint8_t* msk,
                                    int msk_stride,
                                    int invert_mask);
-#define aom_masked_sad64x64 aom_masked_sad64x64_c
+unsigned int aom_masked_sad64x64_neon(const uint8_t* src,
+                                      int src_stride,
+                                      const uint8_t* ref,
+                                      int ref_stride,
+                                      const uint8_t* second_pred,
+                                      const uint8_t* msk,
+                                      int msk_stride,
+                                      int invert_mask);
+#define aom_masked_sad64x64 aom_masked_sad64x64_neon
 
 void aom_masked_sad64x64x4d_c(const uint8_t* src,
                               int src_stride,
@@ -1991,7 +2125,15 @@ unsigned int aom_masked_sad8x16_c(const uint8_t* src,
                                   const uint8_t* msk,
                                   int msk_stride,
                                   int invert_mask);
-#define aom_masked_sad8x16 aom_masked_sad8x16_c
+unsigned int aom_masked_sad8x16_neon(const uint8_t* src,
+                                     int src_stride,
+                                     const uint8_t* ref,
+                                     int ref_stride,
+                                     const uint8_t* second_pred,
+                                     const uint8_t* msk,
+                                     int msk_stride,
+                                     int invert_mask);
+#define aom_masked_sad8x16 aom_masked_sad8x16_neon
 
 void aom_masked_sad8x16x4d_c(const uint8_t* src,
                              int src_stride,
@@ -2012,7 +2154,15 @@ unsigned int aom_masked_sad8x4_c(const uint8_t* src,
                                  const uint8_t* msk,
                                  int msk_stride,
                                  int invert_mask);
-#define aom_masked_sad8x4 aom_masked_sad8x4_c
+unsigned int aom_masked_sad8x4_neon(const uint8_t* src,
+                                    int src_stride,
+                                    const uint8_t* ref,
+                                    int ref_stride,
+                                    const uint8_t* second_pred,
+                                    const uint8_t* msk,
+                                    int msk_stride,
+                                    int invert_mask);
+#define aom_masked_sad8x4 aom_masked_sad8x4_neon
 
 void aom_masked_sad8x4x4d_c(const uint8_t* src,
                             int src_stride,
@@ -2033,7 +2183,15 @@ unsigned int aom_masked_sad8x8_c(const uint8_t* src,
                                  const uint8_t* msk,
                                  int msk_stride,
                                  int invert_mask);
-#define aom_masked_sad8x8 aom_masked_sad8x8_c
+unsigned int aom_masked_sad8x8_neon(const uint8_t* src,
+                                    int src_stride,
+                                    const uint8_t* ref,
+                                    int ref_stride,
+                                    const uint8_t* second_pred,
+                                    const uint8_t* msk,
+                                    int msk_stride,
+                                    int invert_mask);
+#define aom_masked_sad8x8 aom_masked_sad8x8_neon
 
 void aom_masked_sad8x8x4d_c(const uint8_t* src,
                             int src_stride,
@@ -2326,7 +2484,13 @@ uint64_t aom_mse_wxh_16bit_c(uint8_t* dst,
                              int sstride,
                              int w,
                              int h);
-#define aom_mse_wxh_16bit aom_mse_wxh_16bit_c
+uint64_t aom_mse_wxh_16bit_neon(uint8_t* dst,
+                                int dstride,
+                                uint16_t* src,
+                                int sstride,
+                                int w,
+                                int h);
+#define aom_mse_wxh_16bit aom_mse_wxh_16bit_neon
 
 void aom_paeth_predictor_16x16_c(uint8_t* dst,
                                  ptrdiff_t y_stride,
@@ -2619,7 +2783,19 @@ unsigned int aom_sad128x128_avg_c(const uint8_t* src_ptr,
                                   const uint8_t* ref_ptr,
                                   int ref_stride,
                                   const uint8_t* second_pred);
-#define aom_sad128x128_avg aom_sad128x128_avg_c
+unsigned int aom_sad128x128_avg_neon(const uint8_t* src_ptr,
+                                     int src_stride,
+                                     const uint8_t* ref_ptr,
+                                     int ref_stride,
+                                     const uint8_t* second_pred);
+#define aom_sad128x128_avg aom_sad128x128_avg_neon
+
+void aom_sad128x128x3d_c(const uint8_t* src_ptr,
+                         int src_stride,
+                         const uint8_t* const ref_ptr[4],
+                         int ref_stride,
+                         uint32_t sad_array[4]);
+#define aom_sad128x128x3d aom_sad128x128x3d_c
 
 void aom_sad128x128x4d_c(const uint8_t* src_ptr,
                          int src_stride,
@@ -2656,7 +2832,19 @@ unsigned int aom_sad128x64_avg_c(const uint8_t* src_ptr,
                                  const uint8_t* ref_ptr,
                                  int ref_stride,
                                  const uint8_t* second_pred);
-#define aom_sad128x64_avg aom_sad128x64_avg_c
+unsigned int aom_sad128x64_avg_neon(const uint8_t* src_ptr,
+                                    int src_stride,
+                                    const uint8_t* ref_ptr,
+                                    int ref_stride,
+                                    const uint8_t* second_pred);
+#define aom_sad128x64_avg aom_sad128x64_avg_neon
+
+void aom_sad128x64x3d_c(const uint8_t* src_ptr,
+                        int src_stride,
+                        const uint8_t* const ref_ptr[4],
+                        int ref_stride,
+                        uint32_t sad_array[4]);
+#define aom_sad128x64x3d aom_sad128x64x3d_c
 
 void aom_sad128x64x4d_c(const uint8_t* src_ptr,
                         int src_stride,
@@ -2701,7 +2889,19 @@ unsigned int aom_sad16x16_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* ref_ptr,
                                 int ref_stride,
                                 const uint8_t* second_pred);
-#define aom_sad16x16_avg aom_sad16x16_avg_c
+unsigned int aom_sad16x16_avg_neon(const uint8_t* src_ptr,
+                                   int src_stride,
+                                   const uint8_t* ref_ptr,
+                                   int ref_stride,
+                                   const uint8_t* second_pred);
+#define aom_sad16x16_avg aom_sad16x16_avg_neon
+
+void aom_sad16x16x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad16x16x3d aom_sad16x16x3d_c
 
 void aom_sad16x16x4d_c(const uint8_t* src_ptr,
                        int src_stride,
@@ -2738,7 +2938,19 @@ unsigned int aom_sad16x32_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* ref_ptr,
                                 int ref_stride,
                                 const uint8_t* second_pred);
-#define aom_sad16x32_avg aom_sad16x32_avg_c
+unsigned int aom_sad16x32_avg_neon(const uint8_t* src_ptr,
+                                   int src_stride,
+                                   const uint8_t* ref_ptr,
+                                   int ref_stride,
+                                   const uint8_t* second_pred);
+#define aom_sad16x32_avg aom_sad16x32_avg_neon
+
+void aom_sad16x32x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad16x32x3d aom_sad16x32x3d_c
 
 void aom_sad16x32x4d_c(const uint8_t* src_ptr,
                        int src_stride,
@@ -2775,7 +2987,19 @@ unsigned int aom_sad16x8_avg_c(const uint8_t* src_ptr,
                                const uint8_t* ref_ptr,
                                int ref_stride,
                                const uint8_t* second_pred);
-#define aom_sad16x8_avg aom_sad16x8_avg_c
+unsigned int aom_sad16x8_avg_neon(const uint8_t* src_ptr,
+                                  int src_stride,
+                                  const uint8_t* ref_ptr,
+                                  int ref_stride,
+                                  const uint8_t* second_pred);
+#define aom_sad16x8_avg aom_sad16x8_avg_neon
+
+void aom_sad16x8x3d_c(const uint8_t* src_ptr,
+                      int src_stride,
+                      const uint8_t* const ref_ptr[4],
+                      int ref_stride,
+                      uint32_t sad_array[4]);
+#define aom_sad16x8x3d aom_sad16x8x3d_c
 
 void aom_sad16x8x4d_c(const uint8_t* src_ptr,
                       int src_stride,
@@ -2820,7 +3044,19 @@ unsigned int aom_sad32x16_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* ref_ptr,
                                 int ref_stride,
                                 const uint8_t* second_pred);
-#define aom_sad32x16_avg aom_sad32x16_avg_c
+unsigned int aom_sad32x16_avg_neon(const uint8_t* src_ptr,
+                                   int src_stride,
+                                   const uint8_t* ref_ptr,
+                                   int ref_stride,
+                                   const uint8_t* second_pred);
+#define aom_sad32x16_avg aom_sad32x16_avg_neon
+
+void aom_sad32x16x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad32x16x3d aom_sad32x16x3d_c
 
 void aom_sad32x16x4d_c(const uint8_t* src_ptr,
                        int src_stride,
@@ -2857,7 +3093,19 @@ unsigned int aom_sad32x32_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* ref_ptr,
                                 int ref_stride,
                                 const uint8_t* second_pred);
-#define aom_sad32x32_avg aom_sad32x32_avg_c
+unsigned int aom_sad32x32_avg_neon(const uint8_t* src_ptr,
+                                   int src_stride,
+                                   const uint8_t* ref_ptr,
+                                   int ref_stride,
+                                   const uint8_t* second_pred);
+#define aom_sad32x32_avg aom_sad32x32_avg_neon
+
+void aom_sad32x32x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad32x32x3d aom_sad32x32x3d_c
 
 void aom_sad32x32x4d_c(const uint8_t* src_ptr,
                        int src_stride,
@@ -2894,7 +3142,19 @@ unsigned int aom_sad32x64_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* ref_ptr,
                                 int ref_stride,
                                 const uint8_t* second_pred);
-#define aom_sad32x64_avg aom_sad32x64_avg_c
+unsigned int aom_sad32x64_avg_neon(const uint8_t* src_ptr,
+                                   int src_stride,
+                                   const uint8_t* ref_ptr,
+                                   int ref_stride,
+                                   const uint8_t* second_pred);
+#define aom_sad32x64_avg aom_sad32x64_avg_neon
+
+void aom_sad32x64x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad32x64x3d aom_sad32x64x3d_c
 
 void aom_sad32x64x4d_c(const uint8_t* src_ptr,
                        int src_stride,
@@ -2939,7 +3199,19 @@ unsigned int aom_sad4x4_avg_c(const uint8_t* src_ptr,
                               const uint8_t* ref_ptr,
                               int ref_stride,
                               const uint8_t* second_pred);
-#define aom_sad4x4_avg aom_sad4x4_avg_c
+unsigned int aom_sad4x4_avg_neon(const uint8_t* src_ptr,
+                                 int src_stride,
+                                 const uint8_t* ref_ptr,
+                                 int ref_stride,
+                                 const uint8_t* second_pred);
+#define aom_sad4x4_avg aom_sad4x4_avg_neon
+
+void aom_sad4x4x3d_c(const uint8_t* src_ptr,
+                     int src_stride,
+                     const uint8_t* const ref_ptr[4],
+                     int ref_stride,
+                     uint32_t sad_array[4]);
+#define aom_sad4x4x3d aom_sad4x4x3d_c
 
 void aom_sad4x4x4d_c(const uint8_t* src_ptr,
                      int src_stride,
@@ -2976,7 +3248,19 @@ unsigned int aom_sad4x8_avg_c(const uint8_t* src_ptr,
                               const uint8_t* ref_ptr,
                               int ref_stride,
                               const uint8_t* second_pred);
-#define aom_sad4x8_avg aom_sad4x8_avg_c
+unsigned int aom_sad4x8_avg_neon(const uint8_t* src_ptr,
+                                 int src_stride,
+                                 const uint8_t* ref_ptr,
+                                 int ref_stride,
+                                 const uint8_t* second_pred);
+#define aom_sad4x8_avg aom_sad4x8_avg_neon
+
+void aom_sad4x8x3d_c(const uint8_t* src_ptr,
+                     int src_stride,
+                     const uint8_t* const ref_ptr[4],
+                     int ref_stride,
+                     uint32_t sad_array[4]);
+#define aom_sad4x8x3d aom_sad4x8x3d_c
 
 void aom_sad4x8x4d_c(const uint8_t* src_ptr,
                      int src_stride,
@@ -3021,7 +3305,19 @@ unsigned int aom_sad64x128_avg_c(const uint8_t* src_ptr,
                                  const uint8_t* ref_ptr,
                                  int ref_stride,
                                  const uint8_t* second_pred);
-#define aom_sad64x128_avg aom_sad64x128_avg_c
+unsigned int aom_sad64x128_avg_neon(const uint8_t* src_ptr,
+                                    int src_stride,
+                                    const uint8_t* ref_ptr,
+                                    int ref_stride,
+                                    const uint8_t* second_pred);
+#define aom_sad64x128_avg aom_sad64x128_avg_neon
+
+void aom_sad64x128x3d_c(const uint8_t* src_ptr,
+                        int src_stride,
+                        const uint8_t* const ref_ptr[4],
+                        int ref_stride,
+                        uint32_t sad_array[4]);
+#define aom_sad64x128x3d aom_sad64x128x3d_c
 
 void aom_sad64x128x4d_c(const uint8_t* src_ptr,
                         int src_stride,
@@ -3058,7 +3354,19 @@ unsigned int aom_sad64x32_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* ref_ptr,
                                 int ref_stride,
                                 const uint8_t* second_pred);
-#define aom_sad64x32_avg aom_sad64x32_avg_c
+unsigned int aom_sad64x32_avg_neon(const uint8_t* src_ptr,
+                                   int src_stride,
+                                   const uint8_t* ref_ptr,
+                                   int ref_stride,
+                                   const uint8_t* second_pred);
+#define aom_sad64x32_avg aom_sad64x32_avg_neon
+
+void aom_sad64x32x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad64x32x3d aom_sad64x32x3d_c
 
 void aom_sad64x32x4d_c(const uint8_t* src_ptr,
                        int src_stride,
@@ -3095,7 +3403,19 @@ unsigned int aom_sad64x64_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* ref_ptr,
                                 int ref_stride,
                                 const uint8_t* second_pred);
-#define aom_sad64x64_avg aom_sad64x64_avg_c
+unsigned int aom_sad64x64_avg_neon(const uint8_t* src_ptr,
+                                   int src_stride,
+                                   const uint8_t* ref_ptr,
+                                   int ref_stride,
+                                   const uint8_t* second_pred);
+#define aom_sad64x64_avg aom_sad64x64_avg_neon
+
+void aom_sad64x64x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad64x64x3d aom_sad64x64x3d_c
 
 void aom_sad64x64x4d_c(const uint8_t* src_ptr,
                        int src_stride,
@@ -3140,7 +3460,19 @@ unsigned int aom_sad8x16_avg_c(const uint8_t* src_ptr,
                                const uint8_t* ref_ptr,
                                int ref_stride,
                                const uint8_t* second_pred);
-#define aom_sad8x16_avg aom_sad8x16_avg_c
+unsigned int aom_sad8x16_avg_neon(const uint8_t* src_ptr,
+                                  int src_stride,
+                                  const uint8_t* ref_ptr,
+                                  int ref_stride,
+                                  const uint8_t* second_pred);
+#define aom_sad8x16_avg aom_sad8x16_avg_neon
+
+void aom_sad8x16x3d_c(const uint8_t* src_ptr,
+                      int src_stride,
+                      const uint8_t* const ref_ptr[4],
+                      int ref_stride,
+                      uint32_t sad_array[4]);
+#define aom_sad8x16x3d aom_sad8x16x3d_c
 
 void aom_sad8x16x4d_c(const uint8_t* src_ptr,
                       int src_stride,
@@ -3177,7 +3509,19 @@ unsigned int aom_sad8x4_avg_c(const uint8_t* src_ptr,
                               const uint8_t* ref_ptr,
                               int ref_stride,
                               const uint8_t* second_pred);
-#define aom_sad8x4_avg aom_sad8x4_avg_c
+unsigned int aom_sad8x4_avg_neon(const uint8_t* src_ptr,
+                                 int src_stride,
+                                 const uint8_t* ref_ptr,
+                                 int ref_stride,
+                                 const uint8_t* second_pred);
+#define aom_sad8x4_avg aom_sad8x4_avg_neon
+
+void aom_sad8x4x3d_c(const uint8_t* src_ptr,
+                     int src_stride,
+                     const uint8_t* const ref_ptr[4],
+                     int ref_stride,
+                     uint32_t sad_array[4]);
+#define aom_sad8x4x3d aom_sad8x4x3d_c
 
 void aom_sad8x4x4d_c(const uint8_t* src_ptr,
                      int src_stride,
@@ -3214,7 +3558,19 @@ unsigned int aom_sad8x8_avg_c(const uint8_t* src_ptr,
                               const uint8_t* ref_ptr,
                               int ref_stride,
                               const uint8_t* second_pred);
-#define aom_sad8x8_avg aom_sad8x8_avg_c
+unsigned int aom_sad8x8_avg_neon(const uint8_t* src_ptr,
+                                 int src_stride,
+                                 const uint8_t* ref_ptr,
+                                 int ref_stride,
+                                 const uint8_t* second_pred);
+#define aom_sad8x8_avg aom_sad8x8_avg_neon
+
+void aom_sad8x8x3d_c(const uint8_t* src_ptr,
+                     int src_stride,
+                     const uint8_t* const ref_ptr[4],
+                     int ref_stride,
+                     uint32_t sad_array[4]);
+#define aom_sad8x8x3d aom_sad8x8x3d_c
 
 void aom_sad8x8x4d_c(const uint8_t* src_ptr,
                      int src_stride,
@@ -4213,7 +4569,15 @@ uint32_t aom_sub_pixel_avg_variance128x128_c(const uint8_t* src_ptr,
                                              int ref_stride,
                                              uint32_t* sse,
                                              const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance128x128 aom_sub_pixel_avg_variance128x128_c
+uint32_t aom_sub_pixel_avg_variance128x128_neon(const uint8_t* src_ptr,
+                                                int source_stride,
+                                                int xoffset,
+                                                int yoffset,
+                                                const uint8_t* ref_ptr,
+                                                int ref_stride,
+                                                uint32_t* sse,
+                                                const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance128x128 aom_sub_pixel_avg_variance128x128_neon
 
 uint32_t aom_sub_pixel_avg_variance128x64_c(const uint8_t* src_ptr,
                                             int source_stride,
@@ -4223,7 +4587,15 @@ uint32_t aom_sub_pixel_avg_variance128x64_c(const uint8_t* src_ptr,
                                             int ref_stride,
                                             uint32_t* sse,
                                             const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance128x64 aom_sub_pixel_avg_variance128x64_c
+uint32_t aom_sub_pixel_avg_variance128x64_neon(const uint8_t* src_ptr,
+                                               int source_stride,
+                                               int xoffset,
+                                               int yoffset,
+                                               const uint8_t* ref_ptr,
+                                               int ref_stride,
+                                               uint32_t* sse,
+                                               const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance128x64 aom_sub_pixel_avg_variance128x64_neon
 
 uint32_t aom_sub_pixel_avg_variance16x16_c(const uint8_t* src_ptr,
                                            int source_stride,
@@ -4233,7 +4605,15 @@ uint32_t aom_sub_pixel_avg_variance16x16_c(const uint8_t* src_ptr,
                                            int ref_stride,
                                            uint32_t* sse,
                                            const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance16x16 aom_sub_pixel_avg_variance16x16_c
+uint32_t aom_sub_pixel_avg_variance16x16_neon(const uint8_t* src_ptr,
+                                              int source_stride,
+                                              int xoffset,
+                                              int yoffset,
+                                              const uint8_t* ref_ptr,
+                                              int ref_stride,
+                                              uint32_t* sse,
+                                              const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance16x16 aom_sub_pixel_avg_variance16x16_neon
 
 uint32_t aom_sub_pixel_avg_variance16x32_c(const uint8_t* src_ptr,
                                            int source_stride,
@@ -4243,7 +4623,15 @@ uint32_t aom_sub_pixel_avg_variance16x32_c(const uint8_t* src_ptr,
                                            int ref_stride,
                                            uint32_t* sse,
                                            const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance16x32 aom_sub_pixel_avg_variance16x32_c
+uint32_t aom_sub_pixel_avg_variance16x32_neon(const uint8_t* src_ptr,
+                                              int source_stride,
+                                              int xoffset,
+                                              int yoffset,
+                                              const uint8_t* ref_ptr,
+                                              int ref_stride,
+                                              uint32_t* sse,
+                                              const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance16x32 aom_sub_pixel_avg_variance16x32_neon
 
 uint32_t aom_sub_pixel_avg_variance16x8_c(const uint8_t* src_ptr,
                                           int source_stride,
@@ -4253,7 +4641,15 @@ uint32_t aom_sub_pixel_avg_variance16x8_c(const uint8_t* src_ptr,
                                           int ref_stride,
                                           uint32_t* sse,
                                           const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance16x8 aom_sub_pixel_avg_variance16x8_c
+uint32_t aom_sub_pixel_avg_variance16x8_neon(const uint8_t* src_ptr,
+                                             int source_stride,
+                                             int xoffset,
+                                             int yoffset,
+                                             const uint8_t* ref_ptr,
+                                             int ref_stride,
+                                             uint32_t* sse,
+                                             const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance16x8 aom_sub_pixel_avg_variance16x8_neon
 
 uint32_t aom_sub_pixel_avg_variance32x16_c(const uint8_t* src_ptr,
                                            int source_stride,
@@ -4263,7 +4659,15 @@ uint32_t aom_sub_pixel_avg_variance32x16_c(const uint8_t* src_ptr,
                                            int ref_stride,
                                            uint32_t* sse,
                                            const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance32x16 aom_sub_pixel_avg_variance32x16_c
+uint32_t aom_sub_pixel_avg_variance32x16_neon(const uint8_t* src_ptr,
+                                              int source_stride,
+                                              int xoffset,
+                                              int yoffset,
+                                              const uint8_t* ref_ptr,
+                                              int ref_stride,
+                                              uint32_t* sse,
+                                              const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance32x16 aom_sub_pixel_avg_variance32x16_neon
 
 uint32_t aom_sub_pixel_avg_variance32x32_c(const uint8_t* src_ptr,
                                            int source_stride,
@@ -4273,7 +4677,15 @@ uint32_t aom_sub_pixel_avg_variance32x32_c(const uint8_t* src_ptr,
                                            int ref_stride,
                                            uint32_t* sse,
                                            const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance32x32 aom_sub_pixel_avg_variance32x32_c
+uint32_t aom_sub_pixel_avg_variance32x32_neon(const uint8_t* src_ptr,
+                                              int source_stride,
+                                              int xoffset,
+                                              int yoffset,
+                                              const uint8_t* ref_ptr,
+                                              int ref_stride,
+                                              uint32_t* sse,
+                                              const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance32x32 aom_sub_pixel_avg_variance32x32_neon
 
 uint32_t aom_sub_pixel_avg_variance32x64_c(const uint8_t* src_ptr,
                                            int source_stride,
@@ -4283,7 +4695,15 @@ uint32_t aom_sub_pixel_avg_variance32x64_c(const uint8_t* src_ptr,
                                            int ref_stride,
                                            uint32_t* sse,
                                            const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance32x64 aom_sub_pixel_avg_variance32x64_c
+uint32_t aom_sub_pixel_avg_variance32x64_neon(const uint8_t* src_ptr,
+                                              int source_stride,
+                                              int xoffset,
+                                              int yoffset,
+                                              const uint8_t* ref_ptr,
+                                              int ref_stride,
+                                              uint32_t* sse,
+                                              const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance32x64 aom_sub_pixel_avg_variance32x64_neon
 
 uint32_t aom_sub_pixel_avg_variance4x4_c(const uint8_t* src_ptr,
                                          int source_stride,
@@ -4293,7 +4713,15 @@ uint32_t aom_sub_pixel_avg_variance4x4_c(const uint8_t* src_ptr,
                                          int ref_stride,
                                          uint32_t* sse,
                                          const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance4x4 aom_sub_pixel_avg_variance4x4_c
+uint32_t aom_sub_pixel_avg_variance4x4_neon(const uint8_t* src_ptr,
+                                            int source_stride,
+                                            int xoffset,
+                                            int yoffset,
+                                            const uint8_t* ref_ptr,
+                                            int ref_stride,
+                                            uint32_t* sse,
+                                            const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance4x4 aom_sub_pixel_avg_variance4x4_neon
 
 uint32_t aom_sub_pixel_avg_variance4x8_c(const uint8_t* src_ptr,
                                          int source_stride,
@@ -4303,7 +4731,15 @@ uint32_t aom_sub_pixel_avg_variance4x8_c(const uint8_t* src_ptr,
                                          int ref_stride,
                                          uint32_t* sse,
                                          const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance4x8 aom_sub_pixel_avg_variance4x8_c
+uint32_t aom_sub_pixel_avg_variance4x8_neon(const uint8_t* src_ptr,
+                                            int source_stride,
+                                            int xoffset,
+                                            int yoffset,
+                                            const uint8_t* ref_ptr,
+                                            int ref_stride,
+                                            uint32_t* sse,
+                                            const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance4x8 aom_sub_pixel_avg_variance4x8_neon
 
 uint32_t aom_sub_pixel_avg_variance64x128_c(const uint8_t* src_ptr,
                                             int source_stride,
@@ -4313,7 +4749,15 @@ uint32_t aom_sub_pixel_avg_variance64x128_c(const uint8_t* src_ptr,
                                             int ref_stride,
                                             uint32_t* sse,
                                             const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance64x128 aom_sub_pixel_avg_variance64x128_c
+uint32_t aom_sub_pixel_avg_variance64x128_neon(const uint8_t* src_ptr,
+                                               int source_stride,
+                                               int xoffset,
+                                               int yoffset,
+                                               const uint8_t* ref_ptr,
+                                               int ref_stride,
+                                               uint32_t* sse,
+                                               const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance64x128 aom_sub_pixel_avg_variance64x128_neon
 
 uint32_t aom_sub_pixel_avg_variance64x32_c(const uint8_t* src_ptr,
                                            int source_stride,
@@ -4323,7 +4767,15 @@ uint32_t aom_sub_pixel_avg_variance64x32_c(const uint8_t* src_ptr,
                                            int ref_stride,
                                            uint32_t* sse,
                                            const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance64x32 aom_sub_pixel_avg_variance64x32_c
+uint32_t aom_sub_pixel_avg_variance64x32_neon(const uint8_t* src_ptr,
+                                              int source_stride,
+                                              int xoffset,
+                                              int yoffset,
+                                              const uint8_t* ref_ptr,
+                                              int ref_stride,
+                                              uint32_t* sse,
+                                              const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance64x32 aom_sub_pixel_avg_variance64x32_neon
 
 uint32_t aom_sub_pixel_avg_variance64x64_c(const uint8_t* src_ptr,
                                            int source_stride,
@@ -4333,7 +4785,15 @@ uint32_t aom_sub_pixel_avg_variance64x64_c(const uint8_t* src_ptr,
                                            int ref_stride,
                                            uint32_t* sse,
                                            const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance64x64 aom_sub_pixel_avg_variance64x64_c
+uint32_t aom_sub_pixel_avg_variance64x64_neon(const uint8_t* src_ptr,
+                                              int source_stride,
+                                              int xoffset,
+                                              int yoffset,
+                                              const uint8_t* ref_ptr,
+                                              int ref_stride,
+                                              uint32_t* sse,
+                                              const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance64x64 aom_sub_pixel_avg_variance64x64_neon
 
 uint32_t aom_sub_pixel_avg_variance8x16_c(const uint8_t* src_ptr,
                                           int source_stride,
@@ -4343,7 +4803,15 @@ uint32_t aom_sub_pixel_avg_variance8x16_c(const uint8_t* src_ptr,
                                           int ref_stride,
                                           uint32_t* sse,
                                           const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance8x16 aom_sub_pixel_avg_variance8x16_c
+uint32_t aom_sub_pixel_avg_variance8x16_neon(const uint8_t* src_ptr,
+                                             int source_stride,
+                                             int xoffset,
+                                             int yoffset,
+                                             const uint8_t* ref_ptr,
+                                             int ref_stride,
+                                             uint32_t* sse,
+                                             const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance8x16 aom_sub_pixel_avg_variance8x16_neon
 
 uint32_t aom_sub_pixel_avg_variance8x4_c(const uint8_t* src_ptr,
                                          int source_stride,
@@ -4353,7 +4821,15 @@ uint32_t aom_sub_pixel_avg_variance8x4_c(const uint8_t* src_ptr,
                                          int ref_stride,
                                          uint32_t* sse,
                                          const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance8x4 aom_sub_pixel_avg_variance8x4_c
+uint32_t aom_sub_pixel_avg_variance8x4_neon(const uint8_t* src_ptr,
+                                            int source_stride,
+                                            int xoffset,
+                                            int yoffset,
+                                            const uint8_t* ref_ptr,
+                                            int ref_stride,
+                                            uint32_t* sse,
+                                            const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance8x4 aom_sub_pixel_avg_variance8x4_neon
 
 uint32_t aom_sub_pixel_avg_variance8x8_c(const uint8_t* src_ptr,
                                          int source_stride,
@@ -4363,7 +4839,15 @@ uint32_t aom_sub_pixel_avg_variance8x8_c(const uint8_t* src_ptr,
                                          int ref_stride,
                                          uint32_t* sse,
                                          const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance8x8 aom_sub_pixel_avg_variance8x8_c
+uint32_t aom_sub_pixel_avg_variance8x8_neon(const uint8_t* src_ptr,
+                                            int source_stride,
+                                            int xoffset,
+                                            int yoffset,
+                                            const uint8_t* ref_ptr,
+                                            int ref_stride,
+                                            uint32_t* sse,
+                                            const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance8x8 aom_sub_pixel_avg_variance8x8_neon
 
 uint32_t aom_sub_pixel_variance128x128_c(const uint8_t* src_ptr,
                                          int source_stride,
@@ -5013,8 +5497,8 @@ unsigned int aom_variance8x8_neon(const uint8_t* src_ptr,
                                   unsigned int* sse);
 #define aom_variance8x8 aom_variance8x8_neon
 
-int aom_vector_var_c(const int16_t* ref, const int16_t* src, const int bwl);
-int aom_vector_var_neon(const int16_t* ref, const int16_t* src, const int bwl);
+int aom_vector_var_c(const int16_t* ref, const int16_t* src, int bwl);
+int aom_vector_var_neon(const int16_t* ref, const int16_t* src, int bwl);
 #define aom_vector_var aom_vector_var_neon
 
 void aom_dsp_rtcd(void);
diff --git a/libaom/source/config/linux/arm-neon/config/aom_scale_rtcd.h b/libaom/source/config/linux/arm-neon/config/aom_scale_rtcd.h
index 7db7b9d..bc23102 100644
--- a/libaom/source/config/linux/arm-neon/config/aom_scale_rtcd.h
+++ b/libaom/source/config/linux/arm-neon/config/aom_scale_rtcd.h
@@ -155,6 +155,7 @@ void aom_yv12_partial_copy_y_c(const struct yv12_buffer_config* src_ybc,
 int aom_yv12_realloc_with_new_border_c(struct yv12_buffer_config* ybf,
                                        int new_border,
                                        int byte_alignment,
+                                       int num_pyramid_levels,
                                        int num_planes);
 #define aom_yv12_realloc_with_new_border aom_yv12_realloc_with_new_border_c
 
diff --git a/libaom/source/config/linux/arm-neon/config/av1_rtcd.h b/libaom/source/config/linux/arm-neon/config/av1_rtcd.h
index fd9ac83..37b5c0d 100644
--- a/libaom/source/config/linux/arm-neon/config/av1_rtcd.h
+++ b/libaom/source/config/linux/arm-neon/config/av1_rtcd.h
@@ -266,30 +266,22 @@ int64_t av1_calc_frame_error_c(const uint8_t* const ref,
                                int p_stride);
 #define av1_calc_frame_error av1_calc_frame_error_c
 
-void av1_calc_indices_dim1_c(const int* data,
-                             const int* centroids,
+void av1_calc_indices_dim1_c(const int16_t* data,
+                             const int16_t* centroids,
                              uint8_t* indices,
+                             int64_t* total_dist,
                              int n,
                              int k);
 #define av1_calc_indices_dim1 av1_calc_indices_dim1_c
 
-void av1_calc_indices_dim2_c(const int* data,
-                             const int* centroids,
+void av1_calc_indices_dim2_c(const int16_t* data,
+                             const int16_t* centroids,
                              uint8_t* indices,
+                             int64_t* total_dist,
                              int n,
                              int k);
 #define av1_calc_indices_dim2 av1_calc_indices_dim2_c
 
-double av1_compute_cross_correlation_c(unsigned char* im1,
-                                       int stride1,
-                                       int x1,
-                                       int y1,
-                                       unsigned char* im2,
-                                       int stride2,
-                                       int x2,
-                                       int y2);
-#define av1_compute_cross_correlation av1_compute_cross_correlation_c
-
 void av1_convolve_2d_scale_c(const uint8_t* src,
                              int src_stride,
                              uint8_t* dst,
@@ -765,12 +757,6 @@ void av1_get_nz_map_contexts_neon(const uint8_t* const levels,
                                   int8_t* const coeff_contexts);
 #define av1_get_nz_map_contexts av1_get_nz_map_contexts_neon
 
-void av1_highbd_fwht4x4_c(const int16_t* input, tran_low_t* output, int stride);
-void av1_highbd_fwht4x4_neon(const int16_t* input,
-                             tran_low_t* output,
-                             int stride);
-#define av1_highbd_fwht4x4 av1_highbd_fwht4x4_neon
-
 void av1_highbd_inv_txfm_add_c(const tran_low_t* input,
                                uint8_t* dest,
                                int stride,
@@ -1472,28 +1458,28 @@ void cdef_copy_rect8_16bit_to_16bit_c(uint16_t* dst,
                                       int dstride,
                                       const uint16_t* src,
                                       int sstride,
-                                      int v,
-                                      int h);
+                                      int width,
+                                      int height);
 void cdef_copy_rect8_16bit_to_16bit_neon(uint16_t* dst,
                                          int dstride,
                                          const uint16_t* src,
                                          int sstride,
-                                         int v,
-                                         int h);
+                                         int width,
+                                         int height);
 #define cdef_copy_rect8_16bit_to_16bit cdef_copy_rect8_16bit_to_16bit_neon
 
 void cdef_copy_rect8_8bit_to_16bit_c(uint16_t* dst,
                                      int dstride,
                                      const uint8_t* src,
                                      int sstride,
-                                     int v,
-                                     int h);
+                                     int width,
+                                     int height);
 void cdef_copy_rect8_8bit_to_16bit_neon(uint16_t* dst,
                                         int dstride,
                                         const uint8_t* src,
                                         int sstride,
-                                        int v,
-                                        int h);
+                                        int width,
+                                        int height);
 #define cdef_copy_rect8_8bit_to_16bit cdef_copy_rect8_8bit_to_16bit_neon
 
 void cdef_filter_16_0_c(void* dst16,
diff --git a/libaom/source/config/linux/arm/config/aom_config.asm b/libaom/source/config/linux/arm/config/aom_config.asm
index 248f8f4..08fd36d 100644
--- a/libaom/source/config/linux/arm/config/aom_config.asm
+++ b/libaom/source/config/linux/arm/config/aom_config.asm
@@ -1,5 +1,5 @@
 ;
-; Copyright (c) 2022, Alliance for Open Media. All rights reserved
+; Copyright (c) 2023, Alliance for Open Media. All rights reserved
 ;
 ; This source code is subject to the terms of the BSD 2 Clause License and
 ; the Alliance for Open Media Patent License 1.0. If the BSD 2 Clause License
@@ -46,6 +46,7 @@ CONFIG_NN_V2 equ 0
 CONFIG_NORMAL_TILE_MODE equ 1
 CONFIG_OPTICAL_FLOW_API equ 0
 CONFIG_OS_SUPPORT equ 1
+CONFIG_OUTPUT_FRAME_SIZE equ 0
 CONFIG_PARTITION_SEARCH_ORDER equ 0
 CONFIG_PIC equ 1
 CONFIG_RATECTRL_LOG equ 0
@@ -54,6 +55,7 @@ CONFIG_RD_DEBUG equ 0
 CONFIG_REALTIME_ONLY equ 1
 CONFIG_RT_ML_PARTITIONING equ 0
 CONFIG_RUNTIME_CPU_DETECT equ 0
+CONFIG_SALIENCY_MAP equ 0
 CONFIG_SHARED equ 0
 CONFIG_SIZE_LIMIT equ 1
 CONFIG_SPATIAL_RESAMPLING equ 1
diff --git a/libaom/source/config/linux/arm/config/aom_config.h b/libaom/source/config/linux/arm/config/aom_config.h
index 84ad7fe..edc8d5b 100644
--- a/libaom/source/config/linux/arm/config/aom_config.h
+++ b/libaom/source/config/linux/arm/config/aom_config.h
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022, Alliance for Open Media. All rights reserved
+ * Copyright (c) 2023, Alliance for Open Media. All rights reserved
  *
  * This source code is subject to the terms of the BSD 2 Clause License and
  * the Alliance for Open Media Patent License 1.0. If the BSD 2 Clause License
@@ -48,6 +48,7 @@
 #define CONFIG_NORMAL_TILE_MODE 1
 #define CONFIG_OPTICAL_FLOW_API 0
 #define CONFIG_OS_SUPPORT 1
+#define CONFIG_OUTPUT_FRAME_SIZE 0
 #define CONFIG_PARTITION_SEARCH_ORDER 0
 #define CONFIG_PIC 1
 #define CONFIG_RATECTRL_LOG 0
@@ -56,6 +57,7 @@
 #define CONFIG_REALTIME_ONLY 1
 #define CONFIG_RT_ML_PARTITIONING 0
 #define CONFIG_RUNTIME_CPU_DETECT 0
+#define CONFIG_SALIENCY_MAP 0
 #define CONFIG_SHARED 0
 #define CONFIG_SIZE_LIMIT 1
 #define CONFIG_SPATIAL_RESAMPLING 1
diff --git a/libaom/source/config/linux/arm/config/aom_dsp_rtcd.h b/libaom/source/config/linux/arm/config/aom_dsp_rtcd.h
index 68f8ba9..ae9ac34 100644
--- a/libaom/source/config/linux/arm/config/aom_dsp_rtcd.h
+++ b/libaom/source/config/linux/arm/config/aom_dsp_rtcd.h
@@ -995,13 +995,26 @@ void aom_get_blk_sse_sum_c(const int16_t* data,
 unsigned int aom_get_mb_ss_c(const int16_t*);
 #define aom_get_mb_ss aom_get_mb_ss_c
 
-void aom_get_sse_sum_8x8_quad_c(const uint8_t* src_ptr,
-                                int source_stride,
-                                const uint8_t* ref_ptr,
-                                int ref_stride,
-                                unsigned int* sse,
-                                int* sum);
-#define aom_get_sse_sum_8x8_quad aom_get_sse_sum_8x8_quad_c
+void aom_get_var_sse_sum_16x16_dual_c(const uint8_t* src_ptr,
+                                      int source_stride,
+                                      const uint8_t* ref_ptr,
+                                      int ref_stride,
+                                      uint32_t* sse16x16,
+                                      unsigned int* tot_sse,
+                                      int* tot_sum,
+                                      uint32_t* var16x16);
+#define aom_get_var_sse_sum_16x16_dual aom_get_var_sse_sum_16x16_dual_c
+
+void aom_get_var_sse_sum_8x8_quad_c(const uint8_t* src_ptr,
+                                    int source_stride,
+                                    const uint8_t* ref_ptr,
+                                    int ref_stride,
+                                    uint32_t* sse8x8,
+                                    int* sum8x8,
+                                    unsigned int* tot_sse,
+                                    int* tot_sum,
+                                    uint32_t* var8x8);
+#define aom_get_var_sse_sum_8x8_quad aom_get_var_sse_sum_8x8_quad_c
 
 void aom_h_predictor_16x16_c(uint8_t* dst,
                              ptrdiff_t y_stride,
@@ -2165,6 +2178,13 @@ unsigned int aom_sad128x128_avg_c(const uint8_t* src_ptr,
                                   const uint8_t* second_pred);
 #define aom_sad128x128_avg aom_sad128x128_avg_c
 
+void aom_sad128x128x3d_c(const uint8_t* src_ptr,
+                         int src_stride,
+                         const uint8_t* const ref_ptr[4],
+                         int ref_stride,
+                         uint32_t sad_array[4]);
+#define aom_sad128x128x3d aom_sad128x128x3d_c
+
 void aom_sad128x128x4d_c(const uint8_t* src_ptr,
                          int src_stride,
                          const uint8_t* const ref_ptr[4],
@@ -2193,6 +2213,13 @@ unsigned int aom_sad128x64_avg_c(const uint8_t* src_ptr,
                                  const uint8_t* second_pred);
 #define aom_sad128x64_avg aom_sad128x64_avg_c
 
+void aom_sad128x64x3d_c(const uint8_t* src_ptr,
+                        int src_stride,
+                        const uint8_t* const ref_ptr[4],
+                        int ref_stride,
+                        uint32_t sad_array[4]);
+#define aom_sad128x64x3d aom_sad128x64x3d_c
+
 void aom_sad128x64x4d_c(const uint8_t* src_ptr,
                         int src_stride,
                         const uint8_t* const ref_ptr[4],
@@ -2229,6 +2256,13 @@ unsigned int aom_sad16x16_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* second_pred);
 #define aom_sad16x16_avg aom_sad16x16_avg_c
 
+void aom_sad16x16x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad16x16x3d aom_sad16x16x3d_c
+
 void aom_sad16x16x4d_c(const uint8_t* src_ptr,
                        int src_stride,
                        const uint8_t* const ref_ptr[4],
@@ -2257,6 +2291,13 @@ unsigned int aom_sad16x32_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* second_pred);
 #define aom_sad16x32_avg aom_sad16x32_avg_c
 
+void aom_sad16x32x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad16x32x3d aom_sad16x32x3d_c
+
 void aom_sad16x32x4d_c(const uint8_t* src_ptr,
                        int src_stride,
                        const uint8_t* const ref_ptr[4],
@@ -2285,6 +2326,13 @@ unsigned int aom_sad16x8_avg_c(const uint8_t* src_ptr,
                                const uint8_t* second_pred);
 #define aom_sad16x8_avg aom_sad16x8_avg_c
 
+void aom_sad16x8x3d_c(const uint8_t* src_ptr,
+                      int src_stride,
+                      const uint8_t* const ref_ptr[4],
+                      int ref_stride,
+                      uint32_t sad_array[4]);
+#define aom_sad16x8x3d aom_sad16x8x3d_c
+
 void aom_sad16x8x4d_c(const uint8_t* src_ptr,
                       int src_stride,
                       const uint8_t* const ref_ptr[4],
@@ -2321,6 +2369,13 @@ unsigned int aom_sad32x16_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* second_pred);
 #define aom_sad32x16_avg aom_sad32x16_avg_c
 
+void aom_sad32x16x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad32x16x3d aom_sad32x16x3d_c
+
 void aom_sad32x16x4d_c(const uint8_t* src_ptr,
                        int src_stride,
                        const uint8_t* const ref_ptr[4],
@@ -2349,6 +2404,13 @@ unsigned int aom_sad32x32_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* second_pred);
 #define aom_sad32x32_avg aom_sad32x32_avg_c
 
+void aom_sad32x32x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad32x32x3d aom_sad32x32x3d_c
+
 void aom_sad32x32x4d_c(const uint8_t* src_ptr,
                        int src_stride,
                        const uint8_t* const ref_ptr[4],
@@ -2377,6 +2439,13 @@ unsigned int aom_sad32x64_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* second_pred);
 #define aom_sad32x64_avg aom_sad32x64_avg_c
 
+void aom_sad32x64x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad32x64x3d aom_sad32x64x3d_c
+
 void aom_sad32x64x4d_c(const uint8_t* src_ptr,
                        int src_stride,
                        const uint8_t* const ref_ptr[4],
@@ -2413,6 +2482,13 @@ unsigned int aom_sad4x4_avg_c(const uint8_t* src_ptr,
                               const uint8_t* second_pred);
 #define aom_sad4x4_avg aom_sad4x4_avg_c
 
+void aom_sad4x4x3d_c(const uint8_t* src_ptr,
+                     int src_stride,
+                     const uint8_t* const ref_ptr[4],
+                     int ref_stride,
+                     uint32_t sad_array[4]);
+#define aom_sad4x4x3d aom_sad4x4x3d_c
+
 void aom_sad4x4x4d_c(const uint8_t* src_ptr,
                      int src_stride,
                      const uint8_t* const ref_ptr[4],
@@ -2441,6 +2517,13 @@ unsigned int aom_sad4x8_avg_c(const uint8_t* src_ptr,
                               const uint8_t* second_pred);
 #define aom_sad4x8_avg aom_sad4x8_avg_c
 
+void aom_sad4x8x3d_c(const uint8_t* src_ptr,
+                     int src_stride,
+                     const uint8_t* const ref_ptr[4],
+                     int ref_stride,
+                     uint32_t sad_array[4]);
+#define aom_sad4x8x3d aom_sad4x8x3d_c
+
 void aom_sad4x8x4d_c(const uint8_t* src_ptr,
                      int src_stride,
                      const uint8_t* const ref_ptr[4],
@@ -2477,6 +2560,13 @@ unsigned int aom_sad64x128_avg_c(const uint8_t* src_ptr,
                                  const uint8_t* second_pred);
 #define aom_sad64x128_avg aom_sad64x128_avg_c
 
+void aom_sad64x128x3d_c(const uint8_t* src_ptr,
+                        int src_stride,
+                        const uint8_t* const ref_ptr[4],
+                        int ref_stride,
+                        uint32_t sad_array[4]);
+#define aom_sad64x128x3d aom_sad64x128x3d_c
+
 void aom_sad64x128x4d_c(const uint8_t* src_ptr,
                         int src_stride,
                         const uint8_t* const ref_ptr[4],
@@ -2505,6 +2595,13 @@ unsigned int aom_sad64x32_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* second_pred);
 #define aom_sad64x32_avg aom_sad64x32_avg_c
 
+void aom_sad64x32x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad64x32x3d aom_sad64x32x3d_c
+
 void aom_sad64x32x4d_c(const uint8_t* src_ptr,
                        int src_stride,
                        const uint8_t* const ref_ptr[4],
@@ -2533,6 +2630,13 @@ unsigned int aom_sad64x64_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* second_pred);
 #define aom_sad64x64_avg aom_sad64x64_avg_c
 
+void aom_sad64x64x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad64x64x3d aom_sad64x64x3d_c
+
 void aom_sad64x64x4d_c(const uint8_t* src_ptr,
                        int src_stride,
                        const uint8_t* const ref_ptr[4],
@@ -2569,6 +2673,13 @@ unsigned int aom_sad8x16_avg_c(const uint8_t* src_ptr,
                                const uint8_t* second_pred);
 #define aom_sad8x16_avg aom_sad8x16_avg_c
 
+void aom_sad8x16x3d_c(const uint8_t* src_ptr,
+                      int src_stride,
+                      const uint8_t* const ref_ptr[4],
+                      int ref_stride,
+                      uint32_t sad_array[4]);
+#define aom_sad8x16x3d aom_sad8x16x3d_c
+
 void aom_sad8x16x4d_c(const uint8_t* src_ptr,
                       int src_stride,
                       const uint8_t* const ref_ptr[4],
@@ -2597,6 +2708,13 @@ unsigned int aom_sad8x4_avg_c(const uint8_t* src_ptr,
                               const uint8_t* second_pred);
 #define aom_sad8x4_avg aom_sad8x4_avg_c
 
+void aom_sad8x4x3d_c(const uint8_t* src_ptr,
+                     int src_stride,
+                     const uint8_t* const ref_ptr[4],
+                     int ref_stride,
+                     uint32_t sad_array[4]);
+#define aom_sad8x4x3d aom_sad8x4x3d_c
+
 void aom_sad8x4x4d_c(const uint8_t* src_ptr,
                      int src_stride,
                      const uint8_t* const ref_ptr[4],
@@ -2625,6 +2743,13 @@ unsigned int aom_sad8x8_avg_c(const uint8_t* src_ptr,
                               const uint8_t* second_pred);
 #define aom_sad8x8_avg aom_sad8x8_avg_c
 
+void aom_sad8x8x3d_c(const uint8_t* src_ptr,
+                     int src_stride,
+                     const uint8_t* const ref_ptr[4],
+                     int ref_stride,
+                     uint32_t sad_array[4]);
+#define aom_sad8x8x3d aom_sad8x8x3d_c
+
 void aom_sad8x8x4d_c(const uint8_t* src_ptr,
                      int src_stride,
                      const uint8_t* const ref_ptr[4],
@@ -3819,7 +3944,7 @@ unsigned int aom_variance8x8_c(const uint8_t* src_ptr,
                                unsigned int* sse);
 #define aom_variance8x8 aom_variance8x8_c
 
-int aom_vector_var_c(const int16_t* ref, const int16_t* src, const int bwl);
+int aom_vector_var_c(const int16_t* ref, const int16_t* src, int bwl);
 #define aom_vector_var aom_vector_var_c
 
 void aom_dsp_rtcd(void);
diff --git a/libaom/source/config/linux/arm/config/aom_scale_rtcd.h b/libaom/source/config/linux/arm/config/aom_scale_rtcd.h
index 7db7b9d..bc23102 100644
--- a/libaom/source/config/linux/arm/config/aom_scale_rtcd.h
+++ b/libaom/source/config/linux/arm/config/aom_scale_rtcd.h
@@ -155,6 +155,7 @@ void aom_yv12_partial_copy_y_c(const struct yv12_buffer_config* src_ybc,
 int aom_yv12_realloc_with_new_border_c(struct yv12_buffer_config* ybf,
                                        int new_border,
                                        int byte_alignment,
+                                       int num_pyramid_levels,
                                        int num_planes);
 #define aom_yv12_realloc_with_new_border aom_yv12_realloc_with_new_border_c
 
diff --git a/libaom/source/config/linux/arm/config/av1_rtcd.h b/libaom/source/config/linux/arm/config/av1_rtcd.h
index dc3e04f..c5f954c 100644
--- a/libaom/source/config/linux/arm/config/av1_rtcd.h
+++ b/libaom/source/config/linux/arm/config/av1_rtcd.h
@@ -223,30 +223,22 @@ int64_t av1_calc_frame_error_c(const uint8_t* const ref,
                                int p_stride);
 #define av1_calc_frame_error av1_calc_frame_error_c
 
-void av1_calc_indices_dim1_c(const int* data,
-                             const int* centroids,
+void av1_calc_indices_dim1_c(const int16_t* data,
+                             const int16_t* centroids,
                              uint8_t* indices,
+                             int64_t* total_dist,
                              int n,
                              int k);
 #define av1_calc_indices_dim1 av1_calc_indices_dim1_c
 
-void av1_calc_indices_dim2_c(const int* data,
-                             const int* centroids,
+void av1_calc_indices_dim2_c(const int16_t* data,
+                             const int16_t* centroids,
                              uint8_t* indices,
+                             int64_t* total_dist,
                              int n,
                              int k);
 #define av1_calc_indices_dim2 av1_calc_indices_dim2_c
 
-double av1_compute_cross_correlation_c(unsigned char* im1,
-                                       int stride1,
-                                       int x1,
-                                       int y1,
-                                       unsigned char* im2,
-                                       int stride2,
-                                       int x2,
-                                       int y2);
-#define av1_compute_cross_correlation av1_compute_cross_correlation_c
-
 void av1_convolve_2d_scale_c(const uint8_t* src,
                              int src_stride,
                              uint8_t* dst,
@@ -532,9 +524,6 @@ void av1_get_nz_map_contexts_c(const uint8_t* const levels,
                                int8_t* const coeff_contexts);
 #define av1_get_nz_map_contexts av1_get_nz_map_contexts_c
 
-void av1_highbd_fwht4x4_c(const int16_t* input, tran_low_t* output, int stride);
-#define av1_highbd_fwht4x4 av1_highbd_fwht4x4_c
-
 void av1_highbd_inv_txfm_add_c(const tran_low_t* input,
                                uint8_t* dest,
                                int stride,
@@ -975,16 +964,16 @@ void cdef_copy_rect8_16bit_to_16bit_c(uint16_t* dst,
                                       int dstride,
                                       const uint16_t* src,
                                       int sstride,
-                                      int v,
-                                      int h);
+                                      int width,
+                                      int height);
 #define cdef_copy_rect8_16bit_to_16bit cdef_copy_rect8_16bit_to_16bit_c
 
 void cdef_copy_rect8_8bit_to_16bit_c(uint16_t* dst,
                                      int dstride,
                                      const uint8_t* src,
                                      int sstride,
-                                     int v,
-                                     int h);
+                                     int width,
+                                     int height);
 #define cdef_copy_rect8_8bit_to_16bit cdef_copy_rect8_8bit_to_16bit_c
 
 void cdef_filter_16_0_c(void* dst16,
diff --git a/libaom/source/config/linux/arm64/config/aom_config.asm b/libaom/source/config/linux/arm64/config/aom_config.asm
index c5ebd6a..56f39b6 100644
--- a/libaom/source/config/linux/arm64/config/aom_config.asm
+++ b/libaom/source/config/linux/arm64/config/aom_config.asm
@@ -1,5 +1,5 @@
 ;
-; Copyright (c) 2022, Alliance for Open Media. All rights reserved
+; Copyright (c) 2023, Alliance for Open Media. All rights reserved
 ;
 ; This source code is subject to the terms of the BSD 2 Clause License and
 ; the Alliance for Open Media Patent License 1.0. If the BSD 2 Clause License
@@ -46,6 +46,7 @@ CONFIG_NN_V2 equ 0
 CONFIG_NORMAL_TILE_MODE equ 1
 CONFIG_OPTICAL_FLOW_API equ 0
 CONFIG_OS_SUPPORT equ 1
+CONFIG_OUTPUT_FRAME_SIZE equ 0
 CONFIG_PARTITION_SEARCH_ORDER equ 0
 CONFIG_PIC equ 1
 CONFIG_RATECTRL_LOG equ 0
@@ -54,6 +55,7 @@ CONFIG_RD_DEBUG equ 0
 CONFIG_REALTIME_ONLY equ 1
 CONFIG_RT_ML_PARTITIONING equ 0
 CONFIG_RUNTIME_CPU_DETECT equ 0
+CONFIG_SALIENCY_MAP equ 0
 CONFIG_SHARED equ 0
 CONFIG_SIZE_LIMIT equ 1
 CONFIG_SPATIAL_RESAMPLING equ 1
diff --git a/libaom/source/config/linux/arm64/config/aom_config.h b/libaom/source/config/linux/arm64/config/aom_config.h
index dbbde99..ad39421 100644
--- a/libaom/source/config/linux/arm64/config/aom_config.h
+++ b/libaom/source/config/linux/arm64/config/aom_config.h
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022, Alliance for Open Media. All rights reserved
+ * Copyright (c) 2023, Alliance for Open Media. All rights reserved
  *
  * This source code is subject to the terms of the BSD 2 Clause License and
  * the Alliance for Open Media Patent License 1.0. If the BSD 2 Clause License
@@ -48,6 +48,7 @@
 #define CONFIG_NORMAL_TILE_MODE 1
 #define CONFIG_OPTICAL_FLOW_API 0
 #define CONFIG_OS_SUPPORT 1
+#define CONFIG_OUTPUT_FRAME_SIZE 0
 #define CONFIG_PARTITION_SEARCH_ORDER 0
 #define CONFIG_PIC 1
 #define CONFIG_RATECTRL_LOG 0
@@ -56,6 +57,7 @@
 #define CONFIG_REALTIME_ONLY 1
 #define CONFIG_RT_ML_PARTITIONING 0
 #define CONFIG_RUNTIME_CPU_DETECT 0
+#define CONFIG_SALIENCY_MAP 0
 #define CONFIG_SHARED 0
 #define CONFIG_SIZE_LIMIT 1
 #define CONFIG_SPATIAL_RESAMPLING 1
diff --git a/libaom/source/config/linux/arm64/config/aom_dsp_rtcd.h b/libaom/source/config/linux/arm64/config/aom_dsp_rtcd.h
index 78b5bb8..5e621eb 100644
--- a/libaom/source/config/linux/arm64/config/aom_dsp_rtcd.h
+++ b/libaom/source/config/linux/arm64/config/aom_dsp_rtcd.h
@@ -1109,19 +1109,43 @@ void aom_get_blk_sse_sum_c(const int16_t* data,
 unsigned int aom_get_mb_ss_c(const int16_t*);
 #define aom_get_mb_ss aom_get_mb_ss_c
 
-void aom_get_sse_sum_8x8_quad_c(const uint8_t* src_ptr,
-                                int source_stride,
-                                const uint8_t* ref_ptr,
-                                int ref_stride,
-                                unsigned int* sse,
-                                int* sum);
-void aom_get_sse_sum_8x8_quad_neon(const uint8_t* src_ptr,
-                                   int source_stride,
-                                   const uint8_t* ref_ptr,
-                                   int ref_stride,
-                                   unsigned int* sse,
-                                   int* sum);
-#define aom_get_sse_sum_8x8_quad aom_get_sse_sum_8x8_quad_neon
+void aom_get_var_sse_sum_16x16_dual_c(const uint8_t* src_ptr,
+                                      int source_stride,
+                                      const uint8_t* ref_ptr,
+                                      int ref_stride,
+                                      uint32_t* sse16x16,
+                                      unsigned int* tot_sse,
+                                      int* tot_sum,
+                                      uint32_t* var16x16);
+void aom_get_var_sse_sum_16x16_dual_neon(const uint8_t* src_ptr,
+                                         int source_stride,
+                                         const uint8_t* ref_ptr,
+                                         int ref_stride,
+                                         uint32_t* sse16x16,
+                                         unsigned int* tot_sse,
+                                         int* tot_sum,
+                                         uint32_t* var16x16);
+#define aom_get_var_sse_sum_16x16_dual aom_get_var_sse_sum_16x16_dual_neon
+
+void aom_get_var_sse_sum_8x8_quad_c(const uint8_t* src_ptr,
+                                    int source_stride,
+                                    const uint8_t* ref_ptr,
+                                    int ref_stride,
+                                    uint32_t* sse8x8,
+                                    int* sum8x8,
+                                    unsigned int* tot_sse,
+                                    int* tot_sum,
+                                    uint32_t* var8x8);
+void aom_get_var_sse_sum_8x8_quad_neon(const uint8_t* src_ptr,
+                                       int source_stride,
+                                       const uint8_t* ref_ptr,
+                                       int ref_stride,
+                                       uint32_t* sse8x8,
+                                       int* sum8x8,
+                                       unsigned int* tot_sse,
+                                       int* tot_sum,
+                                       uint32_t* var8x8);
+#define aom_get_var_sse_sum_8x8_quad aom_get_var_sse_sum_8x8_quad_neon
 
 void aom_h_predictor_16x16_c(uint8_t* dst,
                              ptrdiff_t y_stride,
@@ -1264,12 +1288,18 @@ void aom_hadamard_16x16_neon(const int16_t* src_diff,
 void aom_hadamard_32x32_c(const int16_t* src_diff,
                           ptrdiff_t src_stride,
                           tran_low_t* coeff);
-#define aom_hadamard_32x32 aom_hadamard_32x32_c
+void aom_hadamard_32x32_neon(const int16_t* src_diff,
+                             ptrdiff_t src_stride,
+                             tran_low_t* coeff);
+#define aom_hadamard_32x32 aom_hadamard_32x32_neon
 
 void aom_hadamard_4x4_c(const int16_t* src_diff,
                         ptrdiff_t src_stride,
                         tran_low_t* coeff);
-#define aom_hadamard_4x4 aom_hadamard_4x4_c
+void aom_hadamard_4x4_neon(const int16_t* src_diff,
+                           ptrdiff_t src_stride,
+                           tran_low_t* coeff);
+#define aom_hadamard_4x4 aom_hadamard_4x4_neon
 
 void aom_hadamard_8x8_c(const int16_t* src_diff,
                         ptrdiff_t src_stride,
@@ -1718,7 +1748,15 @@ unsigned int aom_masked_sad128x128_c(const uint8_t* src,
                                      const uint8_t* msk,
                                      int msk_stride,
                                      int invert_mask);
-#define aom_masked_sad128x128 aom_masked_sad128x128_c
+unsigned int aom_masked_sad128x128_neon(const uint8_t* src,
+                                        int src_stride,
+                                        const uint8_t* ref,
+                                        int ref_stride,
+                                        const uint8_t* second_pred,
+                                        const uint8_t* msk,
+                                        int msk_stride,
+                                        int invert_mask);
+#define aom_masked_sad128x128 aom_masked_sad128x128_neon
 
 void aom_masked_sad128x128x4d_c(const uint8_t* src,
                                 int src_stride,
@@ -1739,7 +1777,15 @@ unsigned int aom_masked_sad128x64_c(const uint8_t* src,
                                     const uint8_t* msk,
                                     int msk_stride,
                                     int invert_mask);
-#define aom_masked_sad128x64 aom_masked_sad128x64_c
+unsigned int aom_masked_sad128x64_neon(const uint8_t* src,
+                                       int src_stride,
+                                       const uint8_t* ref,
+                                       int ref_stride,
+                                       const uint8_t* second_pred,
+                                       const uint8_t* msk,
+                                       int msk_stride,
+                                       int invert_mask);
+#define aom_masked_sad128x64 aom_masked_sad128x64_neon
 
 void aom_masked_sad128x64x4d_c(const uint8_t* src,
                                int src_stride,
@@ -1760,7 +1806,15 @@ unsigned int aom_masked_sad16x16_c(const uint8_t* src,
                                    const uint8_t* msk,
                                    int msk_stride,
                                    int invert_mask);
-#define aom_masked_sad16x16 aom_masked_sad16x16_c
+unsigned int aom_masked_sad16x16_neon(const uint8_t* src,
+                                      int src_stride,
+                                      const uint8_t* ref,
+                                      int ref_stride,
+                                      const uint8_t* second_pred,
+                                      const uint8_t* msk,
+                                      int msk_stride,
+                                      int invert_mask);
+#define aom_masked_sad16x16 aom_masked_sad16x16_neon
 
 void aom_masked_sad16x16x4d_c(const uint8_t* src,
                               int src_stride,
@@ -1781,7 +1835,15 @@ unsigned int aom_masked_sad16x32_c(const uint8_t* src,
                                    const uint8_t* msk,
                                    int msk_stride,
                                    int invert_mask);
-#define aom_masked_sad16x32 aom_masked_sad16x32_c
+unsigned int aom_masked_sad16x32_neon(const uint8_t* src,
+                                      int src_stride,
+                                      const uint8_t* ref,
+                                      int ref_stride,
+                                      const uint8_t* second_pred,
+                                      const uint8_t* msk,
+                                      int msk_stride,
+                                      int invert_mask);
+#define aom_masked_sad16x32 aom_masked_sad16x32_neon
 
 void aom_masked_sad16x32x4d_c(const uint8_t* src,
                               int src_stride,
@@ -1802,7 +1864,15 @@ unsigned int aom_masked_sad16x8_c(const uint8_t* src,
                                   const uint8_t* msk,
                                   int msk_stride,
                                   int invert_mask);
-#define aom_masked_sad16x8 aom_masked_sad16x8_c
+unsigned int aom_masked_sad16x8_neon(const uint8_t* src,
+                                     int src_stride,
+                                     const uint8_t* ref,
+                                     int ref_stride,
+                                     const uint8_t* second_pred,
+                                     const uint8_t* msk,
+                                     int msk_stride,
+                                     int invert_mask);
+#define aom_masked_sad16x8 aom_masked_sad16x8_neon
 
 void aom_masked_sad16x8x4d_c(const uint8_t* src,
                              int src_stride,
@@ -1823,7 +1893,15 @@ unsigned int aom_masked_sad32x16_c(const uint8_t* src,
                                    const uint8_t* msk,
                                    int msk_stride,
                                    int invert_mask);
-#define aom_masked_sad32x16 aom_masked_sad32x16_c
+unsigned int aom_masked_sad32x16_neon(const uint8_t* src,
+                                      int src_stride,
+                                      const uint8_t* ref,
+                                      int ref_stride,
+                                      const uint8_t* second_pred,
+                                      const uint8_t* msk,
+                                      int msk_stride,
+                                      int invert_mask);
+#define aom_masked_sad32x16 aom_masked_sad32x16_neon
 
 void aom_masked_sad32x16x4d_c(const uint8_t* src,
                               int src_stride,
@@ -1844,7 +1922,15 @@ unsigned int aom_masked_sad32x32_c(const uint8_t* src,
                                    const uint8_t* msk,
                                    int msk_stride,
                                    int invert_mask);
-#define aom_masked_sad32x32 aom_masked_sad32x32_c
+unsigned int aom_masked_sad32x32_neon(const uint8_t* src,
+                                      int src_stride,
+                                      const uint8_t* ref,
+                                      int ref_stride,
+                                      const uint8_t* second_pred,
+                                      const uint8_t* msk,
+                                      int msk_stride,
+                                      int invert_mask);
+#define aom_masked_sad32x32 aom_masked_sad32x32_neon
 
 void aom_masked_sad32x32x4d_c(const uint8_t* src,
                               int src_stride,
@@ -1865,7 +1951,15 @@ unsigned int aom_masked_sad32x64_c(const uint8_t* src,
                                    const uint8_t* msk,
                                    int msk_stride,
                                    int invert_mask);
-#define aom_masked_sad32x64 aom_masked_sad32x64_c
+unsigned int aom_masked_sad32x64_neon(const uint8_t* src,
+                                      int src_stride,
+                                      const uint8_t* ref,
+                                      int ref_stride,
+                                      const uint8_t* second_pred,
+                                      const uint8_t* msk,
+                                      int msk_stride,
+                                      int invert_mask);
+#define aom_masked_sad32x64 aom_masked_sad32x64_neon
 
 void aom_masked_sad32x64x4d_c(const uint8_t* src,
                               int src_stride,
@@ -1886,7 +1980,15 @@ unsigned int aom_masked_sad4x4_c(const uint8_t* src,
                                  const uint8_t* msk,
                                  int msk_stride,
                                  int invert_mask);
-#define aom_masked_sad4x4 aom_masked_sad4x4_c
+unsigned int aom_masked_sad4x4_neon(const uint8_t* src,
+                                    int src_stride,
+                                    const uint8_t* ref,
+                                    int ref_stride,
+                                    const uint8_t* second_pred,
+                                    const uint8_t* msk,
+                                    int msk_stride,
+                                    int invert_mask);
+#define aom_masked_sad4x4 aom_masked_sad4x4_neon
 
 void aom_masked_sad4x4x4d_c(const uint8_t* src,
                             int src_stride,
@@ -1907,7 +2009,15 @@ unsigned int aom_masked_sad4x8_c(const uint8_t* src,
                                  const uint8_t* msk,
                                  int msk_stride,
                                  int invert_mask);
-#define aom_masked_sad4x8 aom_masked_sad4x8_c
+unsigned int aom_masked_sad4x8_neon(const uint8_t* src,
+                                    int src_stride,
+                                    const uint8_t* ref,
+                                    int ref_stride,
+                                    const uint8_t* second_pred,
+                                    const uint8_t* msk,
+                                    int msk_stride,
+                                    int invert_mask);
+#define aom_masked_sad4x8 aom_masked_sad4x8_neon
 
 void aom_masked_sad4x8x4d_c(const uint8_t* src,
                             int src_stride,
@@ -1928,7 +2038,15 @@ unsigned int aom_masked_sad64x128_c(const uint8_t* src,
                                     const uint8_t* msk,
                                     int msk_stride,
                                     int invert_mask);
-#define aom_masked_sad64x128 aom_masked_sad64x128_c
+unsigned int aom_masked_sad64x128_neon(const uint8_t* src,
+                                       int src_stride,
+                                       const uint8_t* ref,
+                                       int ref_stride,
+                                       const uint8_t* second_pred,
+                                       const uint8_t* msk,
+                                       int msk_stride,
+                                       int invert_mask);
+#define aom_masked_sad64x128 aom_masked_sad64x128_neon
 
 void aom_masked_sad64x128x4d_c(const uint8_t* src,
                                int src_stride,
@@ -1949,7 +2067,15 @@ unsigned int aom_masked_sad64x32_c(const uint8_t* src,
                                    const uint8_t* msk,
                                    int msk_stride,
                                    int invert_mask);
-#define aom_masked_sad64x32 aom_masked_sad64x32_c
+unsigned int aom_masked_sad64x32_neon(const uint8_t* src,
+                                      int src_stride,
+                                      const uint8_t* ref,
+                                      int ref_stride,
+                                      const uint8_t* second_pred,
+                                      const uint8_t* msk,
+                                      int msk_stride,
+                                      int invert_mask);
+#define aom_masked_sad64x32 aom_masked_sad64x32_neon
 
 void aom_masked_sad64x32x4d_c(const uint8_t* src,
                               int src_stride,
@@ -1970,7 +2096,15 @@ unsigned int aom_masked_sad64x64_c(const uint8_t* src,
                                    const uint8_t* msk,
                                    int msk_stride,
                                    int invert_mask);
-#define aom_masked_sad64x64 aom_masked_sad64x64_c
+unsigned int aom_masked_sad64x64_neon(const uint8_t* src,
+                                      int src_stride,
+                                      const uint8_t* ref,
+                                      int ref_stride,
+                                      const uint8_t* second_pred,
+                                      const uint8_t* msk,
+                                      int msk_stride,
+                                      int invert_mask);
+#define aom_masked_sad64x64 aom_masked_sad64x64_neon
 
 void aom_masked_sad64x64x4d_c(const uint8_t* src,
                               int src_stride,
@@ -1991,7 +2125,15 @@ unsigned int aom_masked_sad8x16_c(const uint8_t* src,
                                   const uint8_t* msk,
                                   int msk_stride,
                                   int invert_mask);
-#define aom_masked_sad8x16 aom_masked_sad8x16_c
+unsigned int aom_masked_sad8x16_neon(const uint8_t* src,
+                                     int src_stride,
+                                     const uint8_t* ref,
+                                     int ref_stride,
+                                     const uint8_t* second_pred,
+                                     const uint8_t* msk,
+                                     int msk_stride,
+                                     int invert_mask);
+#define aom_masked_sad8x16 aom_masked_sad8x16_neon
 
 void aom_masked_sad8x16x4d_c(const uint8_t* src,
                              int src_stride,
@@ -2012,7 +2154,15 @@ unsigned int aom_masked_sad8x4_c(const uint8_t* src,
                                  const uint8_t* msk,
                                  int msk_stride,
                                  int invert_mask);
-#define aom_masked_sad8x4 aom_masked_sad8x4_c
+unsigned int aom_masked_sad8x4_neon(const uint8_t* src,
+                                    int src_stride,
+                                    const uint8_t* ref,
+                                    int ref_stride,
+                                    const uint8_t* second_pred,
+                                    const uint8_t* msk,
+                                    int msk_stride,
+                                    int invert_mask);
+#define aom_masked_sad8x4 aom_masked_sad8x4_neon
 
 void aom_masked_sad8x4x4d_c(const uint8_t* src,
                             int src_stride,
@@ -2033,7 +2183,15 @@ unsigned int aom_masked_sad8x8_c(const uint8_t* src,
                                  const uint8_t* msk,
                                  int msk_stride,
                                  int invert_mask);
-#define aom_masked_sad8x8 aom_masked_sad8x8_c
+unsigned int aom_masked_sad8x8_neon(const uint8_t* src,
+                                    int src_stride,
+                                    const uint8_t* ref,
+                                    int ref_stride,
+                                    const uint8_t* second_pred,
+                                    const uint8_t* msk,
+                                    int msk_stride,
+                                    int invert_mask);
+#define aom_masked_sad8x8 aom_masked_sad8x8_neon
 
 void aom_masked_sad8x8x4d_c(const uint8_t* src,
                             int src_stride,
@@ -2326,7 +2484,13 @@ uint64_t aom_mse_wxh_16bit_c(uint8_t* dst,
                              int sstride,
                              int w,
                              int h);
-#define aom_mse_wxh_16bit aom_mse_wxh_16bit_c
+uint64_t aom_mse_wxh_16bit_neon(uint8_t* dst,
+                                int dstride,
+                                uint16_t* src,
+                                int sstride,
+                                int w,
+                                int h);
+#define aom_mse_wxh_16bit aom_mse_wxh_16bit_neon
 
 void aom_paeth_predictor_16x16_c(uint8_t* dst,
                                  ptrdiff_t y_stride,
@@ -2619,7 +2783,19 @@ unsigned int aom_sad128x128_avg_c(const uint8_t* src_ptr,
                                   const uint8_t* ref_ptr,
                                   int ref_stride,
                                   const uint8_t* second_pred);
-#define aom_sad128x128_avg aom_sad128x128_avg_c
+unsigned int aom_sad128x128_avg_neon(const uint8_t* src_ptr,
+                                     int src_stride,
+                                     const uint8_t* ref_ptr,
+                                     int ref_stride,
+                                     const uint8_t* second_pred);
+#define aom_sad128x128_avg aom_sad128x128_avg_neon
+
+void aom_sad128x128x3d_c(const uint8_t* src_ptr,
+                         int src_stride,
+                         const uint8_t* const ref_ptr[4],
+                         int ref_stride,
+                         uint32_t sad_array[4]);
+#define aom_sad128x128x3d aom_sad128x128x3d_c
 
 void aom_sad128x128x4d_c(const uint8_t* src_ptr,
                          int src_stride,
@@ -2656,7 +2832,19 @@ unsigned int aom_sad128x64_avg_c(const uint8_t* src_ptr,
                                  const uint8_t* ref_ptr,
                                  int ref_stride,
                                  const uint8_t* second_pred);
-#define aom_sad128x64_avg aom_sad128x64_avg_c
+unsigned int aom_sad128x64_avg_neon(const uint8_t* src_ptr,
+                                    int src_stride,
+                                    const uint8_t* ref_ptr,
+                                    int ref_stride,
+                                    const uint8_t* second_pred);
+#define aom_sad128x64_avg aom_sad128x64_avg_neon
+
+void aom_sad128x64x3d_c(const uint8_t* src_ptr,
+                        int src_stride,
+                        const uint8_t* const ref_ptr[4],
+                        int ref_stride,
+                        uint32_t sad_array[4]);
+#define aom_sad128x64x3d aom_sad128x64x3d_c
 
 void aom_sad128x64x4d_c(const uint8_t* src_ptr,
                         int src_stride,
@@ -2701,7 +2889,19 @@ unsigned int aom_sad16x16_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* ref_ptr,
                                 int ref_stride,
                                 const uint8_t* second_pred);
-#define aom_sad16x16_avg aom_sad16x16_avg_c
+unsigned int aom_sad16x16_avg_neon(const uint8_t* src_ptr,
+                                   int src_stride,
+                                   const uint8_t* ref_ptr,
+                                   int ref_stride,
+                                   const uint8_t* second_pred);
+#define aom_sad16x16_avg aom_sad16x16_avg_neon
+
+void aom_sad16x16x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad16x16x3d aom_sad16x16x3d_c
 
 void aom_sad16x16x4d_c(const uint8_t* src_ptr,
                        int src_stride,
@@ -2738,7 +2938,19 @@ unsigned int aom_sad16x32_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* ref_ptr,
                                 int ref_stride,
                                 const uint8_t* second_pred);
-#define aom_sad16x32_avg aom_sad16x32_avg_c
+unsigned int aom_sad16x32_avg_neon(const uint8_t* src_ptr,
+                                   int src_stride,
+                                   const uint8_t* ref_ptr,
+                                   int ref_stride,
+                                   const uint8_t* second_pred);
+#define aom_sad16x32_avg aom_sad16x32_avg_neon
+
+void aom_sad16x32x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad16x32x3d aom_sad16x32x3d_c
 
 void aom_sad16x32x4d_c(const uint8_t* src_ptr,
                        int src_stride,
@@ -2775,7 +2987,19 @@ unsigned int aom_sad16x8_avg_c(const uint8_t* src_ptr,
                                const uint8_t* ref_ptr,
                                int ref_stride,
                                const uint8_t* second_pred);
-#define aom_sad16x8_avg aom_sad16x8_avg_c
+unsigned int aom_sad16x8_avg_neon(const uint8_t* src_ptr,
+                                  int src_stride,
+                                  const uint8_t* ref_ptr,
+                                  int ref_stride,
+                                  const uint8_t* second_pred);
+#define aom_sad16x8_avg aom_sad16x8_avg_neon
+
+void aom_sad16x8x3d_c(const uint8_t* src_ptr,
+                      int src_stride,
+                      const uint8_t* const ref_ptr[4],
+                      int ref_stride,
+                      uint32_t sad_array[4]);
+#define aom_sad16x8x3d aom_sad16x8x3d_c
 
 void aom_sad16x8x4d_c(const uint8_t* src_ptr,
                       int src_stride,
@@ -2820,7 +3044,19 @@ unsigned int aom_sad32x16_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* ref_ptr,
                                 int ref_stride,
                                 const uint8_t* second_pred);
-#define aom_sad32x16_avg aom_sad32x16_avg_c
+unsigned int aom_sad32x16_avg_neon(const uint8_t* src_ptr,
+                                   int src_stride,
+                                   const uint8_t* ref_ptr,
+                                   int ref_stride,
+                                   const uint8_t* second_pred);
+#define aom_sad32x16_avg aom_sad32x16_avg_neon
+
+void aom_sad32x16x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad32x16x3d aom_sad32x16x3d_c
 
 void aom_sad32x16x4d_c(const uint8_t* src_ptr,
                        int src_stride,
@@ -2857,7 +3093,19 @@ unsigned int aom_sad32x32_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* ref_ptr,
                                 int ref_stride,
                                 const uint8_t* second_pred);
-#define aom_sad32x32_avg aom_sad32x32_avg_c
+unsigned int aom_sad32x32_avg_neon(const uint8_t* src_ptr,
+                                   int src_stride,
+                                   const uint8_t* ref_ptr,
+                                   int ref_stride,
+                                   const uint8_t* second_pred);
+#define aom_sad32x32_avg aom_sad32x32_avg_neon
+
+void aom_sad32x32x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad32x32x3d aom_sad32x32x3d_c
 
 void aom_sad32x32x4d_c(const uint8_t* src_ptr,
                        int src_stride,
@@ -2894,7 +3142,19 @@ unsigned int aom_sad32x64_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* ref_ptr,
                                 int ref_stride,
                                 const uint8_t* second_pred);
-#define aom_sad32x64_avg aom_sad32x64_avg_c
+unsigned int aom_sad32x64_avg_neon(const uint8_t* src_ptr,
+                                   int src_stride,
+                                   const uint8_t* ref_ptr,
+                                   int ref_stride,
+                                   const uint8_t* second_pred);
+#define aom_sad32x64_avg aom_sad32x64_avg_neon
+
+void aom_sad32x64x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad32x64x3d aom_sad32x64x3d_c
 
 void aom_sad32x64x4d_c(const uint8_t* src_ptr,
                        int src_stride,
@@ -2939,7 +3199,19 @@ unsigned int aom_sad4x4_avg_c(const uint8_t* src_ptr,
                               const uint8_t* ref_ptr,
                               int ref_stride,
                               const uint8_t* second_pred);
-#define aom_sad4x4_avg aom_sad4x4_avg_c
+unsigned int aom_sad4x4_avg_neon(const uint8_t* src_ptr,
+                                 int src_stride,
+                                 const uint8_t* ref_ptr,
+                                 int ref_stride,
+                                 const uint8_t* second_pred);
+#define aom_sad4x4_avg aom_sad4x4_avg_neon
+
+void aom_sad4x4x3d_c(const uint8_t* src_ptr,
+                     int src_stride,
+                     const uint8_t* const ref_ptr[4],
+                     int ref_stride,
+                     uint32_t sad_array[4]);
+#define aom_sad4x4x3d aom_sad4x4x3d_c
 
 void aom_sad4x4x4d_c(const uint8_t* src_ptr,
                      int src_stride,
@@ -2976,7 +3248,19 @@ unsigned int aom_sad4x8_avg_c(const uint8_t* src_ptr,
                               const uint8_t* ref_ptr,
                               int ref_stride,
                               const uint8_t* second_pred);
-#define aom_sad4x8_avg aom_sad4x8_avg_c
+unsigned int aom_sad4x8_avg_neon(const uint8_t* src_ptr,
+                                 int src_stride,
+                                 const uint8_t* ref_ptr,
+                                 int ref_stride,
+                                 const uint8_t* second_pred);
+#define aom_sad4x8_avg aom_sad4x8_avg_neon
+
+void aom_sad4x8x3d_c(const uint8_t* src_ptr,
+                     int src_stride,
+                     const uint8_t* const ref_ptr[4],
+                     int ref_stride,
+                     uint32_t sad_array[4]);
+#define aom_sad4x8x3d aom_sad4x8x3d_c
 
 void aom_sad4x8x4d_c(const uint8_t* src_ptr,
                      int src_stride,
@@ -3021,7 +3305,19 @@ unsigned int aom_sad64x128_avg_c(const uint8_t* src_ptr,
                                  const uint8_t* ref_ptr,
                                  int ref_stride,
                                  const uint8_t* second_pred);
-#define aom_sad64x128_avg aom_sad64x128_avg_c
+unsigned int aom_sad64x128_avg_neon(const uint8_t* src_ptr,
+                                    int src_stride,
+                                    const uint8_t* ref_ptr,
+                                    int ref_stride,
+                                    const uint8_t* second_pred);
+#define aom_sad64x128_avg aom_sad64x128_avg_neon
+
+void aom_sad64x128x3d_c(const uint8_t* src_ptr,
+                        int src_stride,
+                        const uint8_t* const ref_ptr[4],
+                        int ref_stride,
+                        uint32_t sad_array[4]);
+#define aom_sad64x128x3d aom_sad64x128x3d_c
 
 void aom_sad64x128x4d_c(const uint8_t* src_ptr,
                         int src_stride,
@@ -3058,7 +3354,19 @@ unsigned int aom_sad64x32_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* ref_ptr,
                                 int ref_stride,
                                 const uint8_t* second_pred);
-#define aom_sad64x32_avg aom_sad64x32_avg_c
+unsigned int aom_sad64x32_avg_neon(const uint8_t* src_ptr,
+                                   int src_stride,
+                                   const uint8_t* ref_ptr,
+                                   int ref_stride,
+                                   const uint8_t* second_pred);
+#define aom_sad64x32_avg aom_sad64x32_avg_neon
+
+void aom_sad64x32x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad64x32x3d aom_sad64x32x3d_c
 
 void aom_sad64x32x4d_c(const uint8_t* src_ptr,
                        int src_stride,
@@ -3095,7 +3403,19 @@ unsigned int aom_sad64x64_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* ref_ptr,
                                 int ref_stride,
                                 const uint8_t* second_pred);
-#define aom_sad64x64_avg aom_sad64x64_avg_c
+unsigned int aom_sad64x64_avg_neon(const uint8_t* src_ptr,
+                                   int src_stride,
+                                   const uint8_t* ref_ptr,
+                                   int ref_stride,
+                                   const uint8_t* second_pred);
+#define aom_sad64x64_avg aom_sad64x64_avg_neon
+
+void aom_sad64x64x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad64x64x3d aom_sad64x64x3d_c
 
 void aom_sad64x64x4d_c(const uint8_t* src_ptr,
                        int src_stride,
@@ -3140,7 +3460,19 @@ unsigned int aom_sad8x16_avg_c(const uint8_t* src_ptr,
                                const uint8_t* ref_ptr,
                                int ref_stride,
                                const uint8_t* second_pred);
-#define aom_sad8x16_avg aom_sad8x16_avg_c
+unsigned int aom_sad8x16_avg_neon(const uint8_t* src_ptr,
+                                  int src_stride,
+                                  const uint8_t* ref_ptr,
+                                  int ref_stride,
+                                  const uint8_t* second_pred);
+#define aom_sad8x16_avg aom_sad8x16_avg_neon
+
+void aom_sad8x16x3d_c(const uint8_t* src_ptr,
+                      int src_stride,
+                      const uint8_t* const ref_ptr[4],
+                      int ref_stride,
+                      uint32_t sad_array[4]);
+#define aom_sad8x16x3d aom_sad8x16x3d_c
 
 void aom_sad8x16x4d_c(const uint8_t* src_ptr,
                       int src_stride,
@@ -3177,7 +3509,19 @@ unsigned int aom_sad8x4_avg_c(const uint8_t* src_ptr,
                               const uint8_t* ref_ptr,
                               int ref_stride,
                               const uint8_t* second_pred);
-#define aom_sad8x4_avg aom_sad8x4_avg_c
+unsigned int aom_sad8x4_avg_neon(const uint8_t* src_ptr,
+                                 int src_stride,
+                                 const uint8_t* ref_ptr,
+                                 int ref_stride,
+                                 const uint8_t* second_pred);
+#define aom_sad8x4_avg aom_sad8x4_avg_neon
+
+void aom_sad8x4x3d_c(const uint8_t* src_ptr,
+                     int src_stride,
+                     const uint8_t* const ref_ptr[4],
+                     int ref_stride,
+                     uint32_t sad_array[4]);
+#define aom_sad8x4x3d aom_sad8x4x3d_c
 
 void aom_sad8x4x4d_c(const uint8_t* src_ptr,
                      int src_stride,
@@ -3214,7 +3558,19 @@ unsigned int aom_sad8x8_avg_c(const uint8_t* src_ptr,
                               const uint8_t* ref_ptr,
                               int ref_stride,
                               const uint8_t* second_pred);
-#define aom_sad8x8_avg aom_sad8x8_avg_c
+unsigned int aom_sad8x8_avg_neon(const uint8_t* src_ptr,
+                                 int src_stride,
+                                 const uint8_t* ref_ptr,
+                                 int ref_stride,
+                                 const uint8_t* second_pred);
+#define aom_sad8x8_avg aom_sad8x8_avg_neon
+
+void aom_sad8x8x3d_c(const uint8_t* src_ptr,
+                     int src_stride,
+                     const uint8_t* const ref_ptr[4],
+                     int ref_stride,
+                     uint32_t sad_array[4]);
+#define aom_sad8x8x3d aom_sad8x8x3d_c
 
 void aom_sad8x8x4d_c(const uint8_t* src_ptr,
                      int src_stride,
@@ -4213,7 +4569,15 @@ uint32_t aom_sub_pixel_avg_variance128x128_c(const uint8_t* src_ptr,
                                              int ref_stride,
                                              uint32_t* sse,
                                              const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance128x128 aom_sub_pixel_avg_variance128x128_c
+uint32_t aom_sub_pixel_avg_variance128x128_neon(const uint8_t* src_ptr,
+                                                int source_stride,
+                                                int xoffset,
+                                                int yoffset,
+                                                const uint8_t* ref_ptr,
+                                                int ref_stride,
+                                                uint32_t* sse,
+                                                const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance128x128 aom_sub_pixel_avg_variance128x128_neon
 
 uint32_t aom_sub_pixel_avg_variance128x64_c(const uint8_t* src_ptr,
                                             int source_stride,
@@ -4223,7 +4587,15 @@ uint32_t aom_sub_pixel_avg_variance128x64_c(const uint8_t* src_ptr,
                                             int ref_stride,
                                             uint32_t* sse,
                                             const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance128x64 aom_sub_pixel_avg_variance128x64_c
+uint32_t aom_sub_pixel_avg_variance128x64_neon(const uint8_t* src_ptr,
+                                               int source_stride,
+                                               int xoffset,
+                                               int yoffset,
+                                               const uint8_t* ref_ptr,
+                                               int ref_stride,
+                                               uint32_t* sse,
+                                               const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance128x64 aom_sub_pixel_avg_variance128x64_neon
 
 uint32_t aom_sub_pixel_avg_variance16x16_c(const uint8_t* src_ptr,
                                            int source_stride,
@@ -4233,7 +4605,15 @@ uint32_t aom_sub_pixel_avg_variance16x16_c(const uint8_t* src_ptr,
                                            int ref_stride,
                                            uint32_t* sse,
                                            const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance16x16 aom_sub_pixel_avg_variance16x16_c
+uint32_t aom_sub_pixel_avg_variance16x16_neon(const uint8_t* src_ptr,
+                                              int source_stride,
+                                              int xoffset,
+                                              int yoffset,
+                                              const uint8_t* ref_ptr,
+                                              int ref_stride,
+                                              uint32_t* sse,
+                                              const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance16x16 aom_sub_pixel_avg_variance16x16_neon
 
 uint32_t aom_sub_pixel_avg_variance16x32_c(const uint8_t* src_ptr,
                                            int source_stride,
@@ -4243,7 +4623,15 @@ uint32_t aom_sub_pixel_avg_variance16x32_c(const uint8_t* src_ptr,
                                            int ref_stride,
                                            uint32_t* sse,
                                            const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance16x32 aom_sub_pixel_avg_variance16x32_c
+uint32_t aom_sub_pixel_avg_variance16x32_neon(const uint8_t* src_ptr,
+                                              int source_stride,
+                                              int xoffset,
+                                              int yoffset,
+                                              const uint8_t* ref_ptr,
+                                              int ref_stride,
+                                              uint32_t* sse,
+                                              const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance16x32 aom_sub_pixel_avg_variance16x32_neon
 
 uint32_t aom_sub_pixel_avg_variance16x8_c(const uint8_t* src_ptr,
                                           int source_stride,
@@ -4253,7 +4641,15 @@ uint32_t aom_sub_pixel_avg_variance16x8_c(const uint8_t* src_ptr,
                                           int ref_stride,
                                           uint32_t* sse,
                                           const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance16x8 aom_sub_pixel_avg_variance16x8_c
+uint32_t aom_sub_pixel_avg_variance16x8_neon(const uint8_t* src_ptr,
+                                             int source_stride,
+                                             int xoffset,
+                                             int yoffset,
+                                             const uint8_t* ref_ptr,
+                                             int ref_stride,
+                                             uint32_t* sse,
+                                             const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance16x8 aom_sub_pixel_avg_variance16x8_neon
 
 uint32_t aom_sub_pixel_avg_variance32x16_c(const uint8_t* src_ptr,
                                            int source_stride,
@@ -4263,7 +4659,15 @@ uint32_t aom_sub_pixel_avg_variance32x16_c(const uint8_t* src_ptr,
                                            int ref_stride,
                                            uint32_t* sse,
                                            const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance32x16 aom_sub_pixel_avg_variance32x16_c
+uint32_t aom_sub_pixel_avg_variance32x16_neon(const uint8_t* src_ptr,
+                                              int source_stride,
+                                              int xoffset,
+                                              int yoffset,
+                                              const uint8_t* ref_ptr,
+                                              int ref_stride,
+                                              uint32_t* sse,
+                                              const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance32x16 aom_sub_pixel_avg_variance32x16_neon
 
 uint32_t aom_sub_pixel_avg_variance32x32_c(const uint8_t* src_ptr,
                                            int source_stride,
@@ -4273,7 +4677,15 @@ uint32_t aom_sub_pixel_avg_variance32x32_c(const uint8_t* src_ptr,
                                            int ref_stride,
                                            uint32_t* sse,
                                            const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance32x32 aom_sub_pixel_avg_variance32x32_c
+uint32_t aom_sub_pixel_avg_variance32x32_neon(const uint8_t* src_ptr,
+                                              int source_stride,
+                                              int xoffset,
+                                              int yoffset,
+                                              const uint8_t* ref_ptr,
+                                              int ref_stride,
+                                              uint32_t* sse,
+                                              const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance32x32 aom_sub_pixel_avg_variance32x32_neon
 
 uint32_t aom_sub_pixel_avg_variance32x64_c(const uint8_t* src_ptr,
                                            int source_stride,
@@ -4283,7 +4695,15 @@ uint32_t aom_sub_pixel_avg_variance32x64_c(const uint8_t* src_ptr,
                                            int ref_stride,
                                            uint32_t* sse,
                                            const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance32x64 aom_sub_pixel_avg_variance32x64_c
+uint32_t aom_sub_pixel_avg_variance32x64_neon(const uint8_t* src_ptr,
+                                              int source_stride,
+                                              int xoffset,
+                                              int yoffset,
+                                              const uint8_t* ref_ptr,
+                                              int ref_stride,
+                                              uint32_t* sse,
+                                              const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance32x64 aom_sub_pixel_avg_variance32x64_neon
 
 uint32_t aom_sub_pixel_avg_variance4x4_c(const uint8_t* src_ptr,
                                          int source_stride,
@@ -4293,7 +4713,15 @@ uint32_t aom_sub_pixel_avg_variance4x4_c(const uint8_t* src_ptr,
                                          int ref_stride,
                                          uint32_t* sse,
                                          const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance4x4 aom_sub_pixel_avg_variance4x4_c
+uint32_t aom_sub_pixel_avg_variance4x4_neon(const uint8_t* src_ptr,
+                                            int source_stride,
+                                            int xoffset,
+                                            int yoffset,
+                                            const uint8_t* ref_ptr,
+                                            int ref_stride,
+                                            uint32_t* sse,
+                                            const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance4x4 aom_sub_pixel_avg_variance4x4_neon
 
 uint32_t aom_sub_pixel_avg_variance4x8_c(const uint8_t* src_ptr,
                                          int source_stride,
@@ -4303,7 +4731,15 @@ uint32_t aom_sub_pixel_avg_variance4x8_c(const uint8_t* src_ptr,
                                          int ref_stride,
                                          uint32_t* sse,
                                          const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance4x8 aom_sub_pixel_avg_variance4x8_c
+uint32_t aom_sub_pixel_avg_variance4x8_neon(const uint8_t* src_ptr,
+                                            int source_stride,
+                                            int xoffset,
+                                            int yoffset,
+                                            const uint8_t* ref_ptr,
+                                            int ref_stride,
+                                            uint32_t* sse,
+                                            const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance4x8 aom_sub_pixel_avg_variance4x8_neon
 
 uint32_t aom_sub_pixel_avg_variance64x128_c(const uint8_t* src_ptr,
                                             int source_stride,
@@ -4313,7 +4749,15 @@ uint32_t aom_sub_pixel_avg_variance64x128_c(const uint8_t* src_ptr,
                                             int ref_stride,
                                             uint32_t* sse,
                                             const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance64x128 aom_sub_pixel_avg_variance64x128_c
+uint32_t aom_sub_pixel_avg_variance64x128_neon(const uint8_t* src_ptr,
+                                               int source_stride,
+                                               int xoffset,
+                                               int yoffset,
+                                               const uint8_t* ref_ptr,
+                                               int ref_stride,
+                                               uint32_t* sse,
+                                               const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance64x128 aom_sub_pixel_avg_variance64x128_neon
 
 uint32_t aom_sub_pixel_avg_variance64x32_c(const uint8_t* src_ptr,
                                            int source_stride,
@@ -4323,7 +4767,15 @@ uint32_t aom_sub_pixel_avg_variance64x32_c(const uint8_t* src_ptr,
                                            int ref_stride,
                                            uint32_t* sse,
                                            const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance64x32 aom_sub_pixel_avg_variance64x32_c
+uint32_t aom_sub_pixel_avg_variance64x32_neon(const uint8_t* src_ptr,
+                                              int source_stride,
+                                              int xoffset,
+                                              int yoffset,
+                                              const uint8_t* ref_ptr,
+                                              int ref_stride,
+                                              uint32_t* sse,
+                                              const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance64x32 aom_sub_pixel_avg_variance64x32_neon
 
 uint32_t aom_sub_pixel_avg_variance64x64_c(const uint8_t* src_ptr,
                                            int source_stride,
@@ -4333,7 +4785,15 @@ uint32_t aom_sub_pixel_avg_variance64x64_c(const uint8_t* src_ptr,
                                            int ref_stride,
                                            uint32_t* sse,
                                            const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance64x64 aom_sub_pixel_avg_variance64x64_c
+uint32_t aom_sub_pixel_avg_variance64x64_neon(const uint8_t* src_ptr,
+                                              int source_stride,
+                                              int xoffset,
+                                              int yoffset,
+                                              const uint8_t* ref_ptr,
+                                              int ref_stride,
+                                              uint32_t* sse,
+                                              const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance64x64 aom_sub_pixel_avg_variance64x64_neon
 
 uint32_t aom_sub_pixel_avg_variance8x16_c(const uint8_t* src_ptr,
                                           int source_stride,
@@ -4343,7 +4803,15 @@ uint32_t aom_sub_pixel_avg_variance8x16_c(const uint8_t* src_ptr,
                                           int ref_stride,
                                           uint32_t* sse,
                                           const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance8x16 aom_sub_pixel_avg_variance8x16_c
+uint32_t aom_sub_pixel_avg_variance8x16_neon(const uint8_t* src_ptr,
+                                             int source_stride,
+                                             int xoffset,
+                                             int yoffset,
+                                             const uint8_t* ref_ptr,
+                                             int ref_stride,
+                                             uint32_t* sse,
+                                             const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance8x16 aom_sub_pixel_avg_variance8x16_neon
 
 uint32_t aom_sub_pixel_avg_variance8x4_c(const uint8_t* src_ptr,
                                          int source_stride,
@@ -4353,7 +4821,15 @@ uint32_t aom_sub_pixel_avg_variance8x4_c(const uint8_t* src_ptr,
                                          int ref_stride,
                                          uint32_t* sse,
                                          const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance8x4 aom_sub_pixel_avg_variance8x4_c
+uint32_t aom_sub_pixel_avg_variance8x4_neon(const uint8_t* src_ptr,
+                                            int source_stride,
+                                            int xoffset,
+                                            int yoffset,
+                                            const uint8_t* ref_ptr,
+                                            int ref_stride,
+                                            uint32_t* sse,
+                                            const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance8x4 aom_sub_pixel_avg_variance8x4_neon
 
 uint32_t aom_sub_pixel_avg_variance8x8_c(const uint8_t* src_ptr,
                                          int source_stride,
@@ -4363,7 +4839,15 @@ uint32_t aom_sub_pixel_avg_variance8x8_c(const uint8_t* src_ptr,
                                          int ref_stride,
                                          uint32_t* sse,
                                          const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance8x8 aom_sub_pixel_avg_variance8x8_c
+uint32_t aom_sub_pixel_avg_variance8x8_neon(const uint8_t* src_ptr,
+                                            int source_stride,
+                                            int xoffset,
+                                            int yoffset,
+                                            const uint8_t* ref_ptr,
+                                            int ref_stride,
+                                            uint32_t* sse,
+                                            const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance8x8 aom_sub_pixel_avg_variance8x8_neon
 
 uint32_t aom_sub_pixel_variance128x128_c(const uint8_t* src_ptr,
                                          int source_stride,
@@ -5013,8 +5497,8 @@ unsigned int aom_variance8x8_neon(const uint8_t* src_ptr,
                                   unsigned int* sse);
 #define aom_variance8x8 aom_variance8x8_neon
 
-int aom_vector_var_c(const int16_t* ref, const int16_t* src, const int bwl);
-int aom_vector_var_neon(const int16_t* ref, const int16_t* src, const int bwl);
+int aom_vector_var_c(const int16_t* ref, const int16_t* src, int bwl);
+int aom_vector_var_neon(const int16_t* ref, const int16_t* src, int bwl);
 #define aom_vector_var aom_vector_var_neon
 
 void aom_dsp_rtcd(void);
diff --git a/libaom/source/config/linux/arm64/config/aom_scale_rtcd.h b/libaom/source/config/linux/arm64/config/aom_scale_rtcd.h
index 7db7b9d..bc23102 100644
--- a/libaom/source/config/linux/arm64/config/aom_scale_rtcd.h
+++ b/libaom/source/config/linux/arm64/config/aom_scale_rtcd.h
@@ -155,6 +155,7 @@ void aom_yv12_partial_copy_y_c(const struct yv12_buffer_config* src_ybc,
 int aom_yv12_realloc_with_new_border_c(struct yv12_buffer_config* ybf,
                                        int new_border,
                                        int byte_alignment,
+                                       int num_pyramid_levels,
                                        int num_planes);
 #define aom_yv12_realloc_with_new_border aom_yv12_realloc_with_new_border_c
 
diff --git a/libaom/source/config/linux/arm64/config/av1_rtcd.h b/libaom/source/config/linux/arm64/config/av1_rtcd.h
index fd9ac83..37b5c0d 100644
--- a/libaom/source/config/linux/arm64/config/av1_rtcd.h
+++ b/libaom/source/config/linux/arm64/config/av1_rtcd.h
@@ -266,30 +266,22 @@ int64_t av1_calc_frame_error_c(const uint8_t* const ref,
                                int p_stride);
 #define av1_calc_frame_error av1_calc_frame_error_c
 
-void av1_calc_indices_dim1_c(const int* data,
-                             const int* centroids,
+void av1_calc_indices_dim1_c(const int16_t* data,
+                             const int16_t* centroids,
                              uint8_t* indices,
+                             int64_t* total_dist,
                              int n,
                              int k);
 #define av1_calc_indices_dim1 av1_calc_indices_dim1_c
 
-void av1_calc_indices_dim2_c(const int* data,
-                             const int* centroids,
+void av1_calc_indices_dim2_c(const int16_t* data,
+                             const int16_t* centroids,
                              uint8_t* indices,
+                             int64_t* total_dist,
                              int n,
                              int k);
 #define av1_calc_indices_dim2 av1_calc_indices_dim2_c
 
-double av1_compute_cross_correlation_c(unsigned char* im1,
-                                       int stride1,
-                                       int x1,
-                                       int y1,
-                                       unsigned char* im2,
-                                       int stride2,
-                                       int x2,
-                                       int y2);
-#define av1_compute_cross_correlation av1_compute_cross_correlation_c
-
 void av1_convolve_2d_scale_c(const uint8_t* src,
                              int src_stride,
                              uint8_t* dst,
@@ -765,12 +757,6 @@ void av1_get_nz_map_contexts_neon(const uint8_t* const levels,
                                   int8_t* const coeff_contexts);
 #define av1_get_nz_map_contexts av1_get_nz_map_contexts_neon
 
-void av1_highbd_fwht4x4_c(const int16_t* input, tran_low_t* output, int stride);
-void av1_highbd_fwht4x4_neon(const int16_t* input,
-                             tran_low_t* output,
-                             int stride);
-#define av1_highbd_fwht4x4 av1_highbd_fwht4x4_neon
-
 void av1_highbd_inv_txfm_add_c(const tran_low_t* input,
                                uint8_t* dest,
                                int stride,
@@ -1472,28 +1458,28 @@ void cdef_copy_rect8_16bit_to_16bit_c(uint16_t* dst,
                                       int dstride,
                                       const uint16_t* src,
                                       int sstride,
-                                      int v,
-                                      int h);
+                                      int width,
+                                      int height);
 void cdef_copy_rect8_16bit_to_16bit_neon(uint16_t* dst,
                                          int dstride,
                                          const uint16_t* src,
                                          int sstride,
-                                         int v,
-                                         int h);
+                                         int width,
+                                         int height);
 #define cdef_copy_rect8_16bit_to_16bit cdef_copy_rect8_16bit_to_16bit_neon
 
 void cdef_copy_rect8_8bit_to_16bit_c(uint16_t* dst,
                                      int dstride,
                                      const uint8_t* src,
                                      int sstride,
-                                     int v,
-                                     int h);
+                                     int width,
+                                     int height);
 void cdef_copy_rect8_8bit_to_16bit_neon(uint16_t* dst,
                                         int dstride,
                                         const uint8_t* src,
                                         int sstride,
-                                        int v,
-                                        int h);
+                                        int width,
+                                        int height);
 #define cdef_copy_rect8_8bit_to_16bit cdef_copy_rect8_8bit_to_16bit_neon
 
 void cdef_filter_16_0_c(void* dst16,
diff --git a/libaom/source/config/linux/generic/config/aom_config.asm b/libaom/source/config/linux/generic/config/aom_config.asm
index 72d2a4e..c21e16c 100644
--- a/libaom/source/config/linux/generic/config/aom_config.asm
+++ b/libaom/source/config/linux/generic/config/aom_config.asm
@@ -1,5 +1,5 @@
 ;
-; Copyright (c) 2022, Alliance for Open Media. All rights reserved
+; Copyright (c) 2023, Alliance for Open Media. All rights reserved
 ;
 ; This source code is subject to the terms of the BSD 2 Clause License and
 ; the Alliance for Open Media Patent License 1.0. If the BSD 2 Clause License
@@ -46,6 +46,7 @@ CONFIG_NN_V2 equ 0
 CONFIG_NORMAL_TILE_MODE equ 1
 CONFIG_OPTICAL_FLOW_API equ 0
 CONFIG_OS_SUPPORT equ 1
+CONFIG_OUTPUT_FRAME_SIZE equ 0
 CONFIG_PARTITION_SEARCH_ORDER equ 0
 CONFIG_PIC equ 1
 CONFIG_RATECTRL_LOG equ 0
@@ -54,6 +55,7 @@ CONFIG_RD_DEBUG equ 0
 CONFIG_REALTIME_ONLY equ 1
 CONFIG_RT_ML_PARTITIONING equ 0
 CONFIG_RUNTIME_CPU_DETECT equ 1
+CONFIG_SALIENCY_MAP equ 0
 CONFIG_SHARED equ 0
 CONFIG_SIZE_LIMIT equ 1
 CONFIG_SPATIAL_RESAMPLING equ 1
diff --git a/libaom/source/config/linux/generic/config/aom_config.h b/libaom/source/config/linux/generic/config/aom_config.h
index c14a67e..e63e6df 100644
--- a/libaom/source/config/linux/generic/config/aom_config.h
+++ b/libaom/source/config/linux/generic/config/aom_config.h
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022, Alliance for Open Media. All rights reserved
+ * Copyright (c) 2023, Alliance for Open Media. All rights reserved
  *
  * This source code is subject to the terms of the BSD 2 Clause License and
  * the Alliance for Open Media Patent License 1.0. If the BSD 2 Clause License
@@ -48,6 +48,7 @@
 #define CONFIG_NORMAL_TILE_MODE 1
 #define CONFIG_OPTICAL_FLOW_API 0
 #define CONFIG_OS_SUPPORT 1
+#define CONFIG_OUTPUT_FRAME_SIZE 0
 #define CONFIG_PARTITION_SEARCH_ORDER 0
 #define CONFIG_PIC 1
 #define CONFIG_RATECTRL_LOG 0
@@ -56,6 +57,7 @@
 #define CONFIG_REALTIME_ONLY 1
 #define CONFIG_RT_ML_PARTITIONING 0
 #define CONFIG_RUNTIME_CPU_DETECT 1
+#define CONFIG_SALIENCY_MAP 0
 #define CONFIG_SHARED 0
 #define CONFIG_SIZE_LIMIT 1
 #define CONFIG_SPATIAL_RESAMPLING 1
diff --git a/libaom/source/config/linux/generic/config/aom_dsp_rtcd.h b/libaom/source/config/linux/generic/config/aom_dsp_rtcd.h
index 21ee554..7a81d10 100644
--- a/libaom/source/config/linux/generic/config/aom_dsp_rtcd.h
+++ b/libaom/source/config/linux/generic/config/aom_dsp_rtcd.h
@@ -995,13 +995,26 @@ void aom_get_blk_sse_sum_c(const int16_t* data,
 unsigned int aom_get_mb_ss_c(const int16_t*);
 #define aom_get_mb_ss aom_get_mb_ss_c
 
-void aom_get_sse_sum_8x8_quad_c(const uint8_t* src_ptr,
-                                int source_stride,
-                                const uint8_t* ref_ptr,
-                                int ref_stride,
-                                unsigned int* sse,
-                                int* sum);
-#define aom_get_sse_sum_8x8_quad aom_get_sse_sum_8x8_quad_c
+void aom_get_var_sse_sum_16x16_dual_c(const uint8_t* src_ptr,
+                                      int source_stride,
+                                      const uint8_t* ref_ptr,
+                                      int ref_stride,
+                                      uint32_t* sse16x16,
+                                      unsigned int* tot_sse,
+                                      int* tot_sum,
+                                      uint32_t* var16x16);
+#define aom_get_var_sse_sum_16x16_dual aom_get_var_sse_sum_16x16_dual_c
+
+void aom_get_var_sse_sum_8x8_quad_c(const uint8_t* src_ptr,
+                                    int source_stride,
+                                    const uint8_t* ref_ptr,
+                                    int ref_stride,
+                                    uint32_t* sse8x8,
+                                    int* sum8x8,
+                                    unsigned int* tot_sse,
+                                    int* tot_sum,
+                                    uint32_t* var8x8);
+#define aom_get_var_sse_sum_8x8_quad aom_get_var_sse_sum_8x8_quad_c
 
 void aom_h_predictor_16x16_c(uint8_t* dst,
                              ptrdiff_t y_stride,
@@ -2165,6 +2178,13 @@ unsigned int aom_sad128x128_avg_c(const uint8_t* src_ptr,
                                   const uint8_t* second_pred);
 #define aom_sad128x128_avg aom_sad128x128_avg_c
 
+void aom_sad128x128x3d_c(const uint8_t* src_ptr,
+                         int src_stride,
+                         const uint8_t* const ref_ptr[4],
+                         int ref_stride,
+                         uint32_t sad_array[4]);
+#define aom_sad128x128x3d aom_sad128x128x3d_c
+
 void aom_sad128x128x4d_c(const uint8_t* src_ptr,
                          int src_stride,
                          const uint8_t* const ref_ptr[4],
@@ -2193,6 +2213,13 @@ unsigned int aom_sad128x64_avg_c(const uint8_t* src_ptr,
                                  const uint8_t* second_pred);
 #define aom_sad128x64_avg aom_sad128x64_avg_c
 
+void aom_sad128x64x3d_c(const uint8_t* src_ptr,
+                        int src_stride,
+                        const uint8_t* const ref_ptr[4],
+                        int ref_stride,
+                        uint32_t sad_array[4]);
+#define aom_sad128x64x3d aom_sad128x64x3d_c
+
 void aom_sad128x64x4d_c(const uint8_t* src_ptr,
                         int src_stride,
                         const uint8_t* const ref_ptr[4],
@@ -2229,6 +2256,13 @@ unsigned int aom_sad16x16_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* second_pred);
 #define aom_sad16x16_avg aom_sad16x16_avg_c
 
+void aom_sad16x16x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad16x16x3d aom_sad16x16x3d_c
+
 void aom_sad16x16x4d_c(const uint8_t* src_ptr,
                        int src_stride,
                        const uint8_t* const ref_ptr[4],
@@ -2257,6 +2291,13 @@ unsigned int aom_sad16x32_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* second_pred);
 #define aom_sad16x32_avg aom_sad16x32_avg_c
 
+void aom_sad16x32x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad16x32x3d aom_sad16x32x3d_c
+
 void aom_sad16x32x4d_c(const uint8_t* src_ptr,
                        int src_stride,
                        const uint8_t* const ref_ptr[4],
@@ -2285,6 +2326,13 @@ unsigned int aom_sad16x8_avg_c(const uint8_t* src_ptr,
                                const uint8_t* second_pred);
 #define aom_sad16x8_avg aom_sad16x8_avg_c
 
+void aom_sad16x8x3d_c(const uint8_t* src_ptr,
+                      int src_stride,
+                      const uint8_t* const ref_ptr[4],
+                      int ref_stride,
+                      uint32_t sad_array[4]);
+#define aom_sad16x8x3d aom_sad16x8x3d_c
+
 void aom_sad16x8x4d_c(const uint8_t* src_ptr,
                       int src_stride,
                       const uint8_t* const ref_ptr[4],
@@ -2321,6 +2369,13 @@ unsigned int aom_sad32x16_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* second_pred);
 #define aom_sad32x16_avg aom_sad32x16_avg_c
 
+void aom_sad32x16x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad32x16x3d aom_sad32x16x3d_c
+
 void aom_sad32x16x4d_c(const uint8_t* src_ptr,
                        int src_stride,
                        const uint8_t* const ref_ptr[4],
@@ -2349,6 +2404,13 @@ unsigned int aom_sad32x32_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* second_pred);
 #define aom_sad32x32_avg aom_sad32x32_avg_c
 
+void aom_sad32x32x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad32x32x3d aom_sad32x32x3d_c
+
 void aom_sad32x32x4d_c(const uint8_t* src_ptr,
                        int src_stride,
                        const uint8_t* const ref_ptr[4],
@@ -2377,6 +2439,13 @@ unsigned int aom_sad32x64_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* second_pred);
 #define aom_sad32x64_avg aom_sad32x64_avg_c
 
+void aom_sad32x64x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad32x64x3d aom_sad32x64x3d_c
+
 void aom_sad32x64x4d_c(const uint8_t* src_ptr,
                        int src_stride,
                        const uint8_t* const ref_ptr[4],
@@ -2413,6 +2482,13 @@ unsigned int aom_sad4x4_avg_c(const uint8_t* src_ptr,
                               const uint8_t* second_pred);
 #define aom_sad4x4_avg aom_sad4x4_avg_c
 
+void aom_sad4x4x3d_c(const uint8_t* src_ptr,
+                     int src_stride,
+                     const uint8_t* const ref_ptr[4],
+                     int ref_stride,
+                     uint32_t sad_array[4]);
+#define aom_sad4x4x3d aom_sad4x4x3d_c
+
 void aom_sad4x4x4d_c(const uint8_t* src_ptr,
                      int src_stride,
                      const uint8_t* const ref_ptr[4],
@@ -2441,6 +2517,13 @@ unsigned int aom_sad4x8_avg_c(const uint8_t* src_ptr,
                               const uint8_t* second_pred);
 #define aom_sad4x8_avg aom_sad4x8_avg_c
 
+void aom_sad4x8x3d_c(const uint8_t* src_ptr,
+                     int src_stride,
+                     const uint8_t* const ref_ptr[4],
+                     int ref_stride,
+                     uint32_t sad_array[4]);
+#define aom_sad4x8x3d aom_sad4x8x3d_c
+
 void aom_sad4x8x4d_c(const uint8_t* src_ptr,
                      int src_stride,
                      const uint8_t* const ref_ptr[4],
@@ -2477,6 +2560,13 @@ unsigned int aom_sad64x128_avg_c(const uint8_t* src_ptr,
                                  const uint8_t* second_pred);
 #define aom_sad64x128_avg aom_sad64x128_avg_c
 
+void aom_sad64x128x3d_c(const uint8_t* src_ptr,
+                        int src_stride,
+                        const uint8_t* const ref_ptr[4],
+                        int ref_stride,
+                        uint32_t sad_array[4]);
+#define aom_sad64x128x3d aom_sad64x128x3d_c
+
 void aom_sad64x128x4d_c(const uint8_t* src_ptr,
                         int src_stride,
                         const uint8_t* const ref_ptr[4],
@@ -2505,6 +2595,13 @@ unsigned int aom_sad64x32_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* second_pred);
 #define aom_sad64x32_avg aom_sad64x32_avg_c
 
+void aom_sad64x32x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad64x32x3d aom_sad64x32x3d_c
+
 void aom_sad64x32x4d_c(const uint8_t* src_ptr,
                        int src_stride,
                        const uint8_t* const ref_ptr[4],
@@ -2533,6 +2630,13 @@ unsigned int aom_sad64x64_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* second_pred);
 #define aom_sad64x64_avg aom_sad64x64_avg_c
 
+void aom_sad64x64x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad64x64x3d aom_sad64x64x3d_c
+
 void aom_sad64x64x4d_c(const uint8_t* src_ptr,
                        int src_stride,
                        const uint8_t* const ref_ptr[4],
@@ -2569,6 +2673,13 @@ unsigned int aom_sad8x16_avg_c(const uint8_t* src_ptr,
                                const uint8_t* second_pred);
 #define aom_sad8x16_avg aom_sad8x16_avg_c
 
+void aom_sad8x16x3d_c(const uint8_t* src_ptr,
+                      int src_stride,
+                      const uint8_t* const ref_ptr[4],
+                      int ref_stride,
+                      uint32_t sad_array[4]);
+#define aom_sad8x16x3d aom_sad8x16x3d_c
+
 void aom_sad8x16x4d_c(const uint8_t* src_ptr,
                       int src_stride,
                       const uint8_t* const ref_ptr[4],
@@ -2597,6 +2708,13 @@ unsigned int aom_sad8x4_avg_c(const uint8_t* src_ptr,
                               const uint8_t* second_pred);
 #define aom_sad8x4_avg aom_sad8x4_avg_c
 
+void aom_sad8x4x3d_c(const uint8_t* src_ptr,
+                     int src_stride,
+                     const uint8_t* const ref_ptr[4],
+                     int ref_stride,
+                     uint32_t sad_array[4]);
+#define aom_sad8x4x3d aom_sad8x4x3d_c
+
 void aom_sad8x4x4d_c(const uint8_t* src_ptr,
                      int src_stride,
                      const uint8_t* const ref_ptr[4],
@@ -2625,6 +2743,13 @@ unsigned int aom_sad8x8_avg_c(const uint8_t* src_ptr,
                               const uint8_t* second_pred);
 #define aom_sad8x8_avg aom_sad8x8_avg_c
 
+void aom_sad8x8x3d_c(const uint8_t* src_ptr,
+                     int src_stride,
+                     const uint8_t* const ref_ptr[4],
+                     int ref_stride,
+                     uint32_t sad_array[4]);
+#define aom_sad8x8x3d aom_sad8x8x3d_c
+
 void aom_sad8x8x4d_c(const uint8_t* src_ptr,
                      int src_stride,
                      const uint8_t* const ref_ptr[4],
@@ -3819,7 +3944,7 @@ unsigned int aom_variance8x8_c(const uint8_t* src_ptr,
                                unsigned int* sse);
 #define aom_variance8x8 aom_variance8x8_c
 
-int aom_vector_var_c(const int16_t* ref, const int16_t* src, const int bwl);
+int aom_vector_var_c(const int16_t* ref, const int16_t* src, int bwl);
 #define aom_vector_var aom_vector_var_c
 
 void aom_dsp_rtcd(void);
diff --git a/libaom/source/config/linux/generic/config/aom_scale_rtcd.h b/libaom/source/config/linux/generic/config/aom_scale_rtcd.h
index bc2e218..9ea1824 100644
--- a/libaom/source/config/linux/generic/config/aom_scale_rtcd.h
+++ b/libaom/source/config/linux/generic/config/aom_scale_rtcd.h
@@ -155,6 +155,7 @@ void aom_yv12_partial_copy_y_c(const struct yv12_buffer_config* src_ybc,
 int aom_yv12_realloc_with_new_border_c(struct yv12_buffer_config* ybf,
                                        int new_border,
                                        int byte_alignment,
+                                       int num_pyramid_levels,
                                        int num_planes);
 #define aom_yv12_realloc_with_new_border aom_yv12_realloc_with_new_border_c
 
diff --git a/libaom/source/config/linux/generic/config/av1_rtcd.h b/libaom/source/config/linux/generic/config/av1_rtcd.h
index c0ed827..62aae4b 100644
--- a/libaom/source/config/linux/generic/config/av1_rtcd.h
+++ b/libaom/source/config/linux/generic/config/av1_rtcd.h
@@ -223,30 +223,22 @@ int64_t av1_calc_frame_error_c(const uint8_t* const ref,
                                int p_stride);
 #define av1_calc_frame_error av1_calc_frame_error_c
 
-void av1_calc_indices_dim1_c(const int* data,
-                             const int* centroids,
+void av1_calc_indices_dim1_c(const int16_t* data,
+                             const int16_t* centroids,
                              uint8_t* indices,
+                             int64_t* total_dist,
                              int n,
                              int k);
 #define av1_calc_indices_dim1 av1_calc_indices_dim1_c
 
-void av1_calc_indices_dim2_c(const int* data,
-                             const int* centroids,
+void av1_calc_indices_dim2_c(const int16_t* data,
+                             const int16_t* centroids,
                              uint8_t* indices,
+                             int64_t* total_dist,
                              int n,
                              int k);
 #define av1_calc_indices_dim2 av1_calc_indices_dim2_c
 
-double av1_compute_cross_correlation_c(unsigned char* im1,
-                                       int stride1,
-                                       int x1,
-                                       int y1,
-                                       unsigned char* im2,
-                                       int stride2,
-                                       int x2,
-                                       int y2);
-#define av1_compute_cross_correlation av1_compute_cross_correlation_c
-
 void av1_convolve_2d_scale_c(const uint8_t* src,
                              int src_stride,
                              uint8_t* dst,
@@ -532,9 +524,6 @@ void av1_get_nz_map_contexts_c(const uint8_t* const levels,
                                int8_t* const coeff_contexts);
 #define av1_get_nz_map_contexts av1_get_nz_map_contexts_c
 
-void av1_highbd_fwht4x4_c(const int16_t* input, tran_low_t* output, int stride);
-#define av1_highbd_fwht4x4 av1_highbd_fwht4x4_c
-
 void av1_highbd_inv_txfm_add_c(const tran_low_t* input,
                                uint8_t* dest,
                                int stride,
@@ -975,16 +964,16 @@ void cdef_copy_rect8_16bit_to_16bit_c(uint16_t* dst,
                                       int dstride,
                                       const uint16_t* src,
                                       int sstride,
-                                      int v,
-                                      int h);
+                                      int width,
+                                      int height);
 #define cdef_copy_rect8_16bit_to_16bit cdef_copy_rect8_16bit_to_16bit_c
 
 void cdef_copy_rect8_8bit_to_16bit_c(uint16_t* dst,
                                      int dstride,
                                      const uint8_t* src,
                                      int sstride,
-                                     int v,
-                                     int h);
+                                     int width,
+                                     int height);
 #define cdef_copy_rect8_8bit_to_16bit cdef_copy_rect8_8bit_to_16bit_c
 
 void cdef_filter_16_0_c(void* dst16,
diff --git a/libaom/source/config/linux/ia32/config/aom_config.asm b/libaom/source/config/linux/ia32/config/aom_config.asm
index a9a8b07..facbf54 100644
--- a/libaom/source/config/linux/ia32/config/aom_config.asm
+++ b/libaom/source/config/linux/ia32/config/aom_config.asm
@@ -36,6 +36,7 @@
 %define CONFIG_NORMAL_TILE_MODE 1
 %define CONFIG_OPTICAL_FLOW_API 0
 %define CONFIG_OS_SUPPORT 1
+%define CONFIG_OUTPUT_FRAME_SIZE 0
 %define CONFIG_PARTITION_SEARCH_ORDER 0
 %define CONFIG_PIC 1
 %define CONFIG_RATECTRL_LOG 0
@@ -44,6 +45,7 @@
 %define CONFIG_REALTIME_ONLY 1
 %define CONFIG_RT_ML_PARTITIONING 0
 %define CONFIG_RUNTIME_CPU_DETECT 1
+%define CONFIG_SALIENCY_MAP 0
 %define CONFIG_SHARED 0
 %define CONFIG_SIZE_LIMIT 1
 %define CONFIG_SPATIAL_RESAMPLING 1
diff --git a/libaom/source/config/linux/ia32/config/aom_config.h b/libaom/source/config/linux/ia32/config/aom_config.h
index 83afb10..1871f10 100644
--- a/libaom/source/config/linux/ia32/config/aom_config.h
+++ b/libaom/source/config/linux/ia32/config/aom_config.h
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022, Alliance for Open Media. All rights reserved
+ * Copyright (c) 2023, Alliance for Open Media. All rights reserved
  *
  * This source code is subject to the terms of the BSD 2 Clause License and
  * the Alliance for Open Media Patent License 1.0. If the BSD 2 Clause License
@@ -48,6 +48,7 @@
 #define CONFIG_NORMAL_TILE_MODE 1
 #define CONFIG_OPTICAL_FLOW_API 0
 #define CONFIG_OS_SUPPORT 1
+#define CONFIG_OUTPUT_FRAME_SIZE 0
 #define CONFIG_PARTITION_SEARCH_ORDER 0
 #define CONFIG_PIC 1
 #define CONFIG_RATECTRL_LOG 0
@@ -56,6 +57,7 @@
 #define CONFIG_REALTIME_ONLY 1
 #define CONFIG_RT_ML_PARTITIONING 0
 #define CONFIG_RUNTIME_CPU_DETECT 1
+#define CONFIG_SALIENCY_MAP 0
 #define CONFIG_SHARED 0
 #define CONFIG_SIZE_LIMIT 1
 #define CONFIG_SPATIAL_RESAMPLING 1
diff --git a/libaom/source/config/linux/ia32/config/aom_dsp_rtcd.h b/libaom/source/config/linux/ia32/config/aom_dsp_rtcd.h
index 4a14080..1c310c1 100644
--- a/libaom/source/config/linux/ia32/config/aom_dsp_rtcd.h
+++ b/libaom/source/config/linux/ia32/config/aom_dsp_rtcd.h
@@ -2223,30 +2223,75 @@ unsigned int aom_get_mb_ss_c(const int16_t*);
 unsigned int aom_get_mb_ss_sse2(const int16_t*);
 #define aom_get_mb_ss aom_get_mb_ss_sse2
 
-void aom_get_sse_sum_8x8_quad_c(const uint8_t* src_ptr,
-                                int source_stride,
-                                const uint8_t* ref_ptr,
-                                int ref_stride,
-                                unsigned int* sse,
-                                int* sum);
-void aom_get_sse_sum_8x8_quad_sse2(const uint8_t* src_ptr,
-                                   int source_stride,
-                                   const uint8_t* ref_ptr,
-                                   int ref_stride,
-                                   unsigned int* sse,
-                                   int* sum);
-void aom_get_sse_sum_8x8_quad_avx2(const uint8_t* src_ptr,
-                                   int source_stride,
-                                   const uint8_t* ref_ptr,
-                                   int ref_stride,
-                                   unsigned int* sse,
-                                   int* sum);
-RTCD_EXTERN void (*aom_get_sse_sum_8x8_quad)(const uint8_t* src_ptr,
-                                             int source_stride,
-                                             const uint8_t* ref_ptr,
-                                             int ref_stride,
-                                             unsigned int* sse,
-                                             int* sum);
+void aom_get_var_sse_sum_16x16_dual_c(const uint8_t* src_ptr,
+                                      int source_stride,
+                                      const uint8_t* ref_ptr,
+                                      int ref_stride,
+                                      uint32_t* sse16x16,
+                                      unsigned int* tot_sse,
+                                      int* tot_sum,
+                                      uint32_t* var16x16);
+void aom_get_var_sse_sum_16x16_dual_sse2(const uint8_t* src_ptr,
+                                         int source_stride,
+                                         const uint8_t* ref_ptr,
+                                         int ref_stride,
+                                         uint32_t* sse16x16,
+                                         unsigned int* tot_sse,
+                                         int* tot_sum,
+                                         uint32_t* var16x16);
+void aom_get_var_sse_sum_16x16_dual_avx2(const uint8_t* src_ptr,
+                                         int source_stride,
+                                         const uint8_t* ref_ptr,
+                                         int ref_stride,
+                                         uint32_t* sse16x16,
+                                         unsigned int* tot_sse,
+                                         int* tot_sum,
+                                         uint32_t* var16x16);
+RTCD_EXTERN void (*aom_get_var_sse_sum_16x16_dual)(const uint8_t* src_ptr,
+                                                   int source_stride,
+                                                   const uint8_t* ref_ptr,
+                                                   int ref_stride,
+                                                   uint32_t* sse16x16,
+                                                   unsigned int* tot_sse,
+                                                   int* tot_sum,
+                                                   uint32_t* var16x16);
+
+void aom_get_var_sse_sum_8x8_quad_c(const uint8_t* src_ptr,
+                                    int source_stride,
+                                    const uint8_t* ref_ptr,
+                                    int ref_stride,
+                                    uint32_t* sse8x8,
+                                    int* sum8x8,
+                                    unsigned int* tot_sse,
+                                    int* tot_sum,
+                                    uint32_t* var8x8);
+void aom_get_var_sse_sum_8x8_quad_sse2(const uint8_t* src_ptr,
+                                       int source_stride,
+                                       const uint8_t* ref_ptr,
+                                       int ref_stride,
+                                       uint32_t* sse8x8,
+                                       int* sum8x8,
+                                       unsigned int* tot_sse,
+                                       int* tot_sum,
+                                       uint32_t* var8x8);
+void aom_get_var_sse_sum_8x8_quad_avx2(const uint8_t* src_ptr,
+                                       int source_stride,
+                                       const uint8_t* ref_ptr,
+                                       int ref_stride,
+                                       uint32_t* sse8x8,
+                                       int* sum8x8,
+                                       unsigned int* tot_sse,
+                                       int* tot_sum,
+                                       uint32_t* var8x8);
+RTCD_EXTERN void (*aom_get_var_sse_sum_8x8_quad)(const uint8_t* src_ptr,
+                                                 int source_stride,
+                                                 const uint8_t* ref_ptr,
+                                                 int ref_stride,
+                                                 uint32_t* sse8x8,
+                                                 int* sum8x8,
+                                                 unsigned int* tot_sse,
+                                                 int* tot_sum,
+                                                 uint32_t* var8x8);
 
 void aom_h_predictor_16x16_c(uint8_t* dst,
                              ptrdiff_t y_stride,
@@ -2887,7 +2932,16 @@ void aom_lpf_vertical_14_quad_sse2(uint8_t* s,
                                    const uint8_t* blimit0,
                                    const uint8_t* limit0,
                                    const uint8_t* thresh0);
-#define aom_lpf_vertical_14_quad aom_lpf_vertical_14_quad_sse2
+void aom_lpf_vertical_14_quad_avx2(uint8_t* s,
+                                   int pitch,
+                                   const uint8_t* blimit0,
+                                   const uint8_t* limit0,
+                                   const uint8_t* thresh0);
+RTCD_EXTERN void (*aom_lpf_vertical_14_quad)(uint8_t* s,
+                                             int pitch,
+                                             const uint8_t* blimit0,
+                                             const uint8_t* limit0,
+                                             const uint8_t* thresh0);
 
 void aom_lpf_vertical_4_c(uint8_t* s,
                           int pitch,
@@ -4637,6 +4691,11 @@ uint64_t aom_mse_16xh_16bit_c(uint8_t* dst,
                               uint16_t* src,
                               int w,
                               int h);
+uint64_t aom_mse_16xh_16bit_sse2(uint8_t* dst,
+                                 int dstride,
+                                 uint16_t* src,
+                                 int w,
+                                 int h);
 uint64_t aom_mse_16xh_16bit_avx2(uint8_t* dst,
                                  int dstride,
                                  uint16_t* src,
@@ -5171,6 +5230,22 @@ RTCD_EXTERN unsigned int (*aom_sad128x128_avg)(const uint8_t* src_ptr,
                                                int ref_stride,
                                                const uint8_t* second_pred);
 
+void aom_sad128x128x3d_c(const uint8_t* src_ptr,
+                         int src_stride,
+                         const uint8_t* const ref_ptr[4],
+                         int ref_stride,
+                         uint32_t sad_array[4]);
+void aom_sad128x128x3d_avx2(const uint8_t* src_ptr,
+                            int src_stride,
+                            const uint8_t* const ref_ptr[4],
+                            int ref_stride,
+                            uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad128x128x3d)(const uint8_t* src_ptr,
+                                      int src_stride,
+                                      const uint8_t* const ref_ptr[4],
+                                      int ref_stride,
+                                      uint32_t sad_array[4]);
+
 void aom_sad128x128x4d_c(const uint8_t* src_ptr,
                          int src_stride,
                          const uint8_t* const ref_ptr[4],
@@ -5238,6 +5313,22 @@ RTCD_EXTERN unsigned int (*aom_sad128x64_avg)(const uint8_t* src_ptr,
                                               int ref_stride,
                                               const uint8_t* second_pred);
 
+void aom_sad128x64x3d_c(const uint8_t* src_ptr,
+                        int src_stride,
+                        const uint8_t* const ref_ptr[4],
+                        int ref_stride,
+                        uint32_t sad_array[4]);
+void aom_sad128x64x3d_avx2(const uint8_t* src_ptr,
+                           int src_stride,
+                           const uint8_t* const ref_ptr[4],
+                           int ref_stride,
+                           uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad128x64x3d)(const uint8_t* src_ptr,
+                                     int src_stride,
+                                     const uint8_t* const ref_ptr[4],
+                                     int ref_stride,
+                                     uint32_t sad_array[4]);
+
 void aom_sad128x64x4d_c(const uint8_t* src_ptr,
                         int src_stride,
                         const uint8_t* const ref_ptr[4],
@@ -5303,6 +5394,22 @@ unsigned int aom_sad16x16_avg_sse2(const uint8_t* src_ptr,
                                    const uint8_t* second_pred);
 #define aom_sad16x16_avg aom_sad16x16_avg_sse2
 
+void aom_sad16x16x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+void aom_sad16x16x3d_avx2(const uint8_t* src_ptr,
+                          int src_stride,
+                          const uint8_t* const ref_ptr[4],
+                          int ref_stride,
+                          uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad16x16x3d)(const uint8_t* src_ptr,
+                                    int src_stride,
+                                    const uint8_t* const ref_ptr[4],
+                                    int ref_stride,
+                                    uint32_t sad_array[4]);
+
 void aom_sad16x16x4d_c(const uint8_t* src_ptr,
                        int src_stride,
                        const uint8_t* const ref_ptr[4],
@@ -5313,7 +5420,16 @@ void aom_sad16x16x4d_sse2(const uint8_t* src_ptr,
                           const uint8_t* const ref_ptr[4],
                           int ref_stride,
                           uint32_t sad_array[4]);
-#define aom_sad16x16x4d aom_sad16x16x4d_sse2
+void aom_sad16x16x4d_avx2(const uint8_t* src_ptr,
+                          int src_stride,
+                          const uint8_t* const ref_ptr[4],
+                          int ref_stride,
+                          uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad16x16x4d)(const uint8_t* src_ptr,
+                                    int src_stride,
+                                    const uint8_t* const ref_ptr[4],
+                                    int ref_stride,
+                                    uint32_t sad_array[4]);
 
 void aom_sad16x16x4d_avg_c(const uint8_t* src_ptr,
                            int src_stride,
@@ -5345,6 +5461,22 @@ unsigned int aom_sad16x32_avg_sse2(const uint8_t* src_ptr,
                                    const uint8_t* second_pred);
 #define aom_sad16x32_avg aom_sad16x32_avg_sse2
 
+void aom_sad16x32x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+void aom_sad16x32x3d_avx2(const uint8_t* src_ptr,
+                          int src_stride,
+                          const uint8_t* const ref_ptr[4],
+                          int ref_stride,
+                          uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad16x32x3d)(const uint8_t* src_ptr,
+                                    int src_stride,
+                                    const uint8_t* const ref_ptr[4],
+                                    int ref_stride,
+                                    uint32_t sad_array[4]);
+
 void aom_sad16x32x4d_c(const uint8_t* src_ptr,
                        int src_stride,
                        const uint8_t* const ref_ptr[4],
@@ -5355,7 +5487,16 @@ void aom_sad16x32x4d_sse2(const uint8_t* src_ptr,
                           const uint8_t* const ref_ptr[4],
                           int ref_stride,
                           uint32_t sad_array[4]);
-#define aom_sad16x32x4d aom_sad16x32x4d_sse2
+void aom_sad16x32x4d_avx2(const uint8_t* src_ptr,
+                          int src_stride,
+                          const uint8_t* const ref_ptr[4],
+                          int ref_stride,
+                          uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad16x32x4d)(const uint8_t* src_ptr,
+                                    int src_stride,
+                                    const uint8_t* const ref_ptr[4],
+                                    int ref_stride,
+                                    uint32_t sad_array[4]);
 
 void aom_sad16x32x4d_avg_c(const uint8_t* src_ptr,
                            int src_stride,
@@ -5387,6 +5528,22 @@ unsigned int aom_sad16x8_avg_sse2(const uint8_t* src_ptr,
                                   const uint8_t* second_pred);
 #define aom_sad16x8_avg aom_sad16x8_avg_sse2
 
+void aom_sad16x8x3d_c(const uint8_t* src_ptr,
+                      int src_stride,
+                      const uint8_t* const ref_ptr[4],
+                      int ref_stride,
+                      uint32_t sad_array[4]);
+void aom_sad16x8x3d_avx2(const uint8_t* src_ptr,
+                         int src_stride,
+                         const uint8_t* const ref_ptr[4],
+                         int ref_stride,
+                         uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad16x8x3d)(const uint8_t* src_ptr,
+                                   int src_stride,
+                                   const uint8_t* const ref_ptr[4],
+                                   int ref_stride,
+                                   uint32_t sad_array[4]);
+
 void aom_sad16x8x4d_c(const uint8_t* src_ptr,
                       int src_stride,
                       const uint8_t* const ref_ptr[4],
@@ -5397,7 +5554,16 @@ void aom_sad16x8x4d_sse2(const uint8_t* src_ptr,
                          const uint8_t* const ref_ptr[4],
                          int ref_stride,
                          uint32_t sad_array[4]);
-#define aom_sad16x8x4d aom_sad16x8x4d_sse2
+void aom_sad16x8x4d_avx2(const uint8_t* src_ptr,
+                         int src_stride,
+                         const uint8_t* const ref_ptr[4],
+                         int ref_stride,
+                         uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad16x8x4d)(const uint8_t* src_ptr,
+                                   int src_stride,
+                                   const uint8_t* const ref_ptr[4],
+                                   int ref_stride,
+                                   uint32_t sad_array[4]);
 
 void aom_sad16x8x4d_avg_c(const uint8_t* src_ptr,
                           int src_stride,
@@ -5459,6 +5625,22 @@ RTCD_EXTERN unsigned int (*aom_sad32x16_avg)(const uint8_t* src_ptr,
                                              int ref_stride,
                                              const uint8_t* second_pred);
 
+void aom_sad32x16x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+void aom_sad32x16x3d_avx2(const uint8_t* src_ptr,
+                          int src_stride,
+                          const uint8_t* const ref_ptr[4],
+                          int ref_stride,
+                          uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad32x16x3d)(const uint8_t* src_ptr,
+                                    int src_stride,
+                                    const uint8_t* const ref_ptr[4],
+                                    int ref_stride,
+                                    uint32_t sad_array[4]);
+
 void aom_sad32x16x4d_c(const uint8_t* src_ptr,
                        int src_stride,
                        const uint8_t* const ref_ptr[4],
@@ -5526,6 +5708,22 @@ RTCD_EXTERN unsigned int (*aom_sad32x32_avg)(const uint8_t* src_ptr,
                                              int ref_stride,
                                              const uint8_t* second_pred);
 
+void aom_sad32x32x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+void aom_sad32x32x3d_avx2(const uint8_t* src_ptr,
+                          int src_stride,
+                          const uint8_t* const ref_ptr[4],
+                          int ref_stride,
+                          uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad32x32x3d)(const uint8_t* src_ptr,
+                                    int src_stride,
+                                    const uint8_t* const ref_ptr[4],
+                                    int ref_stride,
+                                    uint32_t sad_array[4]);
+
 void aom_sad32x32x4d_c(const uint8_t* src_ptr,
                        int src_stride,
                        const uint8_t* const ref_ptr[4],
@@ -5593,6 +5791,22 @@ RTCD_EXTERN unsigned int (*aom_sad32x64_avg)(const uint8_t* src_ptr,
                                              int ref_stride,
                                              const uint8_t* second_pred);
 
+void aom_sad32x64x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+void aom_sad32x64x3d_avx2(const uint8_t* src_ptr,
+                          int src_stride,
+                          const uint8_t* const ref_ptr[4],
+                          int ref_stride,
+                          uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad32x64x3d)(const uint8_t* src_ptr,
+                                    int src_stride,
+                                    const uint8_t* const ref_ptr[4],
+                                    int ref_stride,
+                                    uint32_t sad_array[4]);
+
 void aom_sad32x64x4d_c(const uint8_t* src_ptr,
                        int src_stride,
                        const uint8_t* const ref_ptr[4],
@@ -5658,6 +5872,13 @@ unsigned int aom_sad4x4_avg_sse2(const uint8_t* src_ptr,
                                  const uint8_t* second_pred);
 #define aom_sad4x4_avg aom_sad4x4_avg_sse2
 
+void aom_sad4x4x3d_c(const uint8_t* src_ptr,
+                     int src_stride,
+                     const uint8_t* const ref_ptr[4],
+                     int ref_stride,
+                     uint32_t sad_array[4]);
+#define aom_sad4x4x3d aom_sad4x4x3d_c
+
 void aom_sad4x4x4d_c(const uint8_t* src_ptr,
                      int src_stride,
                      const uint8_t* const ref_ptr[4],
@@ -5700,6 +5921,13 @@ unsigned int aom_sad4x8_avg_sse2(const uint8_t* src_ptr,
                                  const uint8_t* second_pred);
 #define aom_sad4x8_avg aom_sad4x8_avg_sse2
 
+void aom_sad4x8x3d_c(const uint8_t* src_ptr,
+                     int src_stride,
+                     const uint8_t* const ref_ptr[4],
+                     int ref_stride,
+                     uint32_t sad_array[4]);
+#define aom_sad4x8x3d aom_sad4x8x3d_c
+
 void aom_sad4x8x4d_c(const uint8_t* src_ptr,
                      int src_stride,
                      const uint8_t* const ref_ptr[4],
@@ -5772,6 +6000,22 @@ RTCD_EXTERN unsigned int (*aom_sad64x128_avg)(const uint8_t* src_ptr,
                                               int ref_stride,
                                               const uint8_t* second_pred);
 
+void aom_sad64x128x3d_c(const uint8_t* src_ptr,
+                        int src_stride,
+                        const uint8_t* const ref_ptr[4],
+                        int ref_stride,
+                        uint32_t sad_array[4]);
+void aom_sad64x128x3d_avx2(const uint8_t* src_ptr,
+                           int src_stride,
+                           const uint8_t* const ref_ptr[4],
+                           int ref_stride,
+                           uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad64x128x3d)(const uint8_t* src_ptr,
+                                     int src_stride,
+                                     const uint8_t* const ref_ptr[4],
+                                     int ref_stride,
+                                     uint32_t sad_array[4]);
+
 void aom_sad64x128x4d_c(const uint8_t* src_ptr,
                         int src_stride,
                         const uint8_t* const ref_ptr[4],
@@ -5839,6 +6083,22 @@ RTCD_EXTERN unsigned int (*aom_sad64x32_avg)(const uint8_t* src_ptr,
                                              int ref_stride,
                                              const uint8_t* second_pred);
 
+void aom_sad64x32x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+void aom_sad64x32x3d_avx2(const uint8_t* src_ptr,
+                          int src_stride,
+                          const uint8_t* const ref_ptr[4],
+                          int ref_stride,
+                          uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad64x32x3d)(const uint8_t* src_ptr,
+                                    int src_stride,
+                                    const uint8_t* const ref_ptr[4],
+                                    int ref_stride,
+                                    uint32_t sad_array[4]);
+
 void aom_sad64x32x4d_c(const uint8_t* src_ptr,
                        int src_stride,
                        const uint8_t* const ref_ptr[4],
@@ -5906,6 +6166,22 @@ RTCD_EXTERN unsigned int (*aom_sad64x64_avg)(const uint8_t* src_ptr,
                                              int ref_stride,
                                              const uint8_t* second_pred);
 
+void aom_sad64x64x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+void aom_sad64x64x3d_avx2(const uint8_t* src_ptr,
+                          int src_stride,
+                          const uint8_t* const ref_ptr[4],
+                          int ref_stride,
+                          uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad64x64x3d)(const uint8_t* src_ptr,
+                                    int src_stride,
+                                    const uint8_t* const ref_ptr[4],
+                                    int ref_stride,
+                                    uint32_t sad_array[4]);
+
 void aom_sad64x64x4d_c(const uint8_t* src_ptr,
                        int src_stride,
                        const uint8_t* const ref_ptr[4],
@@ -5971,6 +6247,13 @@ unsigned int aom_sad8x16_avg_sse2(const uint8_t* src_ptr,
                                   const uint8_t* second_pred);
 #define aom_sad8x16_avg aom_sad8x16_avg_sse2
 
+void aom_sad8x16x3d_c(const uint8_t* src_ptr,
+                      int src_stride,
+                      const uint8_t* const ref_ptr[4],
+                      int ref_stride,
+                      uint32_t sad_array[4]);
+#define aom_sad8x16x3d aom_sad8x16x3d_c
+
 void aom_sad8x16x4d_c(const uint8_t* src_ptr,
                       int src_stride,
                       const uint8_t* const ref_ptr[4],
@@ -6013,6 +6296,13 @@ unsigned int aom_sad8x4_avg_sse2(const uint8_t* src_ptr,
                                  const uint8_t* second_pred);
 #define aom_sad8x4_avg aom_sad8x4_avg_sse2
 
+void aom_sad8x4x3d_c(const uint8_t* src_ptr,
+                     int src_stride,
+                     const uint8_t* const ref_ptr[4],
+                     int ref_stride,
+                     uint32_t sad_array[4]);
+#define aom_sad8x4x3d aom_sad8x4x3d_c
+
 void aom_sad8x4x4d_c(const uint8_t* src_ptr,
                      int src_stride,
                      const uint8_t* const ref_ptr[4],
@@ -6055,6 +6345,13 @@ unsigned int aom_sad8x8_avg_sse2(const uint8_t* src_ptr,
                                  const uint8_t* second_pred);
 #define aom_sad8x8_avg aom_sad8x8_avg_sse2
 
+void aom_sad8x8x3d_c(const uint8_t* src_ptr,
+                     int src_stride,
+                     const uint8_t* const ref_ptr[4],
+                     int ref_stride,
+                     uint32_t sad_array[4]);
+#define aom_sad8x8x3d aom_sad8x8x3d_c
+
 void aom_sad8x8x4d_c(const uint8_t* src_ptr,
                      int src_stride,
                      const uint8_t* const ref_ptr[4],
@@ -6185,7 +6482,16 @@ void aom_sad_skip_16x16x4d_sse2(const uint8_t* src_ptr,
                                 const uint8_t* const ref_ptr[4],
                                 int ref_stride,
                                 uint32_t sad_array[4]);
-#define aom_sad_skip_16x16x4d aom_sad_skip_16x16x4d_sse2
+void aom_sad_skip_16x16x4d_avx2(const uint8_t* src_ptr,
+                                int src_stride,
+                                const uint8_t* const ref_ptr[4],
+                                int ref_stride,
+                                uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad_skip_16x16x4d)(const uint8_t* src_ptr,
+                                          int src_stride,
+                                          const uint8_t* const ref_ptr[4],
+                                          int ref_stride,
+                                          uint32_t sad_array[4]);
 
 unsigned int aom_sad_skip_16x32_c(const uint8_t* src_ptr,
                                   int src_stride,
@@ -6207,7 +6513,16 @@ void aom_sad_skip_16x32x4d_sse2(const uint8_t* src_ptr,
                                 const uint8_t* const ref_ptr[4],
                                 int ref_stride,
                                 uint32_t sad_array[4]);
-#define aom_sad_skip_16x32x4d aom_sad_skip_16x32x4d_sse2
+void aom_sad_skip_16x32x4d_avx2(const uint8_t* src_ptr,
+                                int src_stride,
+                                const uint8_t* const ref_ptr[4],
+                                int ref_stride,
+                                uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad_skip_16x32x4d)(const uint8_t* src_ptr,
+                                          int src_stride,
+                                          const uint8_t* const ref_ptr[4],
+                                          int ref_stride,
+                                          uint32_t sad_array[4]);
 
 unsigned int aom_sad_skip_16x8_c(const uint8_t* src_ptr,
                                  int src_stride,
@@ -6229,7 +6544,16 @@ void aom_sad_skip_16x8x4d_sse2(const uint8_t* src_ptr,
                                const uint8_t* const ref_ptr[4],
                                int ref_stride,
                                uint32_t sad_array[4]);
-#define aom_sad_skip_16x8x4d aom_sad_skip_16x8x4d_sse2
+void aom_sad_skip_16x8x4d_avx2(const uint8_t* src_ptr,
+                               int src_stride,
+                               const uint8_t* const ref_ptr[4],
+                               int ref_stride,
+                               uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad_skip_16x8x4d)(const uint8_t* src_ptr,
+                                         int src_stride,
+                                         const uint8_t* const ref_ptr[4],
+                                         int ref_stride,
+                                         uint32_t sad_array[4]);
 
 unsigned int aom_sad_skip_32x16_c(const uint8_t* src_ptr,
                                   int src_stride,
@@ -9168,13 +9492,12 @@ unsigned int aom_variance8x8_sse2(const uint8_t* src_ptr,
                                   unsigned int* sse);
 #define aom_variance8x8 aom_variance8x8_sse2
 
-int aom_vector_var_c(const int16_t* ref, const int16_t* src, const int bwl);
-int aom_vector_var_sse4_1(const int16_t* ref,
-                          const int16_t* src,
-                          const int bwl);
+int aom_vector_var_c(const int16_t* ref, const int16_t* src, int bwl);
+int aom_vector_var_sse4_1(const int16_t* ref, const int16_t* src, int bwl);
+int aom_vector_var_avx2(const int16_t* ref, const int16_t* src, int bwl);
 RTCD_EXTERN int (*aom_vector_var)(const int16_t* ref,
                                   const int16_t* src,
-                                  const int bwl);
+                                  int bwl);
 
 void aom_dsp_rtcd(void);
 
@@ -9186,1094 +9509,1540 @@ static void setup_rtcd_internal(void) {
   (void)flags;
 
   aom_avg_8x8_quad = aom_avg_8x8_quad_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_avg_8x8_quad = aom_avg_8x8_quad_avx2;
+  }
   aom_blend_a64_hmask = aom_blend_a64_hmask_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     aom_blend_a64_hmask = aom_blend_a64_hmask_sse4_1;
+  }
   aom_blend_a64_mask = aom_blend_a64_mask_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     aom_blend_a64_mask = aom_blend_a64_mask_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_blend_a64_mask = aom_blend_a64_mask_avx2;
+  }
   aom_blend_a64_vmask = aom_blend_a64_vmask_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     aom_blend_a64_vmask = aom_blend_a64_vmask_sse4_1;
+  }
   aom_comp_mask_pred = aom_comp_mask_pred_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_comp_mask_pred = aom_comp_mask_pred_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_comp_mask_pred = aom_comp_mask_pred_avx2;
+  }
   aom_convolve8_horiz = aom_convolve8_horiz_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_convolve8_horiz = aom_convolve8_horiz_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_convolve8_horiz = aom_convolve8_horiz_avx2;
+  }
   aom_convolve8_vert = aom_convolve8_vert_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_convolve8_vert = aom_convolve8_vert_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_convolve8_vert = aom_convolve8_vert_avx2;
+  }
   aom_convolve_copy = aom_convolve_copy_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_convolve_copy = aom_convolve_copy_avx2;
+  }
   aom_dc_128_predictor_32x16 = aom_dc_128_predictor_32x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_128_predictor_32x16 = aom_dc_128_predictor_32x16_avx2;
+  }
   aom_dc_128_predictor_32x32 = aom_dc_128_predictor_32x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_128_predictor_32x32 = aom_dc_128_predictor_32x32_avx2;
+  }
   aom_dc_128_predictor_32x64 = aom_dc_128_predictor_32x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_128_predictor_32x64 = aom_dc_128_predictor_32x64_avx2;
+  }
   aom_dc_128_predictor_64x16 = aom_dc_128_predictor_64x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_128_predictor_64x16 = aom_dc_128_predictor_64x16_avx2;
+  }
   aom_dc_128_predictor_64x32 = aom_dc_128_predictor_64x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_128_predictor_64x32 = aom_dc_128_predictor_64x32_avx2;
+  }
   aom_dc_128_predictor_64x64 = aom_dc_128_predictor_64x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_128_predictor_64x64 = aom_dc_128_predictor_64x64_avx2;
+  }
   aom_dc_left_predictor_32x16 = aom_dc_left_predictor_32x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_left_predictor_32x16 = aom_dc_left_predictor_32x16_avx2;
+  }
   aom_dc_left_predictor_32x32 = aom_dc_left_predictor_32x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_left_predictor_32x32 = aom_dc_left_predictor_32x32_avx2;
+  }
   aom_dc_left_predictor_32x64 = aom_dc_left_predictor_32x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_left_predictor_32x64 = aom_dc_left_predictor_32x64_avx2;
+  }
   aom_dc_left_predictor_64x16 = aom_dc_left_predictor_64x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_left_predictor_64x16 = aom_dc_left_predictor_64x16_avx2;
+  }
   aom_dc_left_predictor_64x32 = aom_dc_left_predictor_64x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_left_predictor_64x32 = aom_dc_left_predictor_64x32_avx2;
+  }
   aom_dc_left_predictor_64x64 = aom_dc_left_predictor_64x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_left_predictor_64x64 = aom_dc_left_predictor_64x64_avx2;
+  }
   aom_dc_predictor_32x16 = aom_dc_predictor_32x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_predictor_32x16 = aom_dc_predictor_32x16_avx2;
+  }
   aom_dc_predictor_32x32 = aom_dc_predictor_32x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_predictor_32x32 = aom_dc_predictor_32x32_avx2;
+  }
   aom_dc_predictor_32x64 = aom_dc_predictor_32x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_predictor_32x64 = aom_dc_predictor_32x64_avx2;
+  }
   aom_dc_predictor_64x16 = aom_dc_predictor_64x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_predictor_64x16 = aom_dc_predictor_64x16_avx2;
+  }
   aom_dc_predictor_64x32 = aom_dc_predictor_64x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_predictor_64x32 = aom_dc_predictor_64x32_avx2;
+  }
   aom_dc_predictor_64x64 = aom_dc_predictor_64x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_predictor_64x64 = aom_dc_predictor_64x64_avx2;
+  }
   aom_dc_top_predictor_32x16 = aom_dc_top_predictor_32x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_top_predictor_32x16 = aom_dc_top_predictor_32x16_avx2;
+  }
   aom_dc_top_predictor_32x32 = aom_dc_top_predictor_32x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_top_predictor_32x32 = aom_dc_top_predictor_32x32_avx2;
+  }
   aom_dc_top_predictor_32x64 = aom_dc_top_predictor_32x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_top_predictor_32x64 = aom_dc_top_predictor_32x64_avx2;
+  }
   aom_dc_top_predictor_64x16 = aom_dc_top_predictor_64x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_top_predictor_64x16 = aom_dc_top_predictor_64x16_avx2;
+  }
   aom_dc_top_predictor_64x32 = aom_dc_top_predictor_64x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_top_predictor_64x32 = aom_dc_top_predictor_64x32_avx2;
+  }
   aom_dc_top_predictor_64x64 = aom_dc_top_predictor_64x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_top_predictor_64x64 = aom_dc_top_predictor_64x64_avx2;
+  }
   aom_dist_wtd_comp_avg_pred = aom_dist_wtd_comp_avg_pred_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_comp_avg_pred = aom_dist_wtd_comp_avg_pred_ssse3;
+  }
   aom_dist_wtd_sad128x128_avg = aom_dist_wtd_sad128x128_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad128x128_avg = aom_dist_wtd_sad128x128_avg_ssse3;
+  }
   aom_dist_wtd_sad128x64_avg = aom_dist_wtd_sad128x64_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad128x64_avg = aom_dist_wtd_sad128x64_avg_ssse3;
+  }
   aom_dist_wtd_sad16x16_avg = aom_dist_wtd_sad16x16_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad16x16_avg = aom_dist_wtd_sad16x16_avg_ssse3;
+  }
   aom_dist_wtd_sad16x32_avg = aom_dist_wtd_sad16x32_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad16x32_avg = aom_dist_wtd_sad16x32_avg_ssse3;
+  }
   aom_dist_wtd_sad16x8_avg = aom_dist_wtd_sad16x8_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad16x8_avg = aom_dist_wtd_sad16x8_avg_ssse3;
+  }
   aom_dist_wtd_sad32x16_avg = aom_dist_wtd_sad32x16_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad32x16_avg = aom_dist_wtd_sad32x16_avg_ssse3;
+  }
   aom_dist_wtd_sad32x32_avg = aom_dist_wtd_sad32x32_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad32x32_avg = aom_dist_wtd_sad32x32_avg_ssse3;
+  }
   aom_dist_wtd_sad32x64_avg = aom_dist_wtd_sad32x64_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad32x64_avg = aom_dist_wtd_sad32x64_avg_ssse3;
+  }
   aom_dist_wtd_sad4x4_avg = aom_dist_wtd_sad4x4_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad4x4_avg = aom_dist_wtd_sad4x4_avg_ssse3;
+  }
   aom_dist_wtd_sad4x8_avg = aom_dist_wtd_sad4x8_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad4x8_avg = aom_dist_wtd_sad4x8_avg_ssse3;
+  }
   aom_dist_wtd_sad64x128_avg = aom_dist_wtd_sad64x128_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad64x128_avg = aom_dist_wtd_sad64x128_avg_ssse3;
+  }
   aom_dist_wtd_sad64x32_avg = aom_dist_wtd_sad64x32_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad64x32_avg = aom_dist_wtd_sad64x32_avg_ssse3;
+  }
   aom_dist_wtd_sad64x64_avg = aom_dist_wtd_sad64x64_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad64x64_avg = aom_dist_wtd_sad64x64_avg_ssse3;
+  }
   aom_dist_wtd_sad8x16_avg = aom_dist_wtd_sad8x16_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad8x16_avg = aom_dist_wtd_sad8x16_avg_ssse3;
+  }
   aom_dist_wtd_sad8x4_avg = aom_dist_wtd_sad8x4_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad8x4_avg = aom_dist_wtd_sad8x4_avg_ssse3;
+  }
   aom_dist_wtd_sad8x8_avg = aom_dist_wtd_sad8x8_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad8x8_avg = aom_dist_wtd_sad8x8_avg_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance128x128 =
       aom_dist_wtd_sub_pixel_avg_variance128x128_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance128x128 =
         aom_dist_wtd_sub_pixel_avg_variance128x128_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance128x64 =
       aom_dist_wtd_sub_pixel_avg_variance128x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance128x64 =
         aom_dist_wtd_sub_pixel_avg_variance128x64_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance16x16 =
       aom_dist_wtd_sub_pixel_avg_variance16x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance16x16 =
         aom_dist_wtd_sub_pixel_avg_variance16x16_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance16x32 =
       aom_dist_wtd_sub_pixel_avg_variance16x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance16x32 =
         aom_dist_wtd_sub_pixel_avg_variance16x32_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance16x8 =
       aom_dist_wtd_sub_pixel_avg_variance16x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance16x8 =
         aom_dist_wtd_sub_pixel_avg_variance16x8_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance32x16 =
       aom_dist_wtd_sub_pixel_avg_variance32x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance32x16 =
         aom_dist_wtd_sub_pixel_avg_variance32x16_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance32x32 =
       aom_dist_wtd_sub_pixel_avg_variance32x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance32x32 =
         aom_dist_wtd_sub_pixel_avg_variance32x32_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance32x64 =
       aom_dist_wtd_sub_pixel_avg_variance32x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance32x64 =
         aom_dist_wtd_sub_pixel_avg_variance32x64_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance4x4 =
       aom_dist_wtd_sub_pixel_avg_variance4x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance4x4 =
         aom_dist_wtd_sub_pixel_avg_variance4x4_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance4x8 =
       aom_dist_wtd_sub_pixel_avg_variance4x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance4x8 =
         aom_dist_wtd_sub_pixel_avg_variance4x8_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance64x128 =
       aom_dist_wtd_sub_pixel_avg_variance64x128_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance64x128 =
         aom_dist_wtd_sub_pixel_avg_variance64x128_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance64x32 =
       aom_dist_wtd_sub_pixel_avg_variance64x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance64x32 =
         aom_dist_wtd_sub_pixel_avg_variance64x32_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance64x64 =
       aom_dist_wtd_sub_pixel_avg_variance64x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance64x64 =
         aom_dist_wtd_sub_pixel_avg_variance64x64_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance8x16 =
       aom_dist_wtd_sub_pixel_avg_variance8x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance8x16 =
         aom_dist_wtd_sub_pixel_avg_variance8x16_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance8x4 =
       aom_dist_wtd_sub_pixel_avg_variance8x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance8x4 =
         aom_dist_wtd_sub_pixel_avg_variance8x4_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance8x8 =
       aom_dist_wtd_sub_pixel_avg_variance8x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance8x8 =
         aom_dist_wtd_sub_pixel_avg_variance8x8_ssse3;
+  }
   aom_fft16x16_float = aom_fft16x16_float_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_fft16x16_float = aom_fft16x16_float_avx2;
+  }
   aom_fft32x32_float = aom_fft32x32_float_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_fft32x32_float = aom_fft32x32_float_avx2;
+  }
   aom_fft8x8_float = aom_fft8x8_float_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_fft8x8_float = aom_fft8x8_float_avx2;
+  }
   aom_get_blk_sse_sum = aom_get_blk_sse_sum_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_get_blk_sse_sum = aom_get_blk_sse_sum_avx2;
-  aom_get_sse_sum_8x8_quad = aom_get_sse_sum_8x8_quad_sse2;
-  if (flags & HAS_AVX2)
-    aom_get_sse_sum_8x8_quad = aom_get_sse_sum_8x8_quad_avx2;
+  }
+  aom_get_var_sse_sum_16x16_dual = aom_get_var_sse_sum_16x16_dual_sse2;
+  if (flags & HAS_AVX2) {
+    aom_get_var_sse_sum_16x16_dual = aom_get_var_sse_sum_16x16_dual_avx2;
+  }
+  aom_get_var_sse_sum_8x8_quad = aom_get_var_sse_sum_8x8_quad_sse2;
+  if (flags & HAS_AVX2) {
+    aom_get_var_sse_sum_8x8_quad = aom_get_var_sse_sum_8x8_quad_avx2;
+  }
   aom_h_predictor_32x32 = aom_h_predictor_32x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_h_predictor_32x32 = aom_h_predictor_32x32_avx2;
+  }
   aom_hadamard_16x16 = aom_hadamard_16x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_hadamard_16x16 = aom_hadamard_16x16_avx2;
+  }
   aom_hadamard_32x32 = aom_hadamard_32x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_hadamard_32x32 = aom_hadamard_32x32_avx2;
+  }
   aom_hadamard_lp_16x16 = aom_hadamard_lp_16x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_hadamard_lp_16x16 = aom_hadamard_lp_16x16_avx2;
+  }
   aom_hadamard_lp_8x8_dual = aom_hadamard_lp_8x8_dual_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_hadamard_lp_8x8_dual = aom_hadamard_lp_8x8_dual_avx2;
+  }
   aom_ifft16x16_float = aom_ifft16x16_float_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_ifft16x16_float = aom_ifft16x16_float_avx2;
+  }
   aom_ifft32x32_float = aom_ifft32x32_float_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_ifft32x32_float = aom_ifft32x32_float_avx2;
+  }
   aom_ifft8x8_float = aom_ifft8x8_float_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_ifft8x8_float = aom_ifft8x8_float_avx2;
+  }
   aom_int_pro_col = aom_int_pro_col_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_int_pro_col = aom_int_pro_col_avx2;
+  }
   aom_int_pro_row = aom_int_pro_row_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_int_pro_row = aom_int_pro_row_avx2;
+  }
   aom_lowbd_blend_a64_d16_mask = aom_lowbd_blend_a64_d16_mask_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     aom_lowbd_blend_a64_d16_mask = aom_lowbd_blend_a64_d16_mask_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_lowbd_blend_a64_d16_mask = aom_lowbd_blend_a64_d16_mask_avx2;
+  }
   aom_lpf_horizontal_14_quad = aom_lpf_horizontal_14_quad_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_lpf_horizontal_14_quad = aom_lpf_horizontal_14_quad_avx2;
+  }
   aom_lpf_horizontal_6_quad = aom_lpf_horizontal_6_quad_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_lpf_horizontal_6_quad = aom_lpf_horizontal_6_quad_avx2;
+  }
   aom_lpf_horizontal_8_quad = aom_lpf_horizontal_8_quad_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_lpf_horizontal_8_quad = aom_lpf_horizontal_8_quad_avx2;
+  }
+  aom_lpf_vertical_14_quad = aom_lpf_vertical_14_quad_sse2;
+  if (flags & HAS_AVX2) {
+    aom_lpf_vertical_14_quad = aom_lpf_vertical_14_quad_avx2;
+  }
   aom_masked_sad128x128 = aom_masked_sad128x128_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad128x128 = aom_masked_sad128x128_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad128x128 = aom_masked_sad128x128_avx2;
+  }
   aom_masked_sad128x128x4d = aom_masked_sad128x128x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad128x128x4d = aom_masked_sad128x128x4d_ssse3;
+  }
   aom_masked_sad128x64 = aom_masked_sad128x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad128x64 = aom_masked_sad128x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad128x64 = aom_masked_sad128x64_avx2;
+  }
   aom_masked_sad128x64x4d = aom_masked_sad128x64x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad128x64x4d = aom_masked_sad128x64x4d_ssse3;
+  }
   aom_masked_sad16x16 = aom_masked_sad16x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad16x16 = aom_masked_sad16x16_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad16x16 = aom_masked_sad16x16_avx2;
+  }
   aom_masked_sad16x16x4d = aom_masked_sad16x16x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad16x16x4d = aom_masked_sad16x16x4d_ssse3;
+  }
   aom_masked_sad16x32 = aom_masked_sad16x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad16x32 = aom_masked_sad16x32_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad16x32 = aom_masked_sad16x32_avx2;
+  }
   aom_masked_sad16x32x4d = aom_masked_sad16x32x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad16x32x4d = aom_masked_sad16x32x4d_ssse3;
+  }
   aom_masked_sad16x8 = aom_masked_sad16x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad16x8 = aom_masked_sad16x8_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad16x8 = aom_masked_sad16x8_avx2;
+  }
   aom_masked_sad16x8x4d = aom_masked_sad16x8x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad16x8x4d = aom_masked_sad16x8x4d_ssse3;
+  }
   aom_masked_sad32x16 = aom_masked_sad32x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad32x16 = aom_masked_sad32x16_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad32x16 = aom_masked_sad32x16_avx2;
+  }
   aom_masked_sad32x16x4d = aom_masked_sad32x16x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad32x16x4d = aom_masked_sad32x16x4d_ssse3;
+  }
   aom_masked_sad32x32 = aom_masked_sad32x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad32x32 = aom_masked_sad32x32_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad32x32 = aom_masked_sad32x32_avx2;
+  }
   aom_masked_sad32x32x4d = aom_masked_sad32x32x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad32x32x4d = aom_masked_sad32x32x4d_ssse3;
+  }
   aom_masked_sad32x64 = aom_masked_sad32x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad32x64 = aom_masked_sad32x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad32x64 = aom_masked_sad32x64_avx2;
+  }
   aom_masked_sad32x64x4d = aom_masked_sad32x64x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad32x64x4d = aom_masked_sad32x64x4d_ssse3;
+  }
   aom_masked_sad4x4 = aom_masked_sad4x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad4x4 = aom_masked_sad4x4_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad4x4 = aom_masked_sad4x4_avx2;
+  }
   aom_masked_sad4x4x4d = aom_masked_sad4x4x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad4x4x4d = aom_masked_sad4x4x4d_ssse3;
+  }
   aom_masked_sad4x8 = aom_masked_sad4x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad4x8 = aom_masked_sad4x8_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad4x8 = aom_masked_sad4x8_avx2;
+  }
   aom_masked_sad4x8x4d = aom_masked_sad4x8x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad4x8x4d = aom_masked_sad4x8x4d_ssse3;
+  }
   aom_masked_sad64x128 = aom_masked_sad64x128_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad64x128 = aom_masked_sad64x128_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad64x128 = aom_masked_sad64x128_avx2;
+  }
   aom_masked_sad64x128x4d = aom_masked_sad64x128x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad64x128x4d = aom_masked_sad64x128x4d_ssse3;
+  }
   aom_masked_sad64x32 = aom_masked_sad64x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad64x32 = aom_masked_sad64x32_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad64x32 = aom_masked_sad64x32_avx2;
+  }
   aom_masked_sad64x32x4d = aom_masked_sad64x32x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad64x32x4d = aom_masked_sad64x32x4d_ssse3;
+  }
   aom_masked_sad64x64 = aom_masked_sad64x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad64x64 = aom_masked_sad64x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad64x64 = aom_masked_sad64x64_avx2;
+  }
   aom_masked_sad64x64x4d = aom_masked_sad64x64x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad64x64x4d = aom_masked_sad64x64x4d_ssse3;
+  }
   aom_masked_sad8x16 = aom_masked_sad8x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad8x16 = aom_masked_sad8x16_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad8x16 = aom_masked_sad8x16_avx2;
+  }
   aom_masked_sad8x16x4d = aom_masked_sad8x16x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad8x16x4d = aom_masked_sad8x16x4d_ssse3;
+  }
   aom_masked_sad8x4 = aom_masked_sad8x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad8x4 = aom_masked_sad8x4_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad8x4 = aom_masked_sad8x4_avx2;
+  }
   aom_masked_sad8x4x4d = aom_masked_sad8x4x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad8x4x4d = aom_masked_sad8x4x4d_ssse3;
+  }
   aom_masked_sad8x8 = aom_masked_sad8x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad8x8 = aom_masked_sad8x8_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad8x8 = aom_masked_sad8x8_avx2;
+  }
   aom_masked_sad8x8x4d = aom_masked_sad8x8x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad8x8x4d = aom_masked_sad8x8x4d_ssse3;
+  }
   aom_masked_sub_pixel_variance128x128 = aom_masked_sub_pixel_variance128x128_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance128x128 =
         aom_masked_sub_pixel_variance128x128_ssse3;
+  }
   aom_masked_sub_pixel_variance128x64 = aom_masked_sub_pixel_variance128x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance128x64 =
         aom_masked_sub_pixel_variance128x64_ssse3;
+  }
   aom_masked_sub_pixel_variance16x16 = aom_masked_sub_pixel_variance16x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance16x16 =
         aom_masked_sub_pixel_variance16x16_ssse3;
+  }
   aom_masked_sub_pixel_variance16x32 = aom_masked_sub_pixel_variance16x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance16x32 =
         aom_masked_sub_pixel_variance16x32_ssse3;
+  }
   aom_masked_sub_pixel_variance16x8 = aom_masked_sub_pixel_variance16x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance16x8 = aom_masked_sub_pixel_variance16x8_ssse3;
+  }
   aom_masked_sub_pixel_variance32x16 = aom_masked_sub_pixel_variance32x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance32x16 =
         aom_masked_sub_pixel_variance32x16_ssse3;
+  }
   aom_masked_sub_pixel_variance32x32 = aom_masked_sub_pixel_variance32x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance32x32 =
         aom_masked_sub_pixel_variance32x32_ssse3;
+  }
   aom_masked_sub_pixel_variance32x64 = aom_masked_sub_pixel_variance32x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance32x64 =
         aom_masked_sub_pixel_variance32x64_ssse3;
+  }
   aom_masked_sub_pixel_variance4x4 = aom_masked_sub_pixel_variance4x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance4x4 = aom_masked_sub_pixel_variance4x4_ssse3;
+  }
   aom_masked_sub_pixel_variance4x8 = aom_masked_sub_pixel_variance4x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance4x8 = aom_masked_sub_pixel_variance4x8_ssse3;
+  }
   aom_masked_sub_pixel_variance64x128 = aom_masked_sub_pixel_variance64x128_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance64x128 =
         aom_masked_sub_pixel_variance64x128_ssse3;
+  }
   aom_masked_sub_pixel_variance64x32 = aom_masked_sub_pixel_variance64x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance64x32 =
         aom_masked_sub_pixel_variance64x32_ssse3;
+  }
   aom_masked_sub_pixel_variance64x64 = aom_masked_sub_pixel_variance64x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance64x64 =
         aom_masked_sub_pixel_variance64x64_ssse3;
+  }
   aom_masked_sub_pixel_variance8x16 = aom_masked_sub_pixel_variance8x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance8x16 = aom_masked_sub_pixel_variance8x16_ssse3;
+  }
   aom_masked_sub_pixel_variance8x4 = aom_masked_sub_pixel_variance8x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance8x4 = aom_masked_sub_pixel_variance8x4_ssse3;
+  }
   aom_masked_sub_pixel_variance8x8 = aom_masked_sub_pixel_variance8x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance8x8 = aom_masked_sub_pixel_variance8x8_ssse3;
+  }
   aom_mse16x16 = aom_mse16x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_mse16x16 = aom_mse16x16_avx2;
-  aom_mse_16xh_16bit = aom_mse_16xh_16bit_c;
-  if (flags & HAS_AVX2)
+  }
+  aom_mse_16xh_16bit = aom_mse_16xh_16bit_sse2;
+  if (flags & HAS_AVX2) {
     aom_mse_16xh_16bit = aom_mse_16xh_16bit_avx2;
+  }
   aom_mse_wxh_16bit = aom_mse_wxh_16bit_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_mse_wxh_16bit = aom_mse_wxh_16bit_avx2;
+  }
   aom_paeth_predictor_16x16 = aom_paeth_predictor_16x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_16x16 = aom_paeth_predictor_16x16_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_paeth_predictor_16x16 = aom_paeth_predictor_16x16_avx2;
+  }
   aom_paeth_predictor_16x32 = aom_paeth_predictor_16x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_16x32 = aom_paeth_predictor_16x32_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_paeth_predictor_16x32 = aom_paeth_predictor_16x32_avx2;
+  }
   aom_paeth_predictor_16x4 = aom_paeth_predictor_16x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_16x4 = aom_paeth_predictor_16x4_ssse3;
+  }
   aom_paeth_predictor_16x64 = aom_paeth_predictor_16x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_16x64 = aom_paeth_predictor_16x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_paeth_predictor_16x64 = aom_paeth_predictor_16x64_avx2;
+  }
   aom_paeth_predictor_16x8 = aom_paeth_predictor_16x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_16x8 = aom_paeth_predictor_16x8_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_paeth_predictor_16x8 = aom_paeth_predictor_16x8_avx2;
+  }
   aom_paeth_predictor_32x16 = aom_paeth_predictor_32x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_32x16 = aom_paeth_predictor_32x16_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_paeth_predictor_32x16 = aom_paeth_predictor_32x16_avx2;
+  }
   aom_paeth_predictor_32x32 = aom_paeth_predictor_32x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_32x32 = aom_paeth_predictor_32x32_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_paeth_predictor_32x32 = aom_paeth_predictor_32x32_avx2;
+  }
   aom_paeth_predictor_32x64 = aom_paeth_predictor_32x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_32x64 = aom_paeth_predictor_32x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_paeth_predictor_32x64 = aom_paeth_predictor_32x64_avx2;
+  }
   aom_paeth_predictor_32x8 = aom_paeth_predictor_32x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_32x8 = aom_paeth_predictor_32x8_ssse3;
+  }
   aom_paeth_predictor_4x16 = aom_paeth_predictor_4x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_4x16 = aom_paeth_predictor_4x16_ssse3;
+  }
   aom_paeth_predictor_4x4 = aom_paeth_predictor_4x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_4x4 = aom_paeth_predictor_4x4_ssse3;
+  }
   aom_paeth_predictor_4x8 = aom_paeth_predictor_4x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_4x8 = aom_paeth_predictor_4x8_ssse3;
+  }
   aom_paeth_predictor_64x16 = aom_paeth_predictor_64x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_64x16 = aom_paeth_predictor_64x16_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_paeth_predictor_64x16 = aom_paeth_predictor_64x16_avx2;
+  }
   aom_paeth_predictor_64x32 = aom_paeth_predictor_64x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_64x32 = aom_paeth_predictor_64x32_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_paeth_predictor_64x32 = aom_paeth_predictor_64x32_avx2;
+  }
   aom_paeth_predictor_64x64 = aom_paeth_predictor_64x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_64x64 = aom_paeth_predictor_64x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_paeth_predictor_64x64 = aom_paeth_predictor_64x64_avx2;
+  }
   aom_paeth_predictor_8x16 = aom_paeth_predictor_8x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_8x16 = aom_paeth_predictor_8x16_ssse3;
+  }
   aom_paeth_predictor_8x32 = aom_paeth_predictor_8x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_8x32 = aom_paeth_predictor_8x32_ssse3;
+  }
   aom_paeth_predictor_8x4 = aom_paeth_predictor_8x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_8x4 = aom_paeth_predictor_8x4_ssse3;
+  }
   aom_paeth_predictor_8x8 = aom_paeth_predictor_8x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_8x8 = aom_paeth_predictor_8x8_ssse3;
+  }
   aom_quantize_b = aom_quantize_b_sse2;
-  if (flags & HAS_AVX)
+  if (flags & HAS_AVX) {
     aom_quantize_b = aom_quantize_b_avx;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_quantize_b = aom_quantize_b_avx2;
+  }
   aom_quantize_b_32x32 = aom_quantize_b_32x32_c;
-  if (flags & HAS_AVX)
+  if (flags & HAS_AVX) {
     aom_quantize_b_32x32 = aom_quantize_b_32x32_avx;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_quantize_b_32x32 = aom_quantize_b_32x32_avx2;
+  }
   aom_quantize_b_64x64 = aom_quantize_b_64x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_quantize_b_64x64 = aom_quantize_b_64x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_quantize_b_64x64 = aom_quantize_b_64x64_avx2;
+  }
   aom_sad128x128 = aom_sad128x128_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad128x128 = aom_sad128x128_avx2;
+  }
   aom_sad128x128_avg = aom_sad128x128_avg_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad128x128_avg = aom_sad128x128_avg_avx2;
+  }
+  aom_sad128x128x3d = aom_sad128x128x3d_c;
+  if (flags & HAS_AVX2) {
+    aom_sad128x128x3d = aom_sad128x128x3d_avx2;
+  }
   aom_sad128x128x4d = aom_sad128x128x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad128x128x4d = aom_sad128x128x4d_avx2;
+  }
   aom_sad128x64 = aom_sad128x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad128x64 = aom_sad128x64_avx2;
+  }
   aom_sad128x64_avg = aom_sad128x64_avg_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad128x64_avg = aom_sad128x64_avg_avx2;
+  }
+  aom_sad128x64x3d = aom_sad128x64x3d_c;
+  if (flags & HAS_AVX2) {
+    aom_sad128x64x3d = aom_sad128x64x3d_avx2;
+  }
   aom_sad128x64x4d = aom_sad128x64x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad128x64x4d = aom_sad128x64x4d_avx2;
+  }
+  aom_sad16x16x3d = aom_sad16x16x3d_c;
+  if (flags & HAS_AVX2) {
+    aom_sad16x16x3d = aom_sad16x16x3d_avx2;
+  }
+  aom_sad16x16x4d = aom_sad16x16x4d_sse2;
+  if (flags & HAS_AVX2) {
+    aom_sad16x16x4d = aom_sad16x16x4d_avx2;
+  }
+  aom_sad16x32x3d = aom_sad16x32x3d_c;
+  if (flags & HAS_AVX2) {
+    aom_sad16x32x3d = aom_sad16x32x3d_avx2;
+  }
+  aom_sad16x32x4d = aom_sad16x32x4d_sse2;
+  if (flags & HAS_AVX2) {
+    aom_sad16x32x4d = aom_sad16x32x4d_avx2;
+  }
+  aom_sad16x8x3d = aom_sad16x8x3d_c;
+  if (flags & HAS_AVX2) {
+    aom_sad16x8x3d = aom_sad16x8x3d_avx2;
+  }
+  aom_sad16x8x4d = aom_sad16x8x4d_sse2;
+  if (flags & HAS_AVX2) {
+    aom_sad16x8x4d = aom_sad16x8x4d_avx2;
+  }
   aom_sad32x16 = aom_sad32x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad32x16 = aom_sad32x16_avx2;
+  }
   aom_sad32x16_avg = aom_sad32x16_avg_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad32x16_avg = aom_sad32x16_avg_avx2;
+  }
+  aom_sad32x16x3d = aom_sad32x16x3d_c;
+  if (flags & HAS_AVX2) {
+    aom_sad32x16x3d = aom_sad32x16x3d_avx2;
+  }
   aom_sad32x16x4d = aom_sad32x16x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad32x16x4d = aom_sad32x16x4d_avx2;
+  }
   aom_sad32x32 = aom_sad32x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad32x32 = aom_sad32x32_avx2;
+  }
   aom_sad32x32_avg = aom_sad32x32_avg_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad32x32_avg = aom_sad32x32_avg_avx2;
+  }
+  aom_sad32x32x3d = aom_sad32x32x3d_c;
+  if (flags & HAS_AVX2) {
+    aom_sad32x32x3d = aom_sad32x32x3d_avx2;
+  }
   aom_sad32x32x4d = aom_sad32x32x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad32x32x4d = aom_sad32x32x4d_avx2;
+  }
   aom_sad32x64 = aom_sad32x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad32x64 = aom_sad32x64_avx2;
+  }
   aom_sad32x64_avg = aom_sad32x64_avg_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad32x64_avg = aom_sad32x64_avg_avx2;
+  }
+  aom_sad32x64x3d = aom_sad32x64x3d_c;
+  if (flags & HAS_AVX2) {
+    aom_sad32x64x3d = aom_sad32x64x3d_avx2;
+  }
   aom_sad32x64x4d = aom_sad32x64x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad32x64x4d = aom_sad32x64x4d_avx2;
+  }
   aom_sad64x128 = aom_sad64x128_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad64x128 = aom_sad64x128_avx2;
+  }
   aom_sad64x128_avg = aom_sad64x128_avg_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad64x128_avg = aom_sad64x128_avg_avx2;
+  }
+  aom_sad64x128x3d = aom_sad64x128x3d_c;
+  if (flags & HAS_AVX2) {
+    aom_sad64x128x3d = aom_sad64x128x3d_avx2;
+  }
   aom_sad64x128x4d = aom_sad64x128x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad64x128x4d = aom_sad64x128x4d_avx2;
+  }
   aom_sad64x32 = aom_sad64x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad64x32 = aom_sad64x32_avx2;
+  }
   aom_sad64x32_avg = aom_sad64x32_avg_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad64x32_avg = aom_sad64x32_avg_avx2;
+  }
+  aom_sad64x32x3d = aom_sad64x32x3d_c;
+  if (flags & HAS_AVX2) {
+    aom_sad64x32x3d = aom_sad64x32x3d_avx2;
+  }
   aom_sad64x32x4d = aom_sad64x32x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad64x32x4d = aom_sad64x32x4d_avx2;
+  }
   aom_sad64x64 = aom_sad64x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad64x64 = aom_sad64x64_avx2;
+  }
   aom_sad64x64_avg = aom_sad64x64_avg_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad64x64_avg = aom_sad64x64_avg_avx2;
+  }
+  aom_sad64x64x3d = aom_sad64x64x3d_c;
+  if (flags & HAS_AVX2) {
+    aom_sad64x64x3d = aom_sad64x64x3d_avx2;
+  }
   aom_sad64x64x4d = aom_sad64x64x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad64x64x4d = aom_sad64x64x4d_avx2;
+  }
   aom_sad_skip_128x128 = aom_sad_skip_128x128_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_128x128 = aom_sad_skip_128x128_avx2;
+  }
   aom_sad_skip_128x128x4d = aom_sad_skip_128x128x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_128x128x4d = aom_sad_skip_128x128x4d_avx2;
+  }
   aom_sad_skip_128x64 = aom_sad_skip_128x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_128x64 = aom_sad_skip_128x64_avx2;
+  }
   aom_sad_skip_128x64x4d = aom_sad_skip_128x64x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_128x64x4d = aom_sad_skip_128x64x4d_avx2;
+  }
+  aom_sad_skip_16x16x4d = aom_sad_skip_16x16x4d_sse2;
+  if (flags & HAS_AVX2) {
+    aom_sad_skip_16x16x4d = aom_sad_skip_16x16x4d_avx2;
+  }
+  aom_sad_skip_16x32x4d = aom_sad_skip_16x32x4d_sse2;
+  if (flags & HAS_AVX2) {
+    aom_sad_skip_16x32x4d = aom_sad_skip_16x32x4d_avx2;
+  }
+  aom_sad_skip_16x8x4d = aom_sad_skip_16x8x4d_sse2;
+  if (flags & HAS_AVX2) {
+    aom_sad_skip_16x8x4d = aom_sad_skip_16x8x4d_avx2;
+  }
   aom_sad_skip_32x16 = aom_sad_skip_32x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_32x16 = aom_sad_skip_32x16_avx2;
+  }
   aom_sad_skip_32x16x4d = aom_sad_skip_32x16x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_32x16x4d = aom_sad_skip_32x16x4d_avx2;
+  }
   aom_sad_skip_32x32 = aom_sad_skip_32x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_32x32 = aom_sad_skip_32x32_avx2;
+  }
   aom_sad_skip_32x32x4d = aom_sad_skip_32x32x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_32x32x4d = aom_sad_skip_32x32x4d_avx2;
+  }
   aom_sad_skip_32x64 = aom_sad_skip_32x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_32x64 = aom_sad_skip_32x64_avx2;
+  }
   aom_sad_skip_32x64x4d = aom_sad_skip_32x64x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_32x64x4d = aom_sad_skip_32x64x4d_avx2;
+  }
   aom_sad_skip_64x128 = aom_sad_skip_64x128_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_64x128 = aom_sad_skip_64x128_avx2;
+  }
   aom_sad_skip_64x128x4d = aom_sad_skip_64x128x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_64x128x4d = aom_sad_skip_64x128x4d_avx2;
+  }
   aom_sad_skip_64x32 = aom_sad_skip_64x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_64x32 = aom_sad_skip_64x32_avx2;
+  }
   aom_sad_skip_64x32x4d = aom_sad_skip_64x32x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_64x32x4d = aom_sad_skip_64x32x4d_avx2;
+  }
   aom_sad_skip_64x64 = aom_sad_skip_64x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_64x64 = aom_sad_skip_64x64_avx2;
+  }
   aom_sad_skip_64x64x4d = aom_sad_skip_64x64x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_64x64x4d = aom_sad_skip_64x64x4d_avx2;
+  }
   aom_satd = aom_satd_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_satd = aom_satd_avx2;
+  }
   aom_satd_lp = aom_satd_lp_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_satd_lp = aom_satd_lp_avx2;
+  }
   aom_scaled_2d = aom_scaled_2d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_scaled_2d = aom_scaled_2d_ssse3;
+  }
   aom_smooth_h_predictor_16x16 = aom_smooth_h_predictor_16x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_16x16 = aom_smooth_h_predictor_16x16_ssse3;
+  }
   aom_smooth_h_predictor_16x32 = aom_smooth_h_predictor_16x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_16x32 = aom_smooth_h_predictor_16x32_ssse3;
+  }
   aom_smooth_h_predictor_16x4 = aom_smooth_h_predictor_16x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_16x4 = aom_smooth_h_predictor_16x4_ssse3;
+  }
   aom_smooth_h_predictor_16x64 = aom_smooth_h_predictor_16x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_16x64 = aom_smooth_h_predictor_16x64_ssse3;
+  }
   aom_smooth_h_predictor_16x8 = aom_smooth_h_predictor_16x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_16x8 = aom_smooth_h_predictor_16x8_ssse3;
+  }
   aom_smooth_h_predictor_32x16 = aom_smooth_h_predictor_32x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_32x16 = aom_smooth_h_predictor_32x16_ssse3;
+  }
   aom_smooth_h_predictor_32x32 = aom_smooth_h_predictor_32x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_32x32 = aom_smooth_h_predictor_32x32_ssse3;
+  }
   aom_smooth_h_predictor_32x64 = aom_smooth_h_predictor_32x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_32x64 = aom_smooth_h_predictor_32x64_ssse3;
+  }
   aom_smooth_h_predictor_32x8 = aom_smooth_h_predictor_32x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_32x8 = aom_smooth_h_predictor_32x8_ssse3;
+  }
   aom_smooth_h_predictor_4x16 = aom_smooth_h_predictor_4x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_4x16 = aom_smooth_h_predictor_4x16_ssse3;
+  }
   aom_smooth_h_predictor_4x4 = aom_smooth_h_predictor_4x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_4x4 = aom_smooth_h_predictor_4x4_ssse3;
+  }
   aom_smooth_h_predictor_4x8 = aom_smooth_h_predictor_4x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_4x8 = aom_smooth_h_predictor_4x8_ssse3;
+  }
   aom_smooth_h_predictor_64x16 = aom_smooth_h_predictor_64x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_64x16 = aom_smooth_h_predictor_64x16_ssse3;
+  }
   aom_smooth_h_predictor_64x32 = aom_smooth_h_predictor_64x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_64x32 = aom_smooth_h_predictor_64x32_ssse3;
+  }
   aom_smooth_h_predictor_64x64 = aom_smooth_h_predictor_64x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_64x64 = aom_smooth_h_predictor_64x64_ssse3;
+  }
   aom_smooth_h_predictor_8x16 = aom_smooth_h_predictor_8x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_8x16 = aom_smooth_h_predictor_8x16_ssse3;
+  }
   aom_smooth_h_predictor_8x32 = aom_smooth_h_predictor_8x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_8x32 = aom_smooth_h_predictor_8x32_ssse3;
+  }
   aom_smooth_h_predictor_8x4 = aom_smooth_h_predictor_8x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_8x4 = aom_smooth_h_predictor_8x4_ssse3;
+  }
   aom_smooth_h_predictor_8x8 = aom_smooth_h_predictor_8x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_8x8 = aom_smooth_h_predictor_8x8_ssse3;
+  }
   aom_smooth_predictor_16x16 = aom_smooth_predictor_16x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_16x16 = aom_smooth_predictor_16x16_ssse3;
+  }
   aom_smooth_predictor_16x32 = aom_smooth_predictor_16x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_16x32 = aom_smooth_predictor_16x32_ssse3;
+  }
   aom_smooth_predictor_16x4 = aom_smooth_predictor_16x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_16x4 = aom_smooth_predictor_16x4_ssse3;
+  }
   aom_smooth_predictor_16x64 = aom_smooth_predictor_16x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_16x64 = aom_smooth_predictor_16x64_ssse3;
+  }
   aom_smooth_predictor_16x8 = aom_smooth_predictor_16x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_16x8 = aom_smooth_predictor_16x8_ssse3;
+  }
   aom_smooth_predictor_32x16 = aom_smooth_predictor_32x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_32x16 = aom_smooth_predictor_32x16_ssse3;
+  }
   aom_smooth_predictor_32x32 = aom_smooth_predictor_32x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_32x32 = aom_smooth_predictor_32x32_ssse3;
+  }
   aom_smooth_predictor_32x64 = aom_smooth_predictor_32x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_32x64 = aom_smooth_predictor_32x64_ssse3;
+  }
   aom_smooth_predictor_32x8 = aom_smooth_predictor_32x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_32x8 = aom_smooth_predictor_32x8_ssse3;
+  }
   aom_smooth_predictor_4x16 = aom_smooth_predictor_4x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_4x16 = aom_smooth_predictor_4x16_ssse3;
+  }
   aom_smooth_predictor_4x4 = aom_smooth_predictor_4x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_4x4 = aom_smooth_predictor_4x4_ssse3;
+  }
   aom_smooth_predictor_4x8 = aom_smooth_predictor_4x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_4x8 = aom_smooth_predictor_4x8_ssse3;
+  }
   aom_smooth_predictor_64x16 = aom_smooth_predictor_64x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_64x16 = aom_smooth_predictor_64x16_ssse3;
+  }
   aom_smooth_predictor_64x32 = aom_smooth_predictor_64x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_64x32 = aom_smooth_predictor_64x32_ssse3;
+  }
   aom_smooth_predictor_64x64 = aom_smooth_predictor_64x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_64x64 = aom_smooth_predictor_64x64_ssse3;
+  }
   aom_smooth_predictor_8x16 = aom_smooth_predictor_8x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_8x16 = aom_smooth_predictor_8x16_ssse3;
+  }
   aom_smooth_predictor_8x32 = aom_smooth_predictor_8x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_8x32 = aom_smooth_predictor_8x32_ssse3;
+  }
   aom_smooth_predictor_8x4 = aom_smooth_predictor_8x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_8x4 = aom_smooth_predictor_8x4_ssse3;
+  }
   aom_smooth_predictor_8x8 = aom_smooth_predictor_8x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_8x8 = aom_smooth_predictor_8x8_ssse3;
+  }
   aom_smooth_v_predictor_16x16 = aom_smooth_v_predictor_16x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_16x16 = aom_smooth_v_predictor_16x16_ssse3;
+  }
   aom_smooth_v_predictor_16x32 = aom_smooth_v_predictor_16x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_16x32 = aom_smooth_v_predictor_16x32_ssse3;
+  }
   aom_smooth_v_predictor_16x4 = aom_smooth_v_predictor_16x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_16x4 = aom_smooth_v_predictor_16x4_ssse3;
+  }
   aom_smooth_v_predictor_16x64 = aom_smooth_v_predictor_16x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_16x64 = aom_smooth_v_predictor_16x64_ssse3;
+  }
   aom_smooth_v_predictor_16x8 = aom_smooth_v_predictor_16x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_16x8 = aom_smooth_v_predictor_16x8_ssse3;
+  }
   aom_smooth_v_predictor_32x16 = aom_smooth_v_predictor_32x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_32x16 = aom_smooth_v_predictor_32x16_ssse3;
+  }
   aom_smooth_v_predictor_32x32 = aom_smooth_v_predictor_32x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_32x32 = aom_smooth_v_predictor_32x32_ssse3;
+  }
   aom_smooth_v_predictor_32x64 = aom_smooth_v_predictor_32x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_32x64 = aom_smooth_v_predictor_32x64_ssse3;
+  }
   aom_smooth_v_predictor_32x8 = aom_smooth_v_predictor_32x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_32x8 = aom_smooth_v_predictor_32x8_ssse3;
+  }
   aom_smooth_v_predictor_4x16 = aom_smooth_v_predictor_4x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_4x16 = aom_smooth_v_predictor_4x16_ssse3;
+  }
   aom_smooth_v_predictor_4x4 = aom_smooth_v_predictor_4x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_4x4 = aom_smooth_v_predictor_4x4_ssse3;
+  }
   aom_smooth_v_predictor_4x8 = aom_smooth_v_predictor_4x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_4x8 = aom_smooth_v_predictor_4x8_ssse3;
+  }
   aom_smooth_v_predictor_64x16 = aom_smooth_v_predictor_64x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_64x16 = aom_smooth_v_predictor_64x16_ssse3;
+  }
   aom_smooth_v_predictor_64x32 = aom_smooth_v_predictor_64x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_64x32 = aom_smooth_v_predictor_64x32_ssse3;
+  }
   aom_smooth_v_predictor_64x64 = aom_smooth_v_predictor_64x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_64x64 = aom_smooth_v_predictor_64x64_ssse3;
+  }
   aom_smooth_v_predictor_8x16 = aom_smooth_v_predictor_8x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_8x16 = aom_smooth_v_predictor_8x16_ssse3;
+  }
   aom_smooth_v_predictor_8x32 = aom_smooth_v_predictor_8x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_8x32 = aom_smooth_v_predictor_8x32_ssse3;
+  }
   aom_smooth_v_predictor_8x4 = aom_smooth_v_predictor_8x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_8x4 = aom_smooth_v_predictor_8x4_ssse3;
+  }
   aom_smooth_v_predictor_8x8 = aom_smooth_v_predictor_8x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_8x8 = aom_smooth_v_predictor_8x8_ssse3;
+  }
   aom_sse = aom_sse_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     aom_sse = aom_sse_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sse = aom_sse_avx2;
+  }
   aom_sub_pixel_avg_variance128x128 = aom_sub_pixel_avg_variance128x128_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance128x128 = aom_sub_pixel_avg_variance128x128_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_avg_variance128x128 = aom_sub_pixel_avg_variance128x128_avx2;
+  }
   aom_sub_pixel_avg_variance128x64 = aom_sub_pixel_avg_variance128x64_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance128x64 = aom_sub_pixel_avg_variance128x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_avg_variance128x64 = aom_sub_pixel_avg_variance128x64_avx2;
+  }
   aom_sub_pixel_avg_variance16x16 = aom_sub_pixel_avg_variance16x16_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance16x16 = aom_sub_pixel_avg_variance16x16_ssse3;
+  }
   aom_sub_pixel_avg_variance16x32 = aom_sub_pixel_avg_variance16x32_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance16x32 = aom_sub_pixel_avg_variance16x32_ssse3;
+  }
   aom_sub_pixel_avg_variance16x8 = aom_sub_pixel_avg_variance16x8_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance16x8 = aom_sub_pixel_avg_variance16x8_ssse3;
+  }
   aom_sub_pixel_avg_variance32x16 = aom_sub_pixel_avg_variance32x16_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance32x16 = aom_sub_pixel_avg_variance32x16_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_avg_variance32x16 = aom_sub_pixel_avg_variance32x16_avx2;
+  }
   aom_sub_pixel_avg_variance32x32 = aom_sub_pixel_avg_variance32x32_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance32x32 = aom_sub_pixel_avg_variance32x32_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_avg_variance32x32 = aom_sub_pixel_avg_variance32x32_avx2;
+  }
   aom_sub_pixel_avg_variance32x64 = aom_sub_pixel_avg_variance32x64_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance32x64 = aom_sub_pixel_avg_variance32x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_avg_variance32x64 = aom_sub_pixel_avg_variance32x64_avx2;
+  }
   aom_sub_pixel_avg_variance4x4 = aom_sub_pixel_avg_variance4x4_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance4x4 = aom_sub_pixel_avg_variance4x4_ssse3;
+  }
   aom_sub_pixel_avg_variance4x8 = aom_sub_pixel_avg_variance4x8_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance4x8 = aom_sub_pixel_avg_variance4x8_ssse3;
+  }
   aom_sub_pixel_avg_variance64x128 = aom_sub_pixel_avg_variance64x128_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance64x128 = aom_sub_pixel_avg_variance64x128_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_avg_variance64x128 = aom_sub_pixel_avg_variance64x128_avx2;
+  }
   aom_sub_pixel_avg_variance64x32 = aom_sub_pixel_avg_variance64x32_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance64x32 = aom_sub_pixel_avg_variance64x32_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_avg_variance64x32 = aom_sub_pixel_avg_variance64x32_avx2;
+  }
   aom_sub_pixel_avg_variance64x64 = aom_sub_pixel_avg_variance64x64_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance64x64 = aom_sub_pixel_avg_variance64x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_avg_variance64x64 = aom_sub_pixel_avg_variance64x64_avx2;
+  }
   aom_sub_pixel_avg_variance8x16 = aom_sub_pixel_avg_variance8x16_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance8x16 = aom_sub_pixel_avg_variance8x16_ssse3;
+  }
   aom_sub_pixel_avg_variance8x4 = aom_sub_pixel_avg_variance8x4_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance8x4 = aom_sub_pixel_avg_variance8x4_ssse3;
+  }
   aom_sub_pixel_avg_variance8x8 = aom_sub_pixel_avg_variance8x8_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance8x8 = aom_sub_pixel_avg_variance8x8_ssse3;
+  }
   aom_sub_pixel_variance128x128 = aom_sub_pixel_variance128x128_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance128x128 = aom_sub_pixel_variance128x128_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_variance128x128 = aom_sub_pixel_variance128x128_avx2;
+  }
   aom_sub_pixel_variance128x64 = aom_sub_pixel_variance128x64_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance128x64 = aom_sub_pixel_variance128x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_variance128x64 = aom_sub_pixel_variance128x64_avx2;
+  }
   aom_sub_pixel_variance16x16 = aom_sub_pixel_variance16x16_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance16x16 = aom_sub_pixel_variance16x16_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_variance16x16 = aom_sub_pixel_variance16x16_avx2;
+  }
   aom_sub_pixel_variance16x32 = aom_sub_pixel_variance16x32_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance16x32 = aom_sub_pixel_variance16x32_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_variance16x32 = aom_sub_pixel_variance16x32_avx2;
+  }
   aom_sub_pixel_variance16x8 = aom_sub_pixel_variance16x8_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance16x8 = aom_sub_pixel_variance16x8_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_variance16x8 = aom_sub_pixel_variance16x8_avx2;
+  }
   aom_sub_pixel_variance32x16 = aom_sub_pixel_variance32x16_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance32x16 = aom_sub_pixel_variance32x16_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_variance32x16 = aom_sub_pixel_variance32x16_avx2;
+  }
   aom_sub_pixel_variance32x32 = aom_sub_pixel_variance32x32_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance32x32 = aom_sub_pixel_variance32x32_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_variance32x32 = aom_sub_pixel_variance32x32_avx2;
+  }
   aom_sub_pixel_variance32x64 = aom_sub_pixel_variance32x64_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance32x64 = aom_sub_pixel_variance32x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_variance32x64 = aom_sub_pixel_variance32x64_avx2;
+  }
   aom_sub_pixel_variance4x4 = aom_sub_pixel_variance4x4_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance4x4 = aom_sub_pixel_variance4x4_ssse3;
+  }
   aom_sub_pixel_variance4x8 = aom_sub_pixel_variance4x8_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance4x8 = aom_sub_pixel_variance4x8_ssse3;
+  }
   aom_sub_pixel_variance64x128 = aom_sub_pixel_variance64x128_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance64x128 = aom_sub_pixel_variance64x128_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_variance64x128 = aom_sub_pixel_variance64x128_avx2;
+  }
   aom_sub_pixel_variance64x32 = aom_sub_pixel_variance64x32_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance64x32 = aom_sub_pixel_variance64x32_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_variance64x32 = aom_sub_pixel_variance64x32_avx2;
+  }
   aom_sub_pixel_variance64x64 = aom_sub_pixel_variance64x64_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance64x64 = aom_sub_pixel_variance64x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_variance64x64 = aom_sub_pixel_variance64x64_avx2;
+  }
   aom_sub_pixel_variance8x16 = aom_sub_pixel_variance8x16_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance8x16 = aom_sub_pixel_variance8x16_ssse3;
+  }
   aom_sub_pixel_variance8x4 = aom_sub_pixel_variance8x4_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance8x4 = aom_sub_pixel_variance8x4_ssse3;
+  }
   aom_sub_pixel_variance8x8 = aom_sub_pixel_variance8x8_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance8x8 = aom_sub_pixel_variance8x8_ssse3;
+  }
   aom_subtract_block = aom_subtract_block_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_subtract_block = aom_subtract_block_avx2;
+  }
   aom_sum_squares_2d_i16 = aom_sum_squares_2d_i16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sum_squares_2d_i16 = aom_sum_squares_2d_i16_avx2;
+  }
   aom_sum_sse_2d_i16 = aom_sum_sse_2d_i16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sum_sse_2d_i16 = aom_sum_sse_2d_i16_avx2;
+  }
   aom_v_predictor_32x16 = aom_v_predictor_32x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_v_predictor_32x16 = aom_v_predictor_32x16_avx2;
+  }
   aom_v_predictor_32x32 = aom_v_predictor_32x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_v_predictor_32x32 = aom_v_predictor_32x32_avx2;
+  }
   aom_v_predictor_32x64 = aom_v_predictor_32x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_v_predictor_32x64 = aom_v_predictor_32x64_avx2;
+  }
   aom_v_predictor_64x16 = aom_v_predictor_64x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_v_predictor_64x16 = aom_v_predictor_64x16_avx2;
+  }
   aom_v_predictor_64x32 = aom_v_predictor_64x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_v_predictor_64x32 = aom_v_predictor_64x32_avx2;
+  }
   aom_v_predictor_64x64 = aom_v_predictor_64x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_v_predictor_64x64 = aom_v_predictor_64x64_avx2;
+  }
   aom_var_2d_u16 = aom_var_2d_u16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_var_2d_u16 = aom_var_2d_u16_avx2;
+  }
   aom_var_2d_u8 = aom_var_2d_u8_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_var_2d_u8 = aom_var_2d_u8_avx2;
+  }
   aom_variance128x128 = aom_variance128x128_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_variance128x128 = aom_variance128x128_avx2;
+  }
   aom_variance128x64 = aom_variance128x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_variance128x64 = aom_variance128x64_avx2;
+  }
   aom_variance16x16 = aom_variance16x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_variance16x16 = aom_variance16x16_avx2;
+  }
   aom_variance16x32 = aom_variance16x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_variance16x32 = aom_variance16x32_avx2;
+  }
   aom_variance16x8 = aom_variance16x8_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_variance16x8 = aom_variance16x8_avx2;
+  }
   aom_variance32x16 = aom_variance32x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_variance32x16 = aom_variance32x16_avx2;
+  }
   aom_variance32x32 = aom_variance32x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_variance32x32 = aom_variance32x32_avx2;
+  }
   aom_variance32x64 = aom_variance32x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_variance32x64 = aom_variance32x64_avx2;
+  }
   aom_variance64x128 = aom_variance64x128_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_variance64x128 = aom_variance64x128_avx2;
+  }
   aom_variance64x32 = aom_variance64x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_variance64x32 = aom_variance64x32_avx2;
+  }
   aom_variance64x64 = aom_variance64x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_variance64x64 = aom_variance64x64_avx2;
+  }
   aom_vector_var = aom_vector_var_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     aom_vector_var = aom_vector_var_sse4_1;
+  }
+  if (flags & HAS_AVX2) {
+    aom_vector_var = aom_vector_var_avx2;
+  }
 }
 #endif
 
diff --git a/libaom/source/config/linux/ia32/config/aom_scale_rtcd.h b/libaom/source/config/linux/ia32/config/aom_scale_rtcd.h
index 5e6c033..ccd7baa 100644
--- a/libaom/source/config/linux/ia32/config/aom_scale_rtcd.h
+++ b/libaom/source/config/linux/ia32/config/aom_scale_rtcd.h
@@ -155,6 +155,7 @@ void aom_yv12_partial_copy_y_c(const struct yv12_buffer_config* src_ybc,
 int aom_yv12_realloc_with_new_border_c(struct yv12_buffer_config* ybf,
                                        int new_border,
                                        int byte_alignment,
+                                       int num_pyramid_levels,
                                        int num_planes);
 #define aom_yv12_realloc_with_new_border aom_yv12_realloc_with_new_border_c
 
diff --git a/libaom/source/config/linux/ia32/config/av1_rtcd.h b/libaom/source/config/linux/ia32/config/av1_rtcd.h
index 6d8a64d..05aae12 100644
--- a/libaom/source/config/linux/ia32/config/av1_rtcd.h
+++ b/libaom/source/config/linux/ia32/config/av1_rtcd.h
@@ -417,76 +417,56 @@ RTCD_EXTERN int64_t (*av1_calc_frame_error)(const uint8_t* const ref,
                                             int p_height,
                                             int p_stride);
 
-void av1_calc_indices_dim1_c(const int* data,
-                             const int* centroids,
+void av1_calc_indices_dim1_c(const int16_t* data,
+                             const int16_t* centroids,
                              uint8_t* indices,
+                             int64_t* total_dist,
                              int n,
                              int k);
-void av1_calc_indices_dim1_sse2(const int* data,
-                                const int* centroids,
+void av1_calc_indices_dim1_sse2(const int16_t* data,
+                                const int16_t* centroids,
                                 uint8_t* indices,
+                                int64_t* total_dist,
                                 int n,
                                 int k);
-void av1_calc_indices_dim1_avx2(const int* data,
-                                const int* centroids,
+void av1_calc_indices_dim1_avx2(const int16_t* data,
+                                const int16_t* centroids,
                                 uint8_t* indices,
+                                int64_t* total_dist,
                                 int n,
                                 int k);
-RTCD_EXTERN void (*av1_calc_indices_dim1)(const int* data,
-                                          const int* centroids,
+RTCD_EXTERN void (*av1_calc_indices_dim1)(const int16_t* data,
+                                          const int16_t* centroids,
                                           uint8_t* indices,
+                                          int64_t* total_dist,
                                           int n,
                                           int k);
 
-void av1_calc_indices_dim2_c(const int* data,
-                             const int* centroids,
+void av1_calc_indices_dim2_c(const int16_t* data,
+                             const int16_t* centroids,
                              uint8_t* indices,
+                             int64_t* total_dist,
                              int n,
                              int k);
-void av1_calc_indices_dim2_avx2(const int* data,
-                                const int* centroids,
+void av1_calc_indices_dim2_sse2(const int16_t* data,
+                                const int16_t* centroids,
                                 uint8_t* indices,
+                                int64_t* total_dist,
                                 int n,
                                 int k);
-RTCD_EXTERN void (*av1_calc_indices_dim2)(const int* data,
-                                          const int* centroids,
+void av1_calc_indices_dim2_avx2(const int16_t* data,
+                                const int16_t* centroids,
+                                uint8_t* indices,
+                                int64_t* total_dist,
+                                int n,
+                                int k);
+RTCD_EXTERN void (*av1_calc_indices_dim2)(const int16_t* data,
+                                          const int16_t* centroids,
                                           uint8_t* indices,
+                                          int64_t* total_dist,
                                           int n,
                                           int k);
 
-double av1_compute_cross_correlation_c(unsigned char* im1,
-                                       int stride1,
-                                       int x1,
-                                       int y1,
-                                       unsigned char* im2,
-                                       int stride2,
-                                       int x2,
-                                       int y2);
-double av1_compute_cross_correlation_sse4_1(unsigned char* im1,
-                                            int stride1,
-                                            int x1,
-                                            int y1,
-                                            unsigned char* im2,
-                                            int stride2,
-                                            int x2,
-                                            int y2);
-double av1_compute_cross_correlation_avx2(unsigned char* im1,
-                                          int stride1,
-                                          int x1,
-                                          int y1,
-                                          unsigned char* im2,
-                                          int stride2,
-                                          int x2,
-                                          int y2);
-RTCD_EXTERN double (*av1_compute_cross_correlation)(unsigned char* im1,
-                                                    int stride1,
-                                                    int x1,
-                                                    int y1,
-                                                    unsigned char* im2,
-                                                    int stride2,
-                                                    int x2,
-                                                    int y2);
-
 void av1_convolve_2d_scale_c(const uint8_t* src,
                              int src_stride,
                              uint8_t* dst,
@@ -1307,14 +1287,6 @@ void av1_get_nz_map_contexts_sse2(const uint8_t* const levels,
                                   int8_t* const coeff_contexts);
 #define av1_get_nz_map_contexts av1_get_nz_map_contexts_sse2
 
-void av1_highbd_fwht4x4_c(const int16_t* input, tran_low_t* output, int stride);
-void av1_highbd_fwht4x4_sse4_1(const int16_t* input,
-                               tran_low_t* output,
-                               int stride);
-RTCD_EXTERN void (*av1_highbd_fwht4x4)(const int16_t* input,
-                                       tran_low_t* output,
-                                       int stride);
-
 void av1_highbd_inv_txfm_add_c(const tran_low_t* input,
                                uint8_t* dest,
                                int stride,
@@ -2149,75 +2121,75 @@ void cdef_copy_rect8_16bit_to_16bit_c(uint16_t* dst,
                                       int dstride,
                                       const uint16_t* src,
                                       int sstride,
-                                      int v,
-                                      int h);
+                                      int width,
+                                      int height);
 void cdef_copy_rect8_16bit_to_16bit_sse2(uint16_t* dst,
                                          int dstride,
                                          const uint16_t* src,
                                          int sstride,
-                                         int v,
-                                         int h);
+                                         int width,
+                                         int height);
 void cdef_copy_rect8_16bit_to_16bit_ssse3(uint16_t* dst,
                                           int dstride,
                                           const uint16_t* src,
                                           int sstride,
-                                          int v,
-                                          int h);
+                                          int width,
+                                          int height);
 void cdef_copy_rect8_16bit_to_16bit_sse4_1(uint16_t* dst,
                                            int dstride,
                                            const uint16_t* src,
                                            int sstride,
-                                           int v,
-                                           int h);
+                                           int width,
+                                           int height);
 void cdef_copy_rect8_16bit_to_16bit_avx2(uint16_t* dst,
                                          int dstride,
                                          const uint16_t* src,
                                          int sstride,
-                                         int v,
-                                         int h);
+                                         int width,
+                                         int height);
 RTCD_EXTERN void (*cdef_copy_rect8_16bit_to_16bit)(uint16_t* dst,
                                                    int dstride,
                                                    const uint16_t* src,
                                                    int sstride,
-                                                   int v,
-                                                   int h);
+                                                   int width,
+                                                   int height);
 
 void cdef_copy_rect8_8bit_to_16bit_c(uint16_t* dst,
                                      int dstride,
                                      const uint8_t* src,
                                      int sstride,
-                                     int v,
-                                     int h);
+                                     int width,
+                                     int height);
 void cdef_copy_rect8_8bit_to_16bit_sse2(uint16_t* dst,
                                         int dstride,
                                         const uint8_t* src,
                                         int sstride,
-                                        int v,
-                                        int h);
+                                        int width,
+                                        int height);
 void cdef_copy_rect8_8bit_to_16bit_ssse3(uint16_t* dst,
                                          int dstride,
                                          const uint8_t* src,
                                          int sstride,
-                                         int v,
-                                         int h);
+                                         int width,
+                                         int height);
 void cdef_copy_rect8_8bit_to_16bit_sse4_1(uint16_t* dst,
                                           int dstride,
                                           const uint8_t* src,
                                           int sstride,
-                                          int v,
-                                          int h);
+                                          int width,
+                                          int height);
 void cdef_copy_rect8_8bit_to_16bit_avx2(uint16_t* dst,
                                         int dstride,
                                         const uint8_t* src,
                                         int sstride,
-                                        int v,
-                                        int h);
+                                        int width,
+                                        int height);
 RTCD_EXTERN void (*cdef_copy_rect8_8bit_to_16bit)(uint16_t* dst,
                                                   int dstride,
                                                   const uint8_t* src,
                                                   int sstride,
-                                                  int v,
-                                                  int h);
+                                                  int width,
+                                                  int height);
 
 void cdef_filter_16_0_c(void* dst16,
                         int dstride,
@@ -2868,373 +2840,500 @@ static void setup_rtcd_internal(void) {
   (void)flags;
 
   aom_dist_wtd_comp_avg_upsampled_pred = aom_dist_wtd_comp_avg_upsampled_pred_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_comp_avg_upsampled_pred =
         aom_dist_wtd_comp_avg_upsampled_pred_ssse3;
+  }
   av1_apply_selfguided_restoration = av1_apply_selfguided_restoration_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_apply_selfguided_restoration = av1_apply_selfguided_restoration_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_apply_selfguided_restoration = av1_apply_selfguided_restoration_avx2;
+  }
   av1_block_error = av1_block_error_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_block_error = av1_block_error_avx2;
+  }
   av1_block_error_lp = av1_block_error_lp_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_block_error_lp = av1_block_error_lp_avx2;
+  }
   av1_build_compound_diffwtd_mask = av1_build_compound_diffwtd_mask_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_build_compound_diffwtd_mask = av1_build_compound_diffwtd_mask_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_build_compound_diffwtd_mask = av1_build_compound_diffwtd_mask_avx2;
+  }
   av1_build_compound_diffwtd_mask_d16 = av1_build_compound_diffwtd_mask_d16_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_build_compound_diffwtd_mask_d16 =
         av1_build_compound_diffwtd_mask_d16_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_build_compound_diffwtd_mask_d16 =
         av1_build_compound_diffwtd_mask_d16_avx2;
+  }
   av1_calc_frame_error = av1_calc_frame_error_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_calc_frame_error = av1_calc_frame_error_avx2;
+  }
   av1_calc_indices_dim1 = av1_calc_indices_dim1_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_calc_indices_dim1 = av1_calc_indices_dim1_avx2;
-  av1_calc_indices_dim2 = av1_calc_indices_dim2_c;
-  if (flags & HAS_AVX2)
+  }
+  av1_calc_indices_dim2 = av1_calc_indices_dim2_sse2;
+  if (flags & HAS_AVX2) {
     av1_calc_indices_dim2 = av1_calc_indices_dim2_avx2;
-  av1_compute_cross_correlation = av1_compute_cross_correlation_c;
-  if (flags & HAS_SSE4_1)
-    av1_compute_cross_correlation = av1_compute_cross_correlation_sse4_1;
-  if (flags & HAS_AVX2)
-    av1_compute_cross_correlation = av1_compute_cross_correlation_avx2;
+  }
   av1_convolve_2d_scale = av1_convolve_2d_scale_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_convolve_2d_scale = av1_convolve_2d_scale_sse4_1;
+  }
   av1_convolve_2d_sr = av1_convolve_2d_sr_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_convolve_2d_sr = av1_convolve_2d_sr_avx2;
+  }
   av1_convolve_horiz_rs = av1_convolve_horiz_rs_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_convolve_horiz_rs = av1_convolve_horiz_rs_sse4_1;
+  }
   av1_convolve_x_sr = av1_convolve_x_sr_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_convolve_x_sr = av1_convolve_x_sr_avx2;
+  }
   av1_convolve_y_sr = av1_convolve_y_sr_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_convolve_y_sr = av1_convolve_y_sr_avx2;
+  }
   av1_dist_wtd_convolve_2d = av1_dist_wtd_convolve_2d_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     av1_dist_wtd_convolve_2d = av1_dist_wtd_convolve_2d_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_dist_wtd_convolve_2d = av1_dist_wtd_convolve_2d_avx2;
+  }
   av1_dist_wtd_convolve_2d_copy = av1_dist_wtd_convolve_2d_copy_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_dist_wtd_convolve_2d_copy = av1_dist_wtd_convolve_2d_copy_avx2;
+  }
   av1_dist_wtd_convolve_x = av1_dist_wtd_convolve_x_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_dist_wtd_convolve_x = av1_dist_wtd_convolve_x_avx2;
+  }
   av1_dist_wtd_convolve_y = av1_dist_wtd_convolve_y_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_dist_wtd_convolve_y = av1_dist_wtd_convolve_y_avx2;
+  }
   av1_dr_prediction_z1 = av1_dr_prediction_z1_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_dr_prediction_z1 = av1_dr_prediction_z1_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_dr_prediction_z1 = av1_dr_prediction_z1_avx2;
+  }
   av1_dr_prediction_z2 = av1_dr_prediction_z2_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_dr_prediction_z2 = av1_dr_prediction_z2_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_dr_prediction_z2 = av1_dr_prediction_z2_avx2;
+  }
   av1_dr_prediction_z3 = av1_dr_prediction_z3_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_dr_prediction_z3 = av1_dr_prediction_z3_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_dr_prediction_z3 = av1_dr_prediction_z3_avx2;
+  }
   av1_filter_intra_edge = av1_filter_intra_edge_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_filter_intra_edge = av1_filter_intra_edge_sse4_1;
+  }
   av1_filter_intra_edge_high = av1_filter_intra_edge_high_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_filter_intra_edge_high = av1_filter_intra_edge_high_sse4_1;
+  }
   av1_filter_intra_predictor = av1_filter_intra_predictor_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_filter_intra_predictor = av1_filter_intra_predictor_sse4_1;
+  }
   av1_fwd_txfm2d_16x16 = av1_fwd_txfm2d_16x16_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_16x16 = av1_fwd_txfm2d_16x16_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_fwd_txfm2d_16x16 = av1_fwd_txfm2d_16x16_avx2;
+  }
   av1_fwd_txfm2d_16x32 = av1_fwd_txfm2d_16x32_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_16x32 = av1_fwd_txfm2d_16x32_sse4_1;
+  }
   av1_fwd_txfm2d_16x4 = av1_fwd_txfm2d_16x4_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_16x4 = av1_fwd_txfm2d_16x4_sse4_1;
+  }
   av1_fwd_txfm2d_16x8 = av1_fwd_txfm2d_16x8_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_16x8 = av1_fwd_txfm2d_16x8_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_fwd_txfm2d_16x8 = av1_fwd_txfm2d_16x8_avx2;
+  }
   av1_fwd_txfm2d_32x16 = av1_fwd_txfm2d_32x16_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_32x16 = av1_fwd_txfm2d_32x16_sse4_1;
+  }
   av1_fwd_txfm2d_32x32 = av1_fwd_txfm2d_32x32_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_32x32 = av1_fwd_txfm2d_32x32_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_fwd_txfm2d_32x32 = av1_fwd_txfm2d_32x32_avx2;
+  }
   av1_fwd_txfm2d_32x64 = av1_fwd_txfm2d_32x64_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_32x64 = av1_fwd_txfm2d_32x64_sse4_1;
+  }
   av1_fwd_txfm2d_4x4 = av1_fwd_txfm2d_4x4_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_4x4 = av1_fwd_txfm2d_4x4_sse4_1;
+  }
   av1_fwd_txfm2d_4x8 = av1_fwd_txfm2d_4x8_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_4x8 = av1_fwd_txfm2d_4x8_sse4_1;
+  }
   av1_fwd_txfm2d_64x32 = av1_fwd_txfm2d_64x32_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_64x32 = av1_fwd_txfm2d_64x32_sse4_1;
+  }
   av1_fwd_txfm2d_64x64 = av1_fwd_txfm2d_64x64_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_64x64 = av1_fwd_txfm2d_64x64_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_fwd_txfm2d_64x64 = av1_fwd_txfm2d_64x64_avx2;
+  }
   av1_fwd_txfm2d_8x16 = av1_fwd_txfm2d_8x16_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_8x16 = av1_fwd_txfm2d_8x16_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_fwd_txfm2d_8x16 = av1_fwd_txfm2d_8x16_avx2;
+  }
   av1_fwd_txfm2d_8x4 = av1_fwd_txfm2d_8x4_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_8x4 = av1_fwd_txfm2d_8x4_sse4_1;
+  }
   av1_fwd_txfm2d_8x8 = av1_fwd_txfm2d_8x8_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_8x8 = av1_fwd_txfm2d_8x8_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_fwd_txfm2d_8x8 = av1_fwd_txfm2d_8x8_avx2;
+  }
   av1_fwht4x4 = av1_fwht4x4_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwht4x4 = av1_fwht4x4_sse4_1;
+  }
   av1_get_crc32c_value = av1_get_crc32c_value_c;
-  if (flags & HAS_SSE4_2)
+  if (flags & HAS_SSE4_2) {
     av1_get_crc32c_value = av1_get_crc32c_value_sse4_2;
+  }
   av1_get_horver_correlation_full = av1_get_horver_correlation_full_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_get_horver_correlation_full = av1_get_horver_correlation_full_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_get_horver_correlation_full = av1_get_horver_correlation_full_avx2;
-  av1_highbd_fwht4x4 = av1_highbd_fwht4x4_c;
-  if (flags & HAS_SSE4_1)
-    av1_highbd_fwht4x4 = av1_highbd_fwht4x4_sse4_1;
+  }
   av1_highbd_inv_txfm_add = av1_highbd_inv_txfm_add_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_highbd_inv_txfm_add = av1_highbd_inv_txfm_add_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_highbd_inv_txfm_add = av1_highbd_inv_txfm_add_avx2;
+  }
   av1_highbd_inv_txfm_add_16x4 = av1_highbd_inv_txfm_add_16x4_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_highbd_inv_txfm_add_16x4 = av1_highbd_inv_txfm_add_16x4_sse4_1;
+  }
   av1_highbd_inv_txfm_add_4x16 = av1_highbd_inv_txfm_add_4x16_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_highbd_inv_txfm_add_4x16 = av1_highbd_inv_txfm_add_4x16_sse4_1;
+  }
   av1_highbd_inv_txfm_add_4x4 = av1_highbd_inv_txfm_add_4x4_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_highbd_inv_txfm_add_4x4 = av1_highbd_inv_txfm_add_4x4_sse4_1;
+  }
   av1_highbd_inv_txfm_add_4x8 = av1_highbd_inv_txfm_add_4x8_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_highbd_inv_txfm_add_4x8 = av1_highbd_inv_txfm_add_4x8_sse4_1;
+  }
   av1_highbd_inv_txfm_add_8x4 = av1_highbd_inv_txfm_add_8x4_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_highbd_inv_txfm_add_8x4 = av1_highbd_inv_txfm_add_8x4_sse4_1;
+  }
   av1_highbd_inv_txfm_add_8x8 = av1_highbd_inv_txfm_add_8x8_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_highbd_inv_txfm_add_8x8 = av1_highbd_inv_txfm_add_8x8_sse4_1;
+  }
   av1_highbd_iwht4x4_16_add = av1_highbd_iwht4x4_16_add_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_highbd_iwht4x4_16_add = av1_highbd_iwht4x4_16_add_sse4_1;
+  }
   av1_inv_txfm2d_add_4x4 = av1_inv_txfm2d_add_4x4_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_inv_txfm2d_add_4x4 = av1_inv_txfm2d_add_4x4_sse4_1;
+  }
   av1_inv_txfm2d_add_8x8 = av1_inv_txfm2d_add_8x8_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_inv_txfm2d_add_8x8 = av1_inv_txfm2d_add_8x8_sse4_1;
+  }
   av1_inv_txfm_add = av1_inv_txfm_add_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     av1_inv_txfm_add = av1_inv_txfm_add_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_inv_txfm_add = av1_inv_txfm_add_avx2;
+  }
   av1_lowbd_fwd_txfm = av1_lowbd_fwd_txfm_sse2;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_lowbd_fwd_txfm = av1_lowbd_fwd_txfm_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_lowbd_fwd_txfm = av1_lowbd_fwd_txfm_avx2;
+  }
   av1_nn_fast_softmax_16 = av1_nn_fast_softmax_16_c;
-  if (flags & HAS_SSE3)
+  if (flags & HAS_SSE3) {
     av1_nn_fast_softmax_16 = av1_nn_fast_softmax_16_sse3;
+  }
   av1_nn_predict = av1_nn_predict_c;
-  if (flags & HAS_SSE3)
+  if (flags & HAS_SSE3) {
     av1_nn_predict = av1_nn_predict_sse3;
+  }
   av1_quantize_fp = av1_quantize_fp_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_quantize_fp = av1_quantize_fp_avx2;
+  }
   av1_quantize_fp_32x32 = av1_quantize_fp_32x32_c;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_quantize_fp_32x32 = av1_quantize_fp_32x32_avx2;
+  }
   av1_quantize_fp_64x64 = av1_quantize_fp_64x64_c;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_quantize_fp_64x64 = av1_quantize_fp_64x64_avx2;
+  }
   av1_quantize_lp = av1_quantize_lp_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_quantize_lp = av1_quantize_lp_avx2;
+  }
   av1_resize_and_extend_frame = av1_resize_and_extend_frame_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     av1_resize_and_extend_frame = av1_resize_and_extend_frame_ssse3;
+  }
   av1_round_shift_array = av1_round_shift_array_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_round_shift_array = av1_round_shift_array_sse4_1;
+  }
   av1_selfguided_restoration = av1_selfguided_restoration_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_selfguided_restoration = av1_selfguided_restoration_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_selfguided_restoration = av1_selfguided_restoration_avx2;
+  }
   av1_txb_init_levels = av1_txb_init_levels_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_txb_init_levels = av1_txb_init_levels_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_txb_init_levels = av1_txb_init_levels_avx2;
+  }
   av1_upsample_intra_edge = av1_upsample_intra_edge_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_upsample_intra_edge = av1_upsample_intra_edge_sse4_1;
+  }
   av1_upsample_intra_edge_high = av1_upsample_intra_edge_high_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_upsample_intra_edge_high = av1_upsample_intra_edge_high_sse4_1;
+  }
   av1_warp_affine = av1_warp_affine_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_warp_affine = av1_warp_affine_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_warp_affine = av1_warp_affine_avx2;
+  }
   av1_wedge_compute_delta_squares = av1_wedge_compute_delta_squares_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_wedge_compute_delta_squares = av1_wedge_compute_delta_squares_avx2;
+  }
   av1_wedge_sign_from_residuals = av1_wedge_sign_from_residuals_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_wedge_sign_from_residuals = av1_wedge_sign_from_residuals_avx2;
+  }
   av1_wedge_sse_from_residuals = av1_wedge_sse_from_residuals_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_wedge_sse_from_residuals = av1_wedge_sse_from_residuals_avx2;
+  }
   av1_wiener_convolve_add_src = av1_wiener_convolve_add_src_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_wiener_convolve_add_src = av1_wiener_convolve_add_src_avx2;
+  }
   cdef_copy_rect8_16bit_to_16bit = cdef_copy_rect8_16bit_to_16bit_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cdef_copy_rect8_16bit_to_16bit = cdef_copy_rect8_16bit_to_16bit_ssse3;
-  if (flags & HAS_SSE4_1)
+  }
+  if (flags & HAS_SSE4_1) {
     cdef_copy_rect8_16bit_to_16bit = cdef_copy_rect8_16bit_to_16bit_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cdef_copy_rect8_16bit_to_16bit = cdef_copy_rect8_16bit_to_16bit_avx2;
+  }
   cdef_copy_rect8_8bit_to_16bit = cdef_copy_rect8_8bit_to_16bit_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cdef_copy_rect8_8bit_to_16bit = cdef_copy_rect8_8bit_to_16bit_ssse3;
-  if (flags & HAS_SSE4_1)
+  }
+  if (flags & HAS_SSE4_1) {
     cdef_copy_rect8_8bit_to_16bit = cdef_copy_rect8_8bit_to_16bit_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cdef_copy_rect8_8bit_to_16bit = cdef_copy_rect8_8bit_to_16bit_avx2;
+  }
   cdef_filter_16_0 = cdef_filter_16_0_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cdef_filter_16_0 = cdef_filter_16_0_ssse3;
-  if (flags & HAS_SSE4_1)
+  }
+  if (flags & HAS_SSE4_1) {
     cdef_filter_16_0 = cdef_filter_16_0_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cdef_filter_16_0 = cdef_filter_16_0_avx2;
+  }
   cdef_filter_16_1 = cdef_filter_16_1_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cdef_filter_16_1 = cdef_filter_16_1_ssse3;
-  if (flags & HAS_SSE4_1)
+  }
+  if (flags & HAS_SSE4_1) {
     cdef_filter_16_1 = cdef_filter_16_1_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cdef_filter_16_1 = cdef_filter_16_1_avx2;
+  }
   cdef_filter_16_2 = cdef_filter_16_2_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cdef_filter_16_2 = cdef_filter_16_2_ssse3;
-  if (flags & HAS_SSE4_1)
+  }
+  if (flags & HAS_SSE4_1) {
     cdef_filter_16_2 = cdef_filter_16_2_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cdef_filter_16_2 = cdef_filter_16_2_avx2;
+  }
   cdef_filter_16_3 = cdef_filter_16_3_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cdef_filter_16_3 = cdef_filter_16_3_ssse3;
-  if (flags & HAS_SSE4_1)
+  }
+  if (flags & HAS_SSE4_1) {
     cdef_filter_16_3 = cdef_filter_16_3_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cdef_filter_16_3 = cdef_filter_16_3_avx2;
+  }
   cdef_filter_8_0 = cdef_filter_8_0_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cdef_filter_8_0 = cdef_filter_8_0_ssse3;
-  if (flags & HAS_SSE4_1)
+  }
+  if (flags & HAS_SSE4_1) {
     cdef_filter_8_0 = cdef_filter_8_0_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cdef_filter_8_0 = cdef_filter_8_0_avx2;
+  }
   cdef_filter_8_1 = cdef_filter_8_1_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cdef_filter_8_1 = cdef_filter_8_1_ssse3;
-  if (flags & HAS_SSE4_1)
+  }
+  if (flags & HAS_SSE4_1) {
     cdef_filter_8_1 = cdef_filter_8_1_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cdef_filter_8_1 = cdef_filter_8_1_avx2;
+  }
   cdef_filter_8_2 = cdef_filter_8_2_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cdef_filter_8_2 = cdef_filter_8_2_ssse3;
-  if (flags & HAS_SSE4_1)
+  }
+  if (flags & HAS_SSE4_1) {
     cdef_filter_8_2 = cdef_filter_8_2_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cdef_filter_8_2 = cdef_filter_8_2_avx2;
+  }
   cdef_filter_8_3 = cdef_filter_8_3_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cdef_filter_8_3 = cdef_filter_8_3_ssse3;
-  if (flags & HAS_SSE4_1)
+  }
+  if (flags & HAS_SSE4_1) {
     cdef_filter_8_3 = cdef_filter_8_3_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cdef_filter_8_3 = cdef_filter_8_3_avx2;
+  }
   cdef_find_dir = cdef_find_dir_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cdef_find_dir = cdef_find_dir_ssse3;
-  if (flags & HAS_SSE4_1)
+  }
+  if (flags & HAS_SSE4_1) {
     cdef_find_dir = cdef_find_dir_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cdef_find_dir = cdef_find_dir_avx2;
+  }
   cdef_find_dir_dual = cdef_find_dir_dual_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cdef_find_dir_dual = cdef_find_dir_dual_ssse3;
-  if (flags & HAS_SSE4_1)
+  }
+  if (flags & HAS_SSE4_1) {
     cdef_find_dir_dual = cdef_find_dir_dual_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cdef_find_dir_dual = cdef_find_dir_dual_avx2;
+  }
   cfl_get_luma_subsampling_420_lbd = cfl_get_luma_subsampling_420_lbd_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cfl_get_luma_subsampling_420_lbd = cfl_get_luma_subsampling_420_lbd_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cfl_get_luma_subsampling_420_lbd = cfl_get_luma_subsampling_420_lbd_avx2;
+  }
   cfl_get_luma_subsampling_422_lbd = cfl_get_luma_subsampling_422_lbd_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cfl_get_luma_subsampling_422_lbd = cfl_get_luma_subsampling_422_lbd_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cfl_get_luma_subsampling_422_lbd = cfl_get_luma_subsampling_422_lbd_avx2;
+  }
   cfl_get_luma_subsampling_444_lbd = cfl_get_luma_subsampling_444_lbd_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cfl_get_luma_subsampling_444_lbd = cfl_get_luma_subsampling_444_lbd_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cfl_get_luma_subsampling_444_lbd = cfl_get_luma_subsampling_444_lbd_avx2;
+  }
   cfl_get_predict_lbd_fn = cfl_get_predict_lbd_fn_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cfl_get_predict_lbd_fn = cfl_get_predict_lbd_fn_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cfl_get_predict_lbd_fn = cfl_get_predict_lbd_fn_avx2;
+  }
   cfl_get_subtract_average_fn = cfl_get_subtract_average_fn_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     cfl_get_subtract_average_fn = cfl_get_subtract_average_fn_avx2;
+  }
 }
 #endif
 
diff --git a/libaom/source/config/linux/x64/config/aom_config.asm b/libaom/source/config/linux/x64/config/aom_config.asm
index ae5f0f9..5b34c7d 100644
--- a/libaom/source/config/linux/x64/config/aom_config.asm
+++ b/libaom/source/config/linux/x64/config/aom_config.asm
@@ -36,6 +36,7 @@
 %define CONFIG_NORMAL_TILE_MODE 1
 %define CONFIG_OPTICAL_FLOW_API 0
 %define CONFIG_OS_SUPPORT 1
+%define CONFIG_OUTPUT_FRAME_SIZE 0
 %define CONFIG_PARTITION_SEARCH_ORDER 0
 %define CONFIG_PIC 1
 %define CONFIG_RATECTRL_LOG 0
@@ -44,6 +45,7 @@
 %define CONFIG_REALTIME_ONLY 1
 %define CONFIG_RT_ML_PARTITIONING 0
 %define CONFIG_RUNTIME_CPU_DETECT 1
+%define CONFIG_SALIENCY_MAP 0
 %define CONFIG_SHARED 0
 %define CONFIG_SIZE_LIMIT 1
 %define CONFIG_SPATIAL_RESAMPLING 1
diff --git a/libaom/source/config/linux/x64/config/aom_config.h b/libaom/source/config/linux/x64/config/aom_config.h
index 1d553fa..ad1790e 100644
--- a/libaom/source/config/linux/x64/config/aom_config.h
+++ b/libaom/source/config/linux/x64/config/aom_config.h
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022, Alliance for Open Media. All rights reserved
+ * Copyright (c) 2023, Alliance for Open Media. All rights reserved
  *
  * This source code is subject to the terms of the BSD 2 Clause License and
  * the Alliance for Open Media Patent License 1.0. If the BSD 2 Clause License
@@ -48,6 +48,7 @@
 #define CONFIG_NORMAL_TILE_MODE 1
 #define CONFIG_OPTICAL_FLOW_API 0
 #define CONFIG_OS_SUPPORT 1
+#define CONFIG_OUTPUT_FRAME_SIZE 0
 #define CONFIG_PARTITION_SEARCH_ORDER 0
 #define CONFIG_PIC 1
 #define CONFIG_RATECTRL_LOG 0
@@ -56,6 +57,7 @@
 #define CONFIG_REALTIME_ONLY 1
 #define CONFIG_RT_ML_PARTITIONING 0
 #define CONFIG_RUNTIME_CPU_DETECT 1
+#define CONFIG_SALIENCY_MAP 0
 #define CONFIG_SHARED 0
 #define CONFIG_SIZE_LIMIT 1
 #define CONFIG_SPATIAL_RESAMPLING 1
diff --git a/libaom/source/config/linux/x64/config/aom_dsp_rtcd.h b/libaom/source/config/linux/x64/config/aom_dsp_rtcd.h
index a53972f..ba451d7 100644
--- a/libaom/source/config/linux/x64/config/aom_dsp_rtcd.h
+++ b/libaom/source/config/linux/x64/config/aom_dsp_rtcd.h
@@ -2226,30 +2226,75 @@ unsigned int aom_get_mb_ss_c(const int16_t*);
 unsigned int aom_get_mb_ss_sse2(const int16_t*);
 #define aom_get_mb_ss aom_get_mb_ss_sse2
 
-void aom_get_sse_sum_8x8_quad_c(const uint8_t* src_ptr,
-                                int source_stride,
-                                const uint8_t* ref_ptr,
-                                int ref_stride,
-                                unsigned int* sse,
-                                int* sum);
-void aom_get_sse_sum_8x8_quad_sse2(const uint8_t* src_ptr,
-                                   int source_stride,
-                                   const uint8_t* ref_ptr,
-                                   int ref_stride,
-                                   unsigned int* sse,
-                                   int* sum);
-void aom_get_sse_sum_8x8_quad_avx2(const uint8_t* src_ptr,
-                                   int source_stride,
-                                   const uint8_t* ref_ptr,
-                                   int ref_stride,
-                                   unsigned int* sse,
-                                   int* sum);
-RTCD_EXTERN void (*aom_get_sse_sum_8x8_quad)(const uint8_t* src_ptr,
-                                             int source_stride,
-                                             const uint8_t* ref_ptr,
-                                             int ref_stride,
-                                             unsigned int* sse,
-                                             int* sum);
+void aom_get_var_sse_sum_16x16_dual_c(const uint8_t* src_ptr,
+                                      int source_stride,
+                                      const uint8_t* ref_ptr,
+                                      int ref_stride,
+                                      uint32_t* sse16x16,
+                                      unsigned int* tot_sse,
+                                      int* tot_sum,
+                                      uint32_t* var16x16);
+void aom_get_var_sse_sum_16x16_dual_sse2(const uint8_t* src_ptr,
+                                         int source_stride,
+                                         const uint8_t* ref_ptr,
+                                         int ref_stride,
+                                         uint32_t* sse16x16,
+                                         unsigned int* tot_sse,
+                                         int* tot_sum,
+                                         uint32_t* var16x16);
+void aom_get_var_sse_sum_16x16_dual_avx2(const uint8_t* src_ptr,
+                                         int source_stride,
+                                         const uint8_t* ref_ptr,
+                                         int ref_stride,
+                                         uint32_t* sse16x16,
+                                         unsigned int* tot_sse,
+                                         int* tot_sum,
+                                         uint32_t* var16x16);
+RTCD_EXTERN void (*aom_get_var_sse_sum_16x16_dual)(const uint8_t* src_ptr,
+                                                   int source_stride,
+                                                   const uint8_t* ref_ptr,
+                                                   int ref_stride,
+                                                   uint32_t* sse16x16,
+                                                   unsigned int* tot_sse,
+                                                   int* tot_sum,
+                                                   uint32_t* var16x16);
+
+void aom_get_var_sse_sum_8x8_quad_c(const uint8_t* src_ptr,
+                                    int source_stride,
+                                    const uint8_t* ref_ptr,
+                                    int ref_stride,
+                                    uint32_t* sse8x8,
+                                    int* sum8x8,
+                                    unsigned int* tot_sse,
+                                    int* tot_sum,
+                                    uint32_t* var8x8);
+void aom_get_var_sse_sum_8x8_quad_sse2(const uint8_t* src_ptr,
+                                       int source_stride,
+                                       const uint8_t* ref_ptr,
+                                       int ref_stride,
+                                       uint32_t* sse8x8,
+                                       int* sum8x8,
+                                       unsigned int* tot_sse,
+                                       int* tot_sum,
+                                       uint32_t* var8x8);
+void aom_get_var_sse_sum_8x8_quad_avx2(const uint8_t* src_ptr,
+                                       int source_stride,
+                                       const uint8_t* ref_ptr,
+                                       int ref_stride,
+                                       uint32_t* sse8x8,
+                                       int* sum8x8,
+                                       unsigned int* tot_sse,
+                                       int* tot_sum,
+                                       uint32_t* var8x8);
+RTCD_EXTERN void (*aom_get_var_sse_sum_8x8_quad)(const uint8_t* src_ptr,
+                                                 int source_stride,
+                                                 const uint8_t* ref_ptr,
+                                                 int ref_stride,
+                                                 uint32_t* sse8x8,
+                                                 int* sum8x8,
+                                                 unsigned int* tot_sse,
+                                                 int* tot_sum,
+                                                 uint32_t* var8x8);
 
 void aom_h_predictor_16x16_c(uint8_t* dst,
                              ptrdiff_t y_stride,
@@ -2890,7 +2935,16 @@ void aom_lpf_vertical_14_quad_sse2(uint8_t* s,
                                    const uint8_t* blimit0,
                                    const uint8_t* limit0,
                                    const uint8_t* thresh0);
-#define aom_lpf_vertical_14_quad aom_lpf_vertical_14_quad_sse2
+void aom_lpf_vertical_14_quad_avx2(uint8_t* s,
+                                   int pitch,
+                                   const uint8_t* blimit0,
+                                   const uint8_t* limit0,
+                                   const uint8_t* thresh0);
+RTCD_EXTERN void (*aom_lpf_vertical_14_quad)(uint8_t* s,
+                                             int pitch,
+                                             const uint8_t* blimit0,
+                                             const uint8_t* limit0,
+                                             const uint8_t* thresh0);
 
 void aom_lpf_vertical_4_c(uint8_t* s,
                           int pitch,
@@ -4640,6 +4694,11 @@ uint64_t aom_mse_16xh_16bit_c(uint8_t* dst,
                               uint16_t* src,
                               int w,
                               int h);
+uint64_t aom_mse_16xh_16bit_sse2(uint8_t* dst,
+                                 int dstride,
+                                 uint16_t* src,
+                                 int w,
+                                 int h);
 uint64_t aom_mse_16xh_16bit_avx2(uint8_t* dst,
                                  int dstride,
                                  uint16_t* src,
@@ -5198,6 +5257,22 @@ RTCD_EXTERN unsigned int (*aom_sad128x128_avg)(const uint8_t* src_ptr,
                                                int ref_stride,
                                                const uint8_t* second_pred);
 
+void aom_sad128x128x3d_c(const uint8_t* src_ptr,
+                         int src_stride,
+                         const uint8_t* const ref_ptr[4],
+                         int ref_stride,
+                         uint32_t sad_array[4]);
+void aom_sad128x128x3d_avx2(const uint8_t* src_ptr,
+                            int src_stride,
+                            const uint8_t* const ref_ptr[4],
+                            int ref_stride,
+                            uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad128x128x3d)(const uint8_t* src_ptr,
+                                      int src_stride,
+                                      const uint8_t* const ref_ptr[4],
+                                      int ref_stride,
+                                      uint32_t sad_array[4]);
+
 void aom_sad128x128x4d_c(const uint8_t* src_ptr,
                          int src_stride,
                          const uint8_t* const ref_ptr[4],
@@ -5265,6 +5340,22 @@ RTCD_EXTERN unsigned int (*aom_sad128x64_avg)(const uint8_t* src_ptr,
                                               int ref_stride,
                                               const uint8_t* second_pred);
 
+void aom_sad128x64x3d_c(const uint8_t* src_ptr,
+                        int src_stride,
+                        const uint8_t* const ref_ptr[4],
+                        int ref_stride,
+                        uint32_t sad_array[4]);
+void aom_sad128x64x3d_avx2(const uint8_t* src_ptr,
+                           int src_stride,
+                           const uint8_t* const ref_ptr[4],
+                           int ref_stride,
+                           uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad128x64x3d)(const uint8_t* src_ptr,
+                                     int src_stride,
+                                     const uint8_t* const ref_ptr[4],
+                                     int ref_stride,
+                                     uint32_t sad_array[4]);
+
 void aom_sad128x64x4d_c(const uint8_t* src_ptr,
                         int src_stride,
                         const uint8_t* const ref_ptr[4],
@@ -5330,6 +5421,22 @@ unsigned int aom_sad16x16_avg_sse2(const uint8_t* src_ptr,
                                    const uint8_t* second_pred);
 #define aom_sad16x16_avg aom_sad16x16_avg_sse2
 
+void aom_sad16x16x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+void aom_sad16x16x3d_avx2(const uint8_t* src_ptr,
+                          int src_stride,
+                          const uint8_t* const ref_ptr[4],
+                          int ref_stride,
+                          uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad16x16x3d)(const uint8_t* src_ptr,
+                                    int src_stride,
+                                    const uint8_t* const ref_ptr[4],
+                                    int ref_stride,
+                                    uint32_t sad_array[4]);
+
 void aom_sad16x16x4d_c(const uint8_t* src_ptr,
                        int src_stride,
                        const uint8_t* const ref_ptr[4],
@@ -5340,7 +5447,16 @@ void aom_sad16x16x4d_sse2(const uint8_t* src_ptr,
                           const uint8_t* const ref_ptr[4],
                           int ref_stride,
                           uint32_t sad_array[4]);
-#define aom_sad16x16x4d aom_sad16x16x4d_sse2
+void aom_sad16x16x4d_avx2(const uint8_t* src_ptr,
+                          int src_stride,
+                          const uint8_t* const ref_ptr[4],
+                          int ref_stride,
+                          uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad16x16x4d)(const uint8_t* src_ptr,
+                                    int src_stride,
+                                    const uint8_t* const ref_ptr[4],
+                                    int ref_stride,
+                                    uint32_t sad_array[4]);
 
 void aom_sad16x16x4d_avg_c(const uint8_t* src_ptr,
                            int src_stride,
@@ -5372,6 +5488,22 @@ unsigned int aom_sad16x32_avg_sse2(const uint8_t* src_ptr,
                                    const uint8_t* second_pred);
 #define aom_sad16x32_avg aom_sad16x32_avg_sse2
 
+void aom_sad16x32x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+void aom_sad16x32x3d_avx2(const uint8_t* src_ptr,
+                          int src_stride,
+                          const uint8_t* const ref_ptr[4],
+                          int ref_stride,
+                          uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad16x32x3d)(const uint8_t* src_ptr,
+                                    int src_stride,
+                                    const uint8_t* const ref_ptr[4],
+                                    int ref_stride,
+                                    uint32_t sad_array[4]);
+
 void aom_sad16x32x4d_c(const uint8_t* src_ptr,
                        int src_stride,
                        const uint8_t* const ref_ptr[4],
@@ -5382,7 +5514,16 @@ void aom_sad16x32x4d_sse2(const uint8_t* src_ptr,
                           const uint8_t* const ref_ptr[4],
                           int ref_stride,
                           uint32_t sad_array[4]);
-#define aom_sad16x32x4d aom_sad16x32x4d_sse2
+void aom_sad16x32x4d_avx2(const uint8_t* src_ptr,
+                          int src_stride,
+                          const uint8_t* const ref_ptr[4],
+                          int ref_stride,
+                          uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad16x32x4d)(const uint8_t* src_ptr,
+                                    int src_stride,
+                                    const uint8_t* const ref_ptr[4],
+                                    int ref_stride,
+                                    uint32_t sad_array[4]);
 
 void aom_sad16x32x4d_avg_c(const uint8_t* src_ptr,
                            int src_stride,
@@ -5414,6 +5555,22 @@ unsigned int aom_sad16x8_avg_sse2(const uint8_t* src_ptr,
                                   const uint8_t* second_pred);
 #define aom_sad16x8_avg aom_sad16x8_avg_sse2
 
+void aom_sad16x8x3d_c(const uint8_t* src_ptr,
+                      int src_stride,
+                      const uint8_t* const ref_ptr[4],
+                      int ref_stride,
+                      uint32_t sad_array[4]);
+void aom_sad16x8x3d_avx2(const uint8_t* src_ptr,
+                         int src_stride,
+                         const uint8_t* const ref_ptr[4],
+                         int ref_stride,
+                         uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad16x8x3d)(const uint8_t* src_ptr,
+                                   int src_stride,
+                                   const uint8_t* const ref_ptr[4],
+                                   int ref_stride,
+                                   uint32_t sad_array[4]);
+
 void aom_sad16x8x4d_c(const uint8_t* src_ptr,
                       int src_stride,
                       const uint8_t* const ref_ptr[4],
@@ -5424,7 +5581,16 @@ void aom_sad16x8x4d_sse2(const uint8_t* src_ptr,
                          const uint8_t* const ref_ptr[4],
                          int ref_stride,
                          uint32_t sad_array[4]);
-#define aom_sad16x8x4d aom_sad16x8x4d_sse2
+void aom_sad16x8x4d_avx2(const uint8_t* src_ptr,
+                         int src_stride,
+                         const uint8_t* const ref_ptr[4],
+                         int ref_stride,
+                         uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad16x8x4d)(const uint8_t* src_ptr,
+                                   int src_stride,
+                                   const uint8_t* const ref_ptr[4],
+                                   int ref_stride,
+                                   uint32_t sad_array[4]);
 
 void aom_sad16x8x4d_avg_c(const uint8_t* src_ptr,
                           int src_stride,
@@ -5486,6 +5652,22 @@ RTCD_EXTERN unsigned int (*aom_sad32x16_avg)(const uint8_t* src_ptr,
                                              int ref_stride,
                                              const uint8_t* second_pred);
 
+void aom_sad32x16x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+void aom_sad32x16x3d_avx2(const uint8_t* src_ptr,
+                          int src_stride,
+                          const uint8_t* const ref_ptr[4],
+                          int ref_stride,
+                          uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad32x16x3d)(const uint8_t* src_ptr,
+                                    int src_stride,
+                                    const uint8_t* const ref_ptr[4],
+                                    int ref_stride,
+                                    uint32_t sad_array[4]);
+
 void aom_sad32x16x4d_c(const uint8_t* src_ptr,
                        int src_stride,
                        const uint8_t* const ref_ptr[4],
@@ -5553,6 +5735,22 @@ RTCD_EXTERN unsigned int (*aom_sad32x32_avg)(const uint8_t* src_ptr,
                                              int ref_stride,
                                              const uint8_t* second_pred);
 
+void aom_sad32x32x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+void aom_sad32x32x3d_avx2(const uint8_t* src_ptr,
+                          int src_stride,
+                          const uint8_t* const ref_ptr[4],
+                          int ref_stride,
+                          uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad32x32x3d)(const uint8_t* src_ptr,
+                                    int src_stride,
+                                    const uint8_t* const ref_ptr[4],
+                                    int ref_stride,
+                                    uint32_t sad_array[4]);
+
 void aom_sad32x32x4d_c(const uint8_t* src_ptr,
                        int src_stride,
                        const uint8_t* const ref_ptr[4],
@@ -5620,6 +5818,22 @@ RTCD_EXTERN unsigned int (*aom_sad32x64_avg)(const uint8_t* src_ptr,
                                              int ref_stride,
                                              const uint8_t* second_pred);
 
+void aom_sad32x64x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+void aom_sad32x64x3d_avx2(const uint8_t* src_ptr,
+                          int src_stride,
+                          const uint8_t* const ref_ptr[4],
+                          int ref_stride,
+                          uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad32x64x3d)(const uint8_t* src_ptr,
+                                    int src_stride,
+                                    const uint8_t* const ref_ptr[4],
+                                    int ref_stride,
+                                    uint32_t sad_array[4]);
+
 void aom_sad32x64x4d_c(const uint8_t* src_ptr,
                        int src_stride,
                        const uint8_t* const ref_ptr[4],
@@ -5685,6 +5899,13 @@ unsigned int aom_sad4x4_avg_sse2(const uint8_t* src_ptr,
                                  const uint8_t* second_pred);
 #define aom_sad4x4_avg aom_sad4x4_avg_sse2
 
+void aom_sad4x4x3d_c(const uint8_t* src_ptr,
+                     int src_stride,
+                     const uint8_t* const ref_ptr[4],
+                     int ref_stride,
+                     uint32_t sad_array[4]);
+#define aom_sad4x4x3d aom_sad4x4x3d_c
+
 void aom_sad4x4x4d_c(const uint8_t* src_ptr,
                      int src_stride,
                      const uint8_t* const ref_ptr[4],
@@ -5727,6 +5948,13 @@ unsigned int aom_sad4x8_avg_sse2(const uint8_t* src_ptr,
                                  const uint8_t* second_pred);
 #define aom_sad4x8_avg aom_sad4x8_avg_sse2
 
+void aom_sad4x8x3d_c(const uint8_t* src_ptr,
+                     int src_stride,
+                     const uint8_t* const ref_ptr[4],
+                     int ref_stride,
+                     uint32_t sad_array[4]);
+#define aom_sad4x8x3d aom_sad4x8x3d_c
+
 void aom_sad4x8x4d_c(const uint8_t* src_ptr,
                      int src_stride,
                      const uint8_t* const ref_ptr[4],
@@ -5799,6 +6027,22 @@ RTCD_EXTERN unsigned int (*aom_sad64x128_avg)(const uint8_t* src_ptr,
                                               int ref_stride,
                                               const uint8_t* second_pred);
 
+void aom_sad64x128x3d_c(const uint8_t* src_ptr,
+                        int src_stride,
+                        const uint8_t* const ref_ptr[4],
+                        int ref_stride,
+                        uint32_t sad_array[4]);
+void aom_sad64x128x3d_avx2(const uint8_t* src_ptr,
+                           int src_stride,
+                           const uint8_t* const ref_ptr[4],
+                           int ref_stride,
+                           uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad64x128x3d)(const uint8_t* src_ptr,
+                                     int src_stride,
+                                     const uint8_t* const ref_ptr[4],
+                                     int ref_stride,
+                                     uint32_t sad_array[4]);
+
 void aom_sad64x128x4d_c(const uint8_t* src_ptr,
                         int src_stride,
                         const uint8_t* const ref_ptr[4],
@@ -5866,6 +6110,22 @@ RTCD_EXTERN unsigned int (*aom_sad64x32_avg)(const uint8_t* src_ptr,
                                              int ref_stride,
                                              const uint8_t* second_pred);
 
+void aom_sad64x32x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+void aom_sad64x32x3d_avx2(const uint8_t* src_ptr,
+                          int src_stride,
+                          const uint8_t* const ref_ptr[4],
+                          int ref_stride,
+                          uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad64x32x3d)(const uint8_t* src_ptr,
+                                    int src_stride,
+                                    const uint8_t* const ref_ptr[4],
+                                    int ref_stride,
+                                    uint32_t sad_array[4]);
+
 void aom_sad64x32x4d_c(const uint8_t* src_ptr,
                        int src_stride,
                        const uint8_t* const ref_ptr[4],
@@ -5933,6 +6193,22 @@ RTCD_EXTERN unsigned int (*aom_sad64x64_avg)(const uint8_t* src_ptr,
                                              int ref_stride,
                                              const uint8_t* second_pred);
 
+void aom_sad64x64x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+void aom_sad64x64x3d_avx2(const uint8_t* src_ptr,
+                          int src_stride,
+                          const uint8_t* const ref_ptr[4],
+                          int ref_stride,
+                          uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad64x64x3d)(const uint8_t* src_ptr,
+                                    int src_stride,
+                                    const uint8_t* const ref_ptr[4],
+                                    int ref_stride,
+                                    uint32_t sad_array[4]);
+
 void aom_sad64x64x4d_c(const uint8_t* src_ptr,
                        int src_stride,
                        const uint8_t* const ref_ptr[4],
@@ -5998,6 +6274,13 @@ unsigned int aom_sad8x16_avg_sse2(const uint8_t* src_ptr,
                                   const uint8_t* second_pred);
 #define aom_sad8x16_avg aom_sad8x16_avg_sse2
 
+void aom_sad8x16x3d_c(const uint8_t* src_ptr,
+                      int src_stride,
+                      const uint8_t* const ref_ptr[4],
+                      int ref_stride,
+                      uint32_t sad_array[4]);
+#define aom_sad8x16x3d aom_sad8x16x3d_c
+
 void aom_sad8x16x4d_c(const uint8_t* src_ptr,
                       int src_stride,
                       const uint8_t* const ref_ptr[4],
@@ -6040,6 +6323,13 @@ unsigned int aom_sad8x4_avg_sse2(const uint8_t* src_ptr,
                                  const uint8_t* second_pred);
 #define aom_sad8x4_avg aom_sad8x4_avg_sse2
 
+void aom_sad8x4x3d_c(const uint8_t* src_ptr,
+                     int src_stride,
+                     const uint8_t* const ref_ptr[4],
+                     int ref_stride,
+                     uint32_t sad_array[4]);
+#define aom_sad8x4x3d aom_sad8x4x3d_c
+
 void aom_sad8x4x4d_c(const uint8_t* src_ptr,
                      int src_stride,
                      const uint8_t* const ref_ptr[4],
@@ -6082,6 +6372,13 @@ unsigned int aom_sad8x8_avg_sse2(const uint8_t* src_ptr,
                                  const uint8_t* second_pred);
 #define aom_sad8x8_avg aom_sad8x8_avg_sse2
 
+void aom_sad8x8x3d_c(const uint8_t* src_ptr,
+                     int src_stride,
+                     const uint8_t* const ref_ptr[4],
+                     int ref_stride,
+                     uint32_t sad_array[4]);
+#define aom_sad8x8x3d aom_sad8x8x3d_c
+
 void aom_sad8x8x4d_c(const uint8_t* src_ptr,
                      int src_stride,
                      const uint8_t* const ref_ptr[4],
@@ -6212,7 +6509,16 @@ void aom_sad_skip_16x16x4d_sse2(const uint8_t* src_ptr,
                                 const uint8_t* const ref_ptr[4],
                                 int ref_stride,
                                 uint32_t sad_array[4]);
-#define aom_sad_skip_16x16x4d aom_sad_skip_16x16x4d_sse2
+void aom_sad_skip_16x16x4d_avx2(const uint8_t* src_ptr,
+                                int src_stride,
+                                const uint8_t* const ref_ptr[4],
+                                int ref_stride,
+                                uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad_skip_16x16x4d)(const uint8_t* src_ptr,
+                                          int src_stride,
+                                          const uint8_t* const ref_ptr[4],
+                                          int ref_stride,
+                                          uint32_t sad_array[4]);
 
 unsigned int aom_sad_skip_16x32_c(const uint8_t* src_ptr,
                                   int src_stride,
@@ -6234,7 +6540,16 @@ void aom_sad_skip_16x32x4d_sse2(const uint8_t* src_ptr,
                                 const uint8_t* const ref_ptr[4],
                                 int ref_stride,
                                 uint32_t sad_array[4]);
-#define aom_sad_skip_16x32x4d aom_sad_skip_16x32x4d_sse2
+void aom_sad_skip_16x32x4d_avx2(const uint8_t* src_ptr,
+                                int src_stride,
+                                const uint8_t* const ref_ptr[4],
+                                int ref_stride,
+                                uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad_skip_16x32x4d)(const uint8_t* src_ptr,
+                                          int src_stride,
+                                          const uint8_t* const ref_ptr[4],
+                                          int ref_stride,
+                                          uint32_t sad_array[4]);
 
 unsigned int aom_sad_skip_16x8_c(const uint8_t* src_ptr,
                                  int src_stride,
@@ -6256,7 +6571,16 @@ void aom_sad_skip_16x8x4d_sse2(const uint8_t* src_ptr,
                                const uint8_t* const ref_ptr[4],
                                int ref_stride,
                                uint32_t sad_array[4]);
-#define aom_sad_skip_16x8x4d aom_sad_skip_16x8x4d_sse2
+void aom_sad_skip_16x8x4d_avx2(const uint8_t* src_ptr,
+                               int src_stride,
+                               const uint8_t* const ref_ptr[4],
+                               int ref_stride,
+                               uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad_skip_16x8x4d)(const uint8_t* src_ptr,
+                                         int src_stride,
+                                         const uint8_t* const ref_ptr[4],
+                                         int ref_stride,
+                                         uint32_t sad_array[4]);
 
 unsigned int aom_sad_skip_32x16_c(const uint8_t* src_ptr,
                                   int src_stride,
@@ -9204,13 +9528,12 @@ unsigned int aom_variance8x8_sse2(const uint8_t* src_ptr,
                                   unsigned int* sse);
 #define aom_variance8x8 aom_variance8x8_sse2
 
-int aom_vector_var_c(const int16_t* ref, const int16_t* src, const int bwl);
-int aom_vector_var_sse4_1(const int16_t* ref,
-                          const int16_t* src,
-                          const int bwl);
+int aom_vector_var_c(const int16_t* ref, const int16_t* src, int bwl);
+int aom_vector_var_sse4_1(const int16_t* ref, const int16_t* src, int bwl);
+int aom_vector_var_avx2(const int16_t* ref, const int16_t* src, int bwl);
 RTCD_EXTERN int (*aom_vector_var)(const int16_t* ref,
                                   const int16_t* src,
-                                  const int bwl);
+                                  int bwl);
 
 void aom_dsp_rtcd(void);
 
@@ -9222,1101 +9545,1550 @@ static void setup_rtcd_internal(void) {
   (void)flags;
 
   aom_avg_8x8_quad = aom_avg_8x8_quad_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_avg_8x8_quad = aom_avg_8x8_quad_avx2;
+  }
   aom_blend_a64_hmask = aom_blend_a64_hmask_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     aom_blend_a64_hmask = aom_blend_a64_hmask_sse4_1;
+  }
   aom_blend_a64_mask = aom_blend_a64_mask_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     aom_blend_a64_mask = aom_blend_a64_mask_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_blend_a64_mask = aom_blend_a64_mask_avx2;
+  }
   aom_blend_a64_vmask = aom_blend_a64_vmask_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     aom_blend_a64_vmask = aom_blend_a64_vmask_sse4_1;
+  }
   aom_comp_mask_pred = aom_comp_mask_pred_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_comp_mask_pred = aom_comp_mask_pred_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_comp_mask_pred = aom_comp_mask_pred_avx2;
+  }
   aom_convolve8_horiz = aom_convolve8_horiz_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_convolve8_horiz = aom_convolve8_horiz_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_convolve8_horiz = aom_convolve8_horiz_avx2;
+  }
   aom_convolve8_vert = aom_convolve8_vert_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_convolve8_vert = aom_convolve8_vert_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_convolve8_vert = aom_convolve8_vert_avx2;
+  }
   aom_convolve_copy = aom_convolve_copy_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_convolve_copy = aom_convolve_copy_avx2;
+  }
   aom_dc_128_predictor_32x16 = aom_dc_128_predictor_32x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_128_predictor_32x16 = aom_dc_128_predictor_32x16_avx2;
+  }
   aom_dc_128_predictor_32x32 = aom_dc_128_predictor_32x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_128_predictor_32x32 = aom_dc_128_predictor_32x32_avx2;
+  }
   aom_dc_128_predictor_32x64 = aom_dc_128_predictor_32x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_128_predictor_32x64 = aom_dc_128_predictor_32x64_avx2;
+  }
   aom_dc_128_predictor_64x16 = aom_dc_128_predictor_64x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_128_predictor_64x16 = aom_dc_128_predictor_64x16_avx2;
+  }
   aom_dc_128_predictor_64x32 = aom_dc_128_predictor_64x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_128_predictor_64x32 = aom_dc_128_predictor_64x32_avx2;
+  }
   aom_dc_128_predictor_64x64 = aom_dc_128_predictor_64x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_128_predictor_64x64 = aom_dc_128_predictor_64x64_avx2;
+  }
   aom_dc_left_predictor_32x16 = aom_dc_left_predictor_32x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_left_predictor_32x16 = aom_dc_left_predictor_32x16_avx2;
+  }
   aom_dc_left_predictor_32x32 = aom_dc_left_predictor_32x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_left_predictor_32x32 = aom_dc_left_predictor_32x32_avx2;
+  }
   aom_dc_left_predictor_32x64 = aom_dc_left_predictor_32x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_left_predictor_32x64 = aom_dc_left_predictor_32x64_avx2;
+  }
   aom_dc_left_predictor_64x16 = aom_dc_left_predictor_64x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_left_predictor_64x16 = aom_dc_left_predictor_64x16_avx2;
+  }
   aom_dc_left_predictor_64x32 = aom_dc_left_predictor_64x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_left_predictor_64x32 = aom_dc_left_predictor_64x32_avx2;
+  }
   aom_dc_left_predictor_64x64 = aom_dc_left_predictor_64x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_left_predictor_64x64 = aom_dc_left_predictor_64x64_avx2;
+  }
   aom_dc_predictor_32x16 = aom_dc_predictor_32x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_predictor_32x16 = aom_dc_predictor_32x16_avx2;
+  }
   aom_dc_predictor_32x32 = aom_dc_predictor_32x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_predictor_32x32 = aom_dc_predictor_32x32_avx2;
+  }
   aom_dc_predictor_32x64 = aom_dc_predictor_32x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_predictor_32x64 = aom_dc_predictor_32x64_avx2;
+  }
   aom_dc_predictor_64x16 = aom_dc_predictor_64x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_predictor_64x16 = aom_dc_predictor_64x16_avx2;
+  }
   aom_dc_predictor_64x32 = aom_dc_predictor_64x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_predictor_64x32 = aom_dc_predictor_64x32_avx2;
+  }
   aom_dc_predictor_64x64 = aom_dc_predictor_64x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_predictor_64x64 = aom_dc_predictor_64x64_avx2;
+  }
   aom_dc_top_predictor_32x16 = aom_dc_top_predictor_32x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_top_predictor_32x16 = aom_dc_top_predictor_32x16_avx2;
+  }
   aom_dc_top_predictor_32x32 = aom_dc_top_predictor_32x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_top_predictor_32x32 = aom_dc_top_predictor_32x32_avx2;
+  }
   aom_dc_top_predictor_32x64 = aom_dc_top_predictor_32x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_top_predictor_32x64 = aom_dc_top_predictor_32x64_avx2;
+  }
   aom_dc_top_predictor_64x16 = aom_dc_top_predictor_64x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_top_predictor_64x16 = aom_dc_top_predictor_64x16_avx2;
+  }
   aom_dc_top_predictor_64x32 = aom_dc_top_predictor_64x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_top_predictor_64x32 = aom_dc_top_predictor_64x32_avx2;
+  }
   aom_dc_top_predictor_64x64 = aom_dc_top_predictor_64x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_top_predictor_64x64 = aom_dc_top_predictor_64x64_avx2;
+  }
   aom_dist_wtd_comp_avg_pred = aom_dist_wtd_comp_avg_pred_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_comp_avg_pred = aom_dist_wtd_comp_avg_pred_ssse3;
+  }
   aom_dist_wtd_sad128x128_avg = aom_dist_wtd_sad128x128_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad128x128_avg = aom_dist_wtd_sad128x128_avg_ssse3;
+  }
   aom_dist_wtd_sad128x64_avg = aom_dist_wtd_sad128x64_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad128x64_avg = aom_dist_wtd_sad128x64_avg_ssse3;
+  }
   aom_dist_wtd_sad16x16_avg = aom_dist_wtd_sad16x16_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad16x16_avg = aom_dist_wtd_sad16x16_avg_ssse3;
+  }
   aom_dist_wtd_sad16x32_avg = aom_dist_wtd_sad16x32_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad16x32_avg = aom_dist_wtd_sad16x32_avg_ssse3;
+  }
   aom_dist_wtd_sad16x8_avg = aom_dist_wtd_sad16x8_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad16x8_avg = aom_dist_wtd_sad16x8_avg_ssse3;
+  }
   aom_dist_wtd_sad32x16_avg = aom_dist_wtd_sad32x16_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad32x16_avg = aom_dist_wtd_sad32x16_avg_ssse3;
+  }
   aom_dist_wtd_sad32x32_avg = aom_dist_wtd_sad32x32_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad32x32_avg = aom_dist_wtd_sad32x32_avg_ssse3;
+  }
   aom_dist_wtd_sad32x64_avg = aom_dist_wtd_sad32x64_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad32x64_avg = aom_dist_wtd_sad32x64_avg_ssse3;
+  }
   aom_dist_wtd_sad4x4_avg = aom_dist_wtd_sad4x4_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad4x4_avg = aom_dist_wtd_sad4x4_avg_ssse3;
+  }
   aom_dist_wtd_sad4x8_avg = aom_dist_wtd_sad4x8_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad4x8_avg = aom_dist_wtd_sad4x8_avg_ssse3;
+  }
   aom_dist_wtd_sad64x128_avg = aom_dist_wtd_sad64x128_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad64x128_avg = aom_dist_wtd_sad64x128_avg_ssse3;
+  }
   aom_dist_wtd_sad64x32_avg = aom_dist_wtd_sad64x32_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad64x32_avg = aom_dist_wtd_sad64x32_avg_ssse3;
+  }
   aom_dist_wtd_sad64x64_avg = aom_dist_wtd_sad64x64_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad64x64_avg = aom_dist_wtd_sad64x64_avg_ssse3;
+  }
   aom_dist_wtd_sad8x16_avg = aom_dist_wtd_sad8x16_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad8x16_avg = aom_dist_wtd_sad8x16_avg_ssse3;
+  }
   aom_dist_wtd_sad8x4_avg = aom_dist_wtd_sad8x4_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad8x4_avg = aom_dist_wtd_sad8x4_avg_ssse3;
+  }
   aom_dist_wtd_sad8x8_avg = aom_dist_wtd_sad8x8_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad8x8_avg = aom_dist_wtd_sad8x8_avg_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance128x128 =
       aom_dist_wtd_sub_pixel_avg_variance128x128_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance128x128 =
         aom_dist_wtd_sub_pixel_avg_variance128x128_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance128x64 =
       aom_dist_wtd_sub_pixel_avg_variance128x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance128x64 =
         aom_dist_wtd_sub_pixel_avg_variance128x64_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance16x16 =
       aom_dist_wtd_sub_pixel_avg_variance16x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance16x16 =
         aom_dist_wtd_sub_pixel_avg_variance16x16_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance16x32 =
       aom_dist_wtd_sub_pixel_avg_variance16x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance16x32 =
         aom_dist_wtd_sub_pixel_avg_variance16x32_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance16x8 =
       aom_dist_wtd_sub_pixel_avg_variance16x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance16x8 =
         aom_dist_wtd_sub_pixel_avg_variance16x8_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance32x16 =
       aom_dist_wtd_sub_pixel_avg_variance32x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance32x16 =
         aom_dist_wtd_sub_pixel_avg_variance32x16_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance32x32 =
       aom_dist_wtd_sub_pixel_avg_variance32x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance32x32 =
         aom_dist_wtd_sub_pixel_avg_variance32x32_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance32x64 =
       aom_dist_wtd_sub_pixel_avg_variance32x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance32x64 =
         aom_dist_wtd_sub_pixel_avg_variance32x64_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance4x4 =
       aom_dist_wtd_sub_pixel_avg_variance4x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance4x4 =
         aom_dist_wtd_sub_pixel_avg_variance4x4_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance4x8 =
       aom_dist_wtd_sub_pixel_avg_variance4x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance4x8 =
         aom_dist_wtd_sub_pixel_avg_variance4x8_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance64x128 =
       aom_dist_wtd_sub_pixel_avg_variance64x128_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance64x128 =
         aom_dist_wtd_sub_pixel_avg_variance64x128_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance64x32 =
       aom_dist_wtd_sub_pixel_avg_variance64x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance64x32 =
         aom_dist_wtd_sub_pixel_avg_variance64x32_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance64x64 =
       aom_dist_wtd_sub_pixel_avg_variance64x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance64x64 =
         aom_dist_wtd_sub_pixel_avg_variance64x64_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance8x16 =
       aom_dist_wtd_sub_pixel_avg_variance8x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance8x16 =
         aom_dist_wtd_sub_pixel_avg_variance8x16_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance8x4 =
       aom_dist_wtd_sub_pixel_avg_variance8x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance8x4 =
         aom_dist_wtd_sub_pixel_avg_variance8x4_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance8x8 =
       aom_dist_wtd_sub_pixel_avg_variance8x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance8x8 =
         aom_dist_wtd_sub_pixel_avg_variance8x8_ssse3;
+  }
   aom_fdct8x8 = aom_fdct8x8_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_fdct8x8 = aom_fdct8x8_ssse3;
+  }
   aom_fft16x16_float = aom_fft16x16_float_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_fft16x16_float = aom_fft16x16_float_avx2;
+  }
   aom_fft32x32_float = aom_fft32x32_float_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_fft32x32_float = aom_fft32x32_float_avx2;
+  }
   aom_fft8x8_float = aom_fft8x8_float_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_fft8x8_float = aom_fft8x8_float_avx2;
+  }
   aom_get_blk_sse_sum = aom_get_blk_sse_sum_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_get_blk_sse_sum = aom_get_blk_sse_sum_avx2;
-  aom_get_sse_sum_8x8_quad = aom_get_sse_sum_8x8_quad_sse2;
-  if (flags & HAS_AVX2)
-    aom_get_sse_sum_8x8_quad = aom_get_sse_sum_8x8_quad_avx2;
+  }
+  aom_get_var_sse_sum_16x16_dual = aom_get_var_sse_sum_16x16_dual_sse2;
+  if (flags & HAS_AVX2) {
+    aom_get_var_sse_sum_16x16_dual = aom_get_var_sse_sum_16x16_dual_avx2;
+  }
+  aom_get_var_sse_sum_8x8_quad = aom_get_var_sse_sum_8x8_quad_sse2;
+  if (flags & HAS_AVX2) {
+    aom_get_var_sse_sum_8x8_quad = aom_get_var_sse_sum_8x8_quad_avx2;
+  }
   aom_h_predictor_32x32 = aom_h_predictor_32x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_h_predictor_32x32 = aom_h_predictor_32x32_avx2;
+  }
   aom_hadamard_16x16 = aom_hadamard_16x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_hadamard_16x16 = aom_hadamard_16x16_avx2;
+  }
   aom_hadamard_32x32 = aom_hadamard_32x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_hadamard_32x32 = aom_hadamard_32x32_avx2;
+  }
   aom_hadamard_lp_16x16 = aom_hadamard_lp_16x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_hadamard_lp_16x16 = aom_hadamard_lp_16x16_avx2;
+  }
   aom_hadamard_lp_8x8_dual = aom_hadamard_lp_8x8_dual_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_hadamard_lp_8x8_dual = aom_hadamard_lp_8x8_dual_avx2;
+  }
   aom_ifft16x16_float = aom_ifft16x16_float_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_ifft16x16_float = aom_ifft16x16_float_avx2;
+  }
   aom_ifft32x32_float = aom_ifft32x32_float_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_ifft32x32_float = aom_ifft32x32_float_avx2;
+  }
   aom_ifft8x8_float = aom_ifft8x8_float_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_ifft8x8_float = aom_ifft8x8_float_avx2;
+  }
   aom_int_pro_col = aom_int_pro_col_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_int_pro_col = aom_int_pro_col_avx2;
+  }
   aom_int_pro_row = aom_int_pro_row_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_int_pro_row = aom_int_pro_row_avx2;
+  }
   aom_lowbd_blend_a64_d16_mask = aom_lowbd_blend_a64_d16_mask_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     aom_lowbd_blend_a64_d16_mask = aom_lowbd_blend_a64_d16_mask_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_lowbd_blend_a64_d16_mask = aom_lowbd_blend_a64_d16_mask_avx2;
+  }
   aom_lpf_horizontal_14_quad = aom_lpf_horizontal_14_quad_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_lpf_horizontal_14_quad = aom_lpf_horizontal_14_quad_avx2;
+  }
   aom_lpf_horizontal_6_quad = aom_lpf_horizontal_6_quad_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_lpf_horizontal_6_quad = aom_lpf_horizontal_6_quad_avx2;
+  }
   aom_lpf_horizontal_8_quad = aom_lpf_horizontal_8_quad_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_lpf_horizontal_8_quad = aom_lpf_horizontal_8_quad_avx2;
+  }
+  aom_lpf_vertical_14_quad = aom_lpf_vertical_14_quad_sse2;
+  if (flags & HAS_AVX2) {
+    aom_lpf_vertical_14_quad = aom_lpf_vertical_14_quad_avx2;
+  }
   aom_masked_sad128x128 = aom_masked_sad128x128_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad128x128 = aom_masked_sad128x128_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad128x128 = aom_masked_sad128x128_avx2;
+  }
   aom_masked_sad128x128x4d = aom_masked_sad128x128x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad128x128x4d = aom_masked_sad128x128x4d_ssse3;
+  }
   aom_masked_sad128x64 = aom_masked_sad128x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad128x64 = aom_masked_sad128x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad128x64 = aom_masked_sad128x64_avx2;
+  }
   aom_masked_sad128x64x4d = aom_masked_sad128x64x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad128x64x4d = aom_masked_sad128x64x4d_ssse3;
+  }
   aom_masked_sad16x16 = aom_masked_sad16x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad16x16 = aom_masked_sad16x16_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad16x16 = aom_masked_sad16x16_avx2;
+  }
   aom_masked_sad16x16x4d = aom_masked_sad16x16x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad16x16x4d = aom_masked_sad16x16x4d_ssse3;
+  }
   aom_masked_sad16x32 = aom_masked_sad16x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad16x32 = aom_masked_sad16x32_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad16x32 = aom_masked_sad16x32_avx2;
+  }
   aom_masked_sad16x32x4d = aom_masked_sad16x32x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad16x32x4d = aom_masked_sad16x32x4d_ssse3;
+  }
   aom_masked_sad16x8 = aom_masked_sad16x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad16x8 = aom_masked_sad16x8_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad16x8 = aom_masked_sad16x8_avx2;
+  }
   aom_masked_sad16x8x4d = aom_masked_sad16x8x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad16x8x4d = aom_masked_sad16x8x4d_ssse3;
+  }
   aom_masked_sad32x16 = aom_masked_sad32x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad32x16 = aom_masked_sad32x16_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad32x16 = aom_masked_sad32x16_avx2;
+  }
   aom_masked_sad32x16x4d = aom_masked_sad32x16x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad32x16x4d = aom_masked_sad32x16x4d_ssse3;
+  }
   aom_masked_sad32x32 = aom_masked_sad32x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad32x32 = aom_masked_sad32x32_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad32x32 = aom_masked_sad32x32_avx2;
+  }
   aom_masked_sad32x32x4d = aom_masked_sad32x32x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad32x32x4d = aom_masked_sad32x32x4d_ssse3;
+  }
   aom_masked_sad32x64 = aom_masked_sad32x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad32x64 = aom_masked_sad32x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad32x64 = aom_masked_sad32x64_avx2;
+  }
   aom_masked_sad32x64x4d = aom_masked_sad32x64x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad32x64x4d = aom_masked_sad32x64x4d_ssse3;
+  }
   aom_masked_sad4x4 = aom_masked_sad4x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad4x4 = aom_masked_sad4x4_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad4x4 = aom_masked_sad4x4_avx2;
+  }
   aom_masked_sad4x4x4d = aom_masked_sad4x4x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad4x4x4d = aom_masked_sad4x4x4d_ssse3;
+  }
   aom_masked_sad4x8 = aom_masked_sad4x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad4x8 = aom_masked_sad4x8_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad4x8 = aom_masked_sad4x8_avx2;
+  }
   aom_masked_sad4x8x4d = aom_masked_sad4x8x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad4x8x4d = aom_masked_sad4x8x4d_ssse3;
+  }
   aom_masked_sad64x128 = aom_masked_sad64x128_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad64x128 = aom_masked_sad64x128_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad64x128 = aom_masked_sad64x128_avx2;
+  }
   aom_masked_sad64x128x4d = aom_masked_sad64x128x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad64x128x4d = aom_masked_sad64x128x4d_ssse3;
+  }
   aom_masked_sad64x32 = aom_masked_sad64x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad64x32 = aom_masked_sad64x32_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad64x32 = aom_masked_sad64x32_avx2;
+  }
   aom_masked_sad64x32x4d = aom_masked_sad64x32x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad64x32x4d = aom_masked_sad64x32x4d_ssse3;
+  }
   aom_masked_sad64x64 = aom_masked_sad64x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad64x64 = aom_masked_sad64x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad64x64 = aom_masked_sad64x64_avx2;
+  }
   aom_masked_sad64x64x4d = aom_masked_sad64x64x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad64x64x4d = aom_masked_sad64x64x4d_ssse3;
+  }
   aom_masked_sad8x16 = aom_masked_sad8x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad8x16 = aom_masked_sad8x16_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad8x16 = aom_masked_sad8x16_avx2;
+  }
   aom_masked_sad8x16x4d = aom_masked_sad8x16x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad8x16x4d = aom_masked_sad8x16x4d_ssse3;
+  }
   aom_masked_sad8x4 = aom_masked_sad8x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad8x4 = aom_masked_sad8x4_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad8x4 = aom_masked_sad8x4_avx2;
+  }
   aom_masked_sad8x4x4d = aom_masked_sad8x4x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad8x4x4d = aom_masked_sad8x4x4d_ssse3;
+  }
   aom_masked_sad8x8 = aom_masked_sad8x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad8x8 = aom_masked_sad8x8_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad8x8 = aom_masked_sad8x8_avx2;
+  }
   aom_masked_sad8x8x4d = aom_masked_sad8x8x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad8x8x4d = aom_masked_sad8x8x4d_ssse3;
+  }
   aom_masked_sub_pixel_variance128x128 = aom_masked_sub_pixel_variance128x128_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance128x128 =
         aom_masked_sub_pixel_variance128x128_ssse3;
+  }
   aom_masked_sub_pixel_variance128x64 = aom_masked_sub_pixel_variance128x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance128x64 =
         aom_masked_sub_pixel_variance128x64_ssse3;
+  }
   aom_masked_sub_pixel_variance16x16 = aom_masked_sub_pixel_variance16x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance16x16 =
         aom_masked_sub_pixel_variance16x16_ssse3;
+  }
   aom_masked_sub_pixel_variance16x32 = aom_masked_sub_pixel_variance16x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance16x32 =
         aom_masked_sub_pixel_variance16x32_ssse3;
+  }
   aom_masked_sub_pixel_variance16x8 = aom_masked_sub_pixel_variance16x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance16x8 = aom_masked_sub_pixel_variance16x8_ssse3;
+  }
   aom_masked_sub_pixel_variance32x16 = aom_masked_sub_pixel_variance32x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance32x16 =
         aom_masked_sub_pixel_variance32x16_ssse3;
+  }
   aom_masked_sub_pixel_variance32x32 = aom_masked_sub_pixel_variance32x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance32x32 =
         aom_masked_sub_pixel_variance32x32_ssse3;
+  }
   aom_masked_sub_pixel_variance32x64 = aom_masked_sub_pixel_variance32x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance32x64 =
         aom_masked_sub_pixel_variance32x64_ssse3;
+  }
   aom_masked_sub_pixel_variance4x4 = aom_masked_sub_pixel_variance4x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance4x4 = aom_masked_sub_pixel_variance4x4_ssse3;
+  }
   aom_masked_sub_pixel_variance4x8 = aom_masked_sub_pixel_variance4x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance4x8 = aom_masked_sub_pixel_variance4x8_ssse3;
+  }
   aom_masked_sub_pixel_variance64x128 = aom_masked_sub_pixel_variance64x128_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance64x128 =
         aom_masked_sub_pixel_variance64x128_ssse3;
+  }
   aom_masked_sub_pixel_variance64x32 = aom_masked_sub_pixel_variance64x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance64x32 =
         aom_masked_sub_pixel_variance64x32_ssse3;
+  }
   aom_masked_sub_pixel_variance64x64 = aom_masked_sub_pixel_variance64x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance64x64 =
         aom_masked_sub_pixel_variance64x64_ssse3;
+  }
   aom_masked_sub_pixel_variance8x16 = aom_masked_sub_pixel_variance8x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance8x16 = aom_masked_sub_pixel_variance8x16_ssse3;
+  }
   aom_masked_sub_pixel_variance8x4 = aom_masked_sub_pixel_variance8x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance8x4 = aom_masked_sub_pixel_variance8x4_ssse3;
+  }
   aom_masked_sub_pixel_variance8x8 = aom_masked_sub_pixel_variance8x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance8x8 = aom_masked_sub_pixel_variance8x8_ssse3;
+  }
   aom_mse16x16 = aom_mse16x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_mse16x16 = aom_mse16x16_avx2;
-  aom_mse_16xh_16bit = aom_mse_16xh_16bit_c;
-  if (flags & HAS_AVX2)
+  }
+  aom_mse_16xh_16bit = aom_mse_16xh_16bit_sse2;
+  if (flags & HAS_AVX2) {
     aom_mse_16xh_16bit = aom_mse_16xh_16bit_avx2;
+  }
   aom_mse_wxh_16bit = aom_mse_wxh_16bit_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_mse_wxh_16bit = aom_mse_wxh_16bit_avx2;
+  }
   aom_paeth_predictor_16x16 = aom_paeth_predictor_16x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_16x16 = aom_paeth_predictor_16x16_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_paeth_predictor_16x16 = aom_paeth_predictor_16x16_avx2;
+  }
   aom_paeth_predictor_16x32 = aom_paeth_predictor_16x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_16x32 = aom_paeth_predictor_16x32_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_paeth_predictor_16x32 = aom_paeth_predictor_16x32_avx2;
+  }
   aom_paeth_predictor_16x4 = aom_paeth_predictor_16x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_16x4 = aom_paeth_predictor_16x4_ssse3;
+  }
   aom_paeth_predictor_16x64 = aom_paeth_predictor_16x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_16x64 = aom_paeth_predictor_16x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_paeth_predictor_16x64 = aom_paeth_predictor_16x64_avx2;
+  }
   aom_paeth_predictor_16x8 = aom_paeth_predictor_16x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_16x8 = aom_paeth_predictor_16x8_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_paeth_predictor_16x8 = aom_paeth_predictor_16x8_avx2;
+  }
   aom_paeth_predictor_32x16 = aom_paeth_predictor_32x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_32x16 = aom_paeth_predictor_32x16_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_paeth_predictor_32x16 = aom_paeth_predictor_32x16_avx2;
+  }
   aom_paeth_predictor_32x32 = aom_paeth_predictor_32x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_32x32 = aom_paeth_predictor_32x32_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_paeth_predictor_32x32 = aom_paeth_predictor_32x32_avx2;
+  }
   aom_paeth_predictor_32x64 = aom_paeth_predictor_32x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_32x64 = aom_paeth_predictor_32x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_paeth_predictor_32x64 = aom_paeth_predictor_32x64_avx2;
+  }
   aom_paeth_predictor_32x8 = aom_paeth_predictor_32x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_32x8 = aom_paeth_predictor_32x8_ssse3;
+  }
   aom_paeth_predictor_4x16 = aom_paeth_predictor_4x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_4x16 = aom_paeth_predictor_4x16_ssse3;
+  }
   aom_paeth_predictor_4x4 = aom_paeth_predictor_4x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_4x4 = aom_paeth_predictor_4x4_ssse3;
+  }
   aom_paeth_predictor_4x8 = aom_paeth_predictor_4x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_4x8 = aom_paeth_predictor_4x8_ssse3;
+  }
   aom_paeth_predictor_64x16 = aom_paeth_predictor_64x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_64x16 = aom_paeth_predictor_64x16_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_paeth_predictor_64x16 = aom_paeth_predictor_64x16_avx2;
+  }
   aom_paeth_predictor_64x32 = aom_paeth_predictor_64x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_64x32 = aom_paeth_predictor_64x32_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_paeth_predictor_64x32 = aom_paeth_predictor_64x32_avx2;
+  }
   aom_paeth_predictor_64x64 = aom_paeth_predictor_64x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_64x64 = aom_paeth_predictor_64x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_paeth_predictor_64x64 = aom_paeth_predictor_64x64_avx2;
+  }
   aom_paeth_predictor_8x16 = aom_paeth_predictor_8x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_8x16 = aom_paeth_predictor_8x16_ssse3;
+  }
   aom_paeth_predictor_8x32 = aom_paeth_predictor_8x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_8x32 = aom_paeth_predictor_8x32_ssse3;
+  }
   aom_paeth_predictor_8x4 = aom_paeth_predictor_8x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_8x4 = aom_paeth_predictor_8x4_ssse3;
+  }
   aom_paeth_predictor_8x8 = aom_paeth_predictor_8x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_8x8 = aom_paeth_predictor_8x8_ssse3;
+  }
   aom_quantize_b = aom_quantize_b_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_quantize_b = aom_quantize_b_ssse3;
-  if (flags & HAS_AVX)
+  }
+  if (flags & HAS_AVX) {
     aom_quantize_b = aom_quantize_b_avx;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_quantize_b = aom_quantize_b_avx2;
+  }
   aom_quantize_b_32x32 = aom_quantize_b_32x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_quantize_b_32x32 = aom_quantize_b_32x32_ssse3;
-  if (flags & HAS_AVX)
+  }
+  if (flags & HAS_AVX) {
     aom_quantize_b_32x32 = aom_quantize_b_32x32_avx;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_quantize_b_32x32 = aom_quantize_b_32x32_avx2;
+  }
   aom_quantize_b_64x64 = aom_quantize_b_64x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_quantize_b_64x64 = aom_quantize_b_64x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_quantize_b_64x64 = aom_quantize_b_64x64_avx2;
+  }
   aom_sad128x128 = aom_sad128x128_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad128x128 = aom_sad128x128_avx2;
+  }
   aom_sad128x128_avg = aom_sad128x128_avg_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad128x128_avg = aom_sad128x128_avg_avx2;
+  }
+  aom_sad128x128x3d = aom_sad128x128x3d_c;
+  if (flags & HAS_AVX2) {
+    aom_sad128x128x3d = aom_sad128x128x3d_avx2;
+  }
   aom_sad128x128x4d = aom_sad128x128x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad128x128x4d = aom_sad128x128x4d_avx2;
+  }
   aom_sad128x64 = aom_sad128x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad128x64 = aom_sad128x64_avx2;
+  }
   aom_sad128x64_avg = aom_sad128x64_avg_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad128x64_avg = aom_sad128x64_avg_avx2;
+  }
+  aom_sad128x64x3d = aom_sad128x64x3d_c;
+  if (flags & HAS_AVX2) {
+    aom_sad128x64x3d = aom_sad128x64x3d_avx2;
+  }
   aom_sad128x64x4d = aom_sad128x64x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad128x64x4d = aom_sad128x64x4d_avx2;
+  }
+  aom_sad16x16x3d = aom_sad16x16x3d_c;
+  if (flags & HAS_AVX2) {
+    aom_sad16x16x3d = aom_sad16x16x3d_avx2;
+  }
+  aom_sad16x16x4d = aom_sad16x16x4d_sse2;
+  if (flags & HAS_AVX2) {
+    aom_sad16x16x4d = aom_sad16x16x4d_avx2;
+  }
+  aom_sad16x32x3d = aom_sad16x32x3d_c;
+  if (flags & HAS_AVX2) {
+    aom_sad16x32x3d = aom_sad16x32x3d_avx2;
+  }
+  aom_sad16x32x4d = aom_sad16x32x4d_sse2;
+  if (flags & HAS_AVX2) {
+    aom_sad16x32x4d = aom_sad16x32x4d_avx2;
+  }
+  aom_sad16x8x3d = aom_sad16x8x3d_c;
+  if (flags & HAS_AVX2) {
+    aom_sad16x8x3d = aom_sad16x8x3d_avx2;
+  }
+  aom_sad16x8x4d = aom_sad16x8x4d_sse2;
+  if (flags & HAS_AVX2) {
+    aom_sad16x8x4d = aom_sad16x8x4d_avx2;
+  }
   aom_sad32x16 = aom_sad32x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad32x16 = aom_sad32x16_avx2;
+  }
   aom_sad32x16_avg = aom_sad32x16_avg_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad32x16_avg = aom_sad32x16_avg_avx2;
+  }
+  aom_sad32x16x3d = aom_sad32x16x3d_c;
+  if (flags & HAS_AVX2) {
+    aom_sad32x16x3d = aom_sad32x16x3d_avx2;
+  }
   aom_sad32x16x4d = aom_sad32x16x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad32x16x4d = aom_sad32x16x4d_avx2;
+  }
   aom_sad32x32 = aom_sad32x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad32x32 = aom_sad32x32_avx2;
+  }
   aom_sad32x32_avg = aom_sad32x32_avg_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad32x32_avg = aom_sad32x32_avg_avx2;
+  }
+  aom_sad32x32x3d = aom_sad32x32x3d_c;
+  if (flags & HAS_AVX2) {
+    aom_sad32x32x3d = aom_sad32x32x3d_avx2;
+  }
   aom_sad32x32x4d = aom_sad32x32x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad32x32x4d = aom_sad32x32x4d_avx2;
+  }
   aom_sad32x64 = aom_sad32x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad32x64 = aom_sad32x64_avx2;
+  }
   aom_sad32x64_avg = aom_sad32x64_avg_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad32x64_avg = aom_sad32x64_avg_avx2;
+  }
+  aom_sad32x64x3d = aom_sad32x64x3d_c;
+  if (flags & HAS_AVX2) {
+    aom_sad32x64x3d = aom_sad32x64x3d_avx2;
+  }
   aom_sad32x64x4d = aom_sad32x64x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad32x64x4d = aom_sad32x64x4d_avx2;
+  }
   aom_sad64x128 = aom_sad64x128_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad64x128 = aom_sad64x128_avx2;
+  }
   aom_sad64x128_avg = aom_sad64x128_avg_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad64x128_avg = aom_sad64x128_avg_avx2;
+  }
+  aom_sad64x128x3d = aom_sad64x128x3d_c;
+  if (flags & HAS_AVX2) {
+    aom_sad64x128x3d = aom_sad64x128x3d_avx2;
+  }
   aom_sad64x128x4d = aom_sad64x128x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad64x128x4d = aom_sad64x128x4d_avx2;
+  }
   aom_sad64x32 = aom_sad64x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad64x32 = aom_sad64x32_avx2;
+  }
   aom_sad64x32_avg = aom_sad64x32_avg_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad64x32_avg = aom_sad64x32_avg_avx2;
+  }
+  aom_sad64x32x3d = aom_sad64x32x3d_c;
+  if (flags & HAS_AVX2) {
+    aom_sad64x32x3d = aom_sad64x32x3d_avx2;
+  }
   aom_sad64x32x4d = aom_sad64x32x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad64x32x4d = aom_sad64x32x4d_avx2;
+  }
   aom_sad64x64 = aom_sad64x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad64x64 = aom_sad64x64_avx2;
+  }
   aom_sad64x64_avg = aom_sad64x64_avg_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad64x64_avg = aom_sad64x64_avg_avx2;
+  }
+  aom_sad64x64x3d = aom_sad64x64x3d_c;
+  if (flags & HAS_AVX2) {
+    aom_sad64x64x3d = aom_sad64x64x3d_avx2;
+  }
   aom_sad64x64x4d = aom_sad64x64x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad64x64x4d = aom_sad64x64x4d_avx2;
+  }
   aom_sad_skip_128x128 = aom_sad_skip_128x128_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_128x128 = aom_sad_skip_128x128_avx2;
+  }
   aom_sad_skip_128x128x4d = aom_sad_skip_128x128x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_128x128x4d = aom_sad_skip_128x128x4d_avx2;
+  }
   aom_sad_skip_128x64 = aom_sad_skip_128x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_128x64 = aom_sad_skip_128x64_avx2;
+  }
   aom_sad_skip_128x64x4d = aom_sad_skip_128x64x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_128x64x4d = aom_sad_skip_128x64x4d_avx2;
+  }
+  aom_sad_skip_16x16x4d = aom_sad_skip_16x16x4d_sse2;
+  if (flags & HAS_AVX2) {
+    aom_sad_skip_16x16x4d = aom_sad_skip_16x16x4d_avx2;
+  }
+  aom_sad_skip_16x32x4d = aom_sad_skip_16x32x4d_sse2;
+  if (flags & HAS_AVX2) {
+    aom_sad_skip_16x32x4d = aom_sad_skip_16x32x4d_avx2;
+  }
+  aom_sad_skip_16x8x4d = aom_sad_skip_16x8x4d_sse2;
+  if (flags & HAS_AVX2) {
+    aom_sad_skip_16x8x4d = aom_sad_skip_16x8x4d_avx2;
+  }
   aom_sad_skip_32x16 = aom_sad_skip_32x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_32x16 = aom_sad_skip_32x16_avx2;
+  }
   aom_sad_skip_32x16x4d = aom_sad_skip_32x16x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_32x16x4d = aom_sad_skip_32x16x4d_avx2;
+  }
   aom_sad_skip_32x32 = aom_sad_skip_32x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_32x32 = aom_sad_skip_32x32_avx2;
+  }
   aom_sad_skip_32x32x4d = aom_sad_skip_32x32x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_32x32x4d = aom_sad_skip_32x32x4d_avx2;
+  }
   aom_sad_skip_32x64 = aom_sad_skip_32x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_32x64 = aom_sad_skip_32x64_avx2;
+  }
   aom_sad_skip_32x64x4d = aom_sad_skip_32x64x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_32x64x4d = aom_sad_skip_32x64x4d_avx2;
+  }
   aom_sad_skip_64x128 = aom_sad_skip_64x128_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_64x128 = aom_sad_skip_64x128_avx2;
+  }
   aom_sad_skip_64x128x4d = aom_sad_skip_64x128x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_64x128x4d = aom_sad_skip_64x128x4d_avx2;
+  }
   aom_sad_skip_64x32 = aom_sad_skip_64x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_64x32 = aom_sad_skip_64x32_avx2;
+  }
   aom_sad_skip_64x32x4d = aom_sad_skip_64x32x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_64x32x4d = aom_sad_skip_64x32x4d_avx2;
+  }
   aom_sad_skip_64x64 = aom_sad_skip_64x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_64x64 = aom_sad_skip_64x64_avx2;
+  }
   aom_sad_skip_64x64x4d = aom_sad_skip_64x64x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_64x64x4d = aom_sad_skip_64x64x4d_avx2;
+  }
   aom_satd = aom_satd_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_satd = aom_satd_avx2;
+  }
   aom_satd_lp = aom_satd_lp_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_satd_lp = aom_satd_lp_avx2;
+  }
   aom_scaled_2d = aom_scaled_2d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_scaled_2d = aom_scaled_2d_ssse3;
+  }
   aom_smooth_h_predictor_16x16 = aom_smooth_h_predictor_16x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_16x16 = aom_smooth_h_predictor_16x16_ssse3;
+  }
   aom_smooth_h_predictor_16x32 = aom_smooth_h_predictor_16x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_16x32 = aom_smooth_h_predictor_16x32_ssse3;
+  }
   aom_smooth_h_predictor_16x4 = aom_smooth_h_predictor_16x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_16x4 = aom_smooth_h_predictor_16x4_ssse3;
+  }
   aom_smooth_h_predictor_16x64 = aom_smooth_h_predictor_16x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_16x64 = aom_smooth_h_predictor_16x64_ssse3;
+  }
   aom_smooth_h_predictor_16x8 = aom_smooth_h_predictor_16x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_16x8 = aom_smooth_h_predictor_16x8_ssse3;
+  }
   aom_smooth_h_predictor_32x16 = aom_smooth_h_predictor_32x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_32x16 = aom_smooth_h_predictor_32x16_ssse3;
+  }
   aom_smooth_h_predictor_32x32 = aom_smooth_h_predictor_32x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_32x32 = aom_smooth_h_predictor_32x32_ssse3;
+  }
   aom_smooth_h_predictor_32x64 = aom_smooth_h_predictor_32x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_32x64 = aom_smooth_h_predictor_32x64_ssse3;
+  }
   aom_smooth_h_predictor_32x8 = aom_smooth_h_predictor_32x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_32x8 = aom_smooth_h_predictor_32x8_ssse3;
+  }
   aom_smooth_h_predictor_4x16 = aom_smooth_h_predictor_4x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_4x16 = aom_smooth_h_predictor_4x16_ssse3;
+  }
   aom_smooth_h_predictor_4x4 = aom_smooth_h_predictor_4x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_4x4 = aom_smooth_h_predictor_4x4_ssse3;
+  }
   aom_smooth_h_predictor_4x8 = aom_smooth_h_predictor_4x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_4x8 = aom_smooth_h_predictor_4x8_ssse3;
+  }
   aom_smooth_h_predictor_64x16 = aom_smooth_h_predictor_64x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_64x16 = aom_smooth_h_predictor_64x16_ssse3;
+  }
   aom_smooth_h_predictor_64x32 = aom_smooth_h_predictor_64x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_64x32 = aom_smooth_h_predictor_64x32_ssse3;
+  }
   aom_smooth_h_predictor_64x64 = aom_smooth_h_predictor_64x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_64x64 = aom_smooth_h_predictor_64x64_ssse3;
+  }
   aom_smooth_h_predictor_8x16 = aom_smooth_h_predictor_8x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_8x16 = aom_smooth_h_predictor_8x16_ssse3;
+  }
   aom_smooth_h_predictor_8x32 = aom_smooth_h_predictor_8x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_8x32 = aom_smooth_h_predictor_8x32_ssse3;
+  }
   aom_smooth_h_predictor_8x4 = aom_smooth_h_predictor_8x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_8x4 = aom_smooth_h_predictor_8x4_ssse3;
+  }
   aom_smooth_h_predictor_8x8 = aom_smooth_h_predictor_8x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_8x8 = aom_smooth_h_predictor_8x8_ssse3;
+  }
   aom_smooth_predictor_16x16 = aom_smooth_predictor_16x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_16x16 = aom_smooth_predictor_16x16_ssse3;
+  }
   aom_smooth_predictor_16x32 = aom_smooth_predictor_16x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_16x32 = aom_smooth_predictor_16x32_ssse3;
+  }
   aom_smooth_predictor_16x4 = aom_smooth_predictor_16x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_16x4 = aom_smooth_predictor_16x4_ssse3;
+  }
   aom_smooth_predictor_16x64 = aom_smooth_predictor_16x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_16x64 = aom_smooth_predictor_16x64_ssse3;
+  }
   aom_smooth_predictor_16x8 = aom_smooth_predictor_16x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_16x8 = aom_smooth_predictor_16x8_ssse3;
+  }
   aom_smooth_predictor_32x16 = aom_smooth_predictor_32x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_32x16 = aom_smooth_predictor_32x16_ssse3;
+  }
   aom_smooth_predictor_32x32 = aom_smooth_predictor_32x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_32x32 = aom_smooth_predictor_32x32_ssse3;
+  }
   aom_smooth_predictor_32x64 = aom_smooth_predictor_32x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_32x64 = aom_smooth_predictor_32x64_ssse3;
+  }
   aom_smooth_predictor_32x8 = aom_smooth_predictor_32x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_32x8 = aom_smooth_predictor_32x8_ssse3;
+  }
   aom_smooth_predictor_4x16 = aom_smooth_predictor_4x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_4x16 = aom_smooth_predictor_4x16_ssse3;
+  }
   aom_smooth_predictor_4x4 = aom_smooth_predictor_4x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_4x4 = aom_smooth_predictor_4x4_ssse3;
+  }
   aom_smooth_predictor_4x8 = aom_smooth_predictor_4x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_4x8 = aom_smooth_predictor_4x8_ssse3;
+  }
   aom_smooth_predictor_64x16 = aom_smooth_predictor_64x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_64x16 = aom_smooth_predictor_64x16_ssse3;
+  }
   aom_smooth_predictor_64x32 = aom_smooth_predictor_64x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_64x32 = aom_smooth_predictor_64x32_ssse3;
+  }
   aom_smooth_predictor_64x64 = aom_smooth_predictor_64x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_64x64 = aom_smooth_predictor_64x64_ssse3;
+  }
   aom_smooth_predictor_8x16 = aom_smooth_predictor_8x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_8x16 = aom_smooth_predictor_8x16_ssse3;
+  }
   aom_smooth_predictor_8x32 = aom_smooth_predictor_8x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_8x32 = aom_smooth_predictor_8x32_ssse3;
+  }
   aom_smooth_predictor_8x4 = aom_smooth_predictor_8x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_8x4 = aom_smooth_predictor_8x4_ssse3;
+  }
   aom_smooth_predictor_8x8 = aom_smooth_predictor_8x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_8x8 = aom_smooth_predictor_8x8_ssse3;
+  }
   aom_smooth_v_predictor_16x16 = aom_smooth_v_predictor_16x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_16x16 = aom_smooth_v_predictor_16x16_ssse3;
+  }
   aom_smooth_v_predictor_16x32 = aom_smooth_v_predictor_16x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_16x32 = aom_smooth_v_predictor_16x32_ssse3;
+  }
   aom_smooth_v_predictor_16x4 = aom_smooth_v_predictor_16x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_16x4 = aom_smooth_v_predictor_16x4_ssse3;
+  }
   aom_smooth_v_predictor_16x64 = aom_smooth_v_predictor_16x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_16x64 = aom_smooth_v_predictor_16x64_ssse3;
+  }
   aom_smooth_v_predictor_16x8 = aom_smooth_v_predictor_16x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_16x8 = aom_smooth_v_predictor_16x8_ssse3;
+  }
   aom_smooth_v_predictor_32x16 = aom_smooth_v_predictor_32x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_32x16 = aom_smooth_v_predictor_32x16_ssse3;
+  }
   aom_smooth_v_predictor_32x32 = aom_smooth_v_predictor_32x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_32x32 = aom_smooth_v_predictor_32x32_ssse3;
+  }
   aom_smooth_v_predictor_32x64 = aom_smooth_v_predictor_32x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_32x64 = aom_smooth_v_predictor_32x64_ssse3;
+  }
   aom_smooth_v_predictor_32x8 = aom_smooth_v_predictor_32x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_32x8 = aom_smooth_v_predictor_32x8_ssse3;
+  }
   aom_smooth_v_predictor_4x16 = aom_smooth_v_predictor_4x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_4x16 = aom_smooth_v_predictor_4x16_ssse3;
+  }
   aom_smooth_v_predictor_4x4 = aom_smooth_v_predictor_4x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_4x4 = aom_smooth_v_predictor_4x4_ssse3;
+  }
   aom_smooth_v_predictor_4x8 = aom_smooth_v_predictor_4x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_4x8 = aom_smooth_v_predictor_4x8_ssse3;
+  }
   aom_smooth_v_predictor_64x16 = aom_smooth_v_predictor_64x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_64x16 = aom_smooth_v_predictor_64x16_ssse3;
+  }
   aom_smooth_v_predictor_64x32 = aom_smooth_v_predictor_64x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_64x32 = aom_smooth_v_predictor_64x32_ssse3;
+  }
   aom_smooth_v_predictor_64x64 = aom_smooth_v_predictor_64x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_64x64 = aom_smooth_v_predictor_64x64_ssse3;
+  }
   aom_smooth_v_predictor_8x16 = aom_smooth_v_predictor_8x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_8x16 = aom_smooth_v_predictor_8x16_ssse3;
+  }
   aom_smooth_v_predictor_8x32 = aom_smooth_v_predictor_8x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_8x32 = aom_smooth_v_predictor_8x32_ssse3;
+  }
   aom_smooth_v_predictor_8x4 = aom_smooth_v_predictor_8x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_8x4 = aom_smooth_v_predictor_8x4_ssse3;
+  }
   aom_smooth_v_predictor_8x8 = aom_smooth_v_predictor_8x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_8x8 = aom_smooth_v_predictor_8x8_ssse3;
+  }
   aom_sse = aom_sse_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     aom_sse = aom_sse_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sse = aom_sse_avx2;
+  }
   aom_sub_pixel_avg_variance128x128 = aom_sub_pixel_avg_variance128x128_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance128x128 = aom_sub_pixel_avg_variance128x128_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_avg_variance128x128 = aom_sub_pixel_avg_variance128x128_avx2;
+  }
   aom_sub_pixel_avg_variance128x64 = aom_sub_pixel_avg_variance128x64_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance128x64 = aom_sub_pixel_avg_variance128x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_avg_variance128x64 = aom_sub_pixel_avg_variance128x64_avx2;
+  }
   aom_sub_pixel_avg_variance16x16 = aom_sub_pixel_avg_variance16x16_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance16x16 = aom_sub_pixel_avg_variance16x16_ssse3;
+  }
   aom_sub_pixel_avg_variance16x32 = aom_sub_pixel_avg_variance16x32_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance16x32 = aom_sub_pixel_avg_variance16x32_ssse3;
+  }
   aom_sub_pixel_avg_variance16x8 = aom_sub_pixel_avg_variance16x8_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance16x8 = aom_sub_pixel_avg_variance16x8_ssse3;
+  }
   aom_sub_pixel_avg_variance32x16 = aom_sub_pixel_avg_variance32x16_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance32x16 = aom_sub_pixel_avg_variance32x16_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_avg_variance32x16 = aom_sub_pixel_avg_variance32x16_avx2;
+  }
   aom_sub_pixel_avg_variance32x32 = aom_sub_pixel_avg_variance32x32_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance32x32 = aom_sub_pixel_avg_variance32x32_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_avg_variance32x32 = aom_sub_pixel_avg_variance32x32_avx2;
+  }
   aom_sub_pixel_avg_variance32x64 = aom_sub_pixel_avg_variance32x64_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance32x64 = aom_sub_pixel_avg_variance32x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_avg_variance32x64 = aom_sub_pixel_avg_variance32x64_avx2;
+  }
   aom_sub_pixel_avg_variance4x4 = aom_sub_pixel_avg_variance4x4_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance4x4 = aom_sub_pixel_avg_variance4x4_ssse3;
+  }
   aom_sub_pixel_avg_variance4x8 = aom_sub_pixel_avg_variance4x8_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance4x8 = aom_sub_pixel_avg_variance4x8_ssse3;
+  }
   aom_sub_pixel_avg_variance64x128 = aom_sub_pixel_avg_variance64x128_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance64x128 = aom_sub_pixel_avg_variance64x128_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_avg_variance64x128 = aom_sub_pixel_avg_variance64x128_avx2;
+  }
   aom_sub_pixel_avg_variance64x32 = aom_sub_pixel_avg_variance64x32_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance64x32 = aom_sub_pixel_avg_variance64x32_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_avg_variance64x32 = aom_sub_pixel_avg_variance64x32_avx2;
+  }
   aom_sub_pixel_avg_variance64x64 = aom_sub_pixel_avg_variance64x64_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance64x64 = aom_sub_pixel_avg_variance64x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_avg_variance64x64 = aom_sub_pixel_avg_variance64x64_avx2;
+  }
   aom_sub_pixel_avg_variance8x16 = aom_sub_pixel_avg_variance8x16_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance8x16 = aom_sub_pixel_avg_variance8x16_ssse3;
+  }
   aom_sub_pixel_avg_variance8x4 = aom_sub_pixel_avg_variance8x4_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance8x4 = aom_sub_pixel_avg_variance8x4_ssse3;
+  }
   aom_sub_pixel_avg_variance8x8 = aom_sub_pixel_avg_variance8x8_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance8x8 = aom_sub_pixel_avg_variance8x8_ssse3;
+  }
   aom_sub_pixel_variance128x128 = aom_sub_pixel_variance128x128_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance128x128 = aom_sub_pixel_variance128x128_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_variance128x128 = aom_sub_pixel_variance128x128_avx2;
+  }
   aom_sub_pixel_variance128x64 = aom_sub_pixel_variance128x64_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance128x64 = aom_sub_pixel_variance128x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_variance128x64 = aom_sub_pixel_variance128x64_avx2;
+  }
   aom_sub_pixel_variance16x16 = aom_sub_pixel_variance16x16_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance16x16 = aom_sub_pixel_variance16x16_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_variance16x16 = aom_sub_pixel_variance16x16_avx2;
+  }
   aom_sub_pixel_variance16x32 = aom_sub_pixel_variance16x32_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance16x32 = aom_sub_pixel_variance16x32_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_variance16x32 = aom_sub_pixel_variance16x32_avx2;
+  }
   aom_sub_pixel_variance16x8 = aom_sub_pixel_variance16x8_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance16x8 = aom_sub_pixel_variance16x8_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_variance16x8 = aom_sub_pixel_variance16x8_avx2;
+  }
   aom_sub_pixel_variance32x16 = aom_sub_pixel_variance32x16_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance32x16 = aom_sub_pixel_variance32x16_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_variance32x16 = aom_sub_pixel_variance32x16_avx2;
+  }
   aom_sub_pixel_variance32x32 = aom_sub_pixel_variance32x32_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance32x32 = aom_sub_pixel_variance32x32_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_variance32x32 = aom_sub_pixel_variance32x32_avx2;
+  }
   aom_sub_pixel_variance32x64 = aom_sub_pixel_variance32x64_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance32x64 = aom_sub_pixel_variance32x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_variance32x64 = aom_sub_pixel_variance32x64_avx2;
+  }
   aom_sub_pixel_variance4x4 = aom_sub_pixel_variance4x4_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance4x4 = aom_sub_pixel_variance4x4_ssse3;
+  }
   aom_sub_pixel_variance4x8 = aom_sub_pixel_variance4x8_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance4x8 = aom_sub_pixel_variance4x8_ssse3;
+  }
   aom_sub_pixel_variance64x128 = aom_sub_pixel_variance64x128_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance64x128 = aom_sub_pixel_variance64x128_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_variance64x128 = aom_sub_pixel_variance64x128_avx2;
+  }
   aom_sub_pixel_variance64x32 = aom_sub_pixel_variance64x32_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance64x32 = aom_sub_pixel_variance64x32_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_variance64x32 = aom_sub_pixel_variance64x32_avx2;
+  }
   aom_sub_pixel_variance64x64 = aom_sub_pixel_variance64x64_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance64x64 = aom_sub_pixel_variance64x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_variance64x64 = aom_sub_pixel_variance64x64_avx2;
+  }
   aom_sub_pixel_variance8x16 = aom_sub_pixel_variance8x16_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance8x16 = aom_sub_pixel_variance8x16_ssse3;
+  }
   aom_sub_pixel_variance8x4 = aom_sub_pixel_variance8x4_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance8x4 = aom_sub_pixel_variance8x4_ssse3;
+  }
   aom_sub_pixel_variance8x8 = aom_sub_pixel_variance8x8_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance8x8 = aom_sub_pixel_variance8x8_ssse3;
+  }
   aom_subtract_block = aom_subtract_block_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_subtract_block = aom_subtract_block_avx2;
+  }
   aom_sum_squares_2d_i16 = aom_sum_squares_2d_i16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sum_squares_2d_i16 = aom_sum_squares_2d_i16_avx2;
+  }
   aom_sum_sse_2d_i16 = aom_sum_sse_2d_i16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sum_sse_2d_i16 = aom_sum_sse_2d_i16_avx2;
+  }
   aom_v_predictor_32x16 = aom_v_predictor_32x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_v_predictor_32x16 = aom_v_predictor_32x16_avx2;
+  }
   aom_v_predictor_32x32 = aom_v_predictor_32x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_v_predictor_32x32 = aom_v_predictor_32x32_avx2;
+  }
   aom_v_predictor_32x64 = aom_v_predictor_32x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_v_predictor_32x64 = aom_v_predictor_32x64_avx2;
+  }
   aom_v_predictor_64x16 = aom_v_predictor_64x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_v_predictor_64x16 = aom_v_predictor_64x16_avx2;
+  }
   aom_v_predictor_64x32 = aom_v_predictor_64x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_v_predictor_64x32 = aom_v_predictor_64x32_avx2;
+  }
   aom_v_predictor_64x64 = aom_v_predictor_64x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_v_predictor_64x64 = aom_v_predictor_64x64_avx2;
+  }
   aom_var_2d_u16 = aom_var_2d_u16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_var_2d_u16 = aom_var_2d_u16_avx2;
+  }
   aom_var_2d_u8 = aom_var_2d_u8_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_var_2d_u8 = aom_var_2d_u8_avx2;
+  }
   aom_variance128x128 = aom_variance128x128_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_variance128x128 = aom_variance128x128_avx2;
+  }
   aom_variance128x64 = aom_variance128x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_variance128x64 = aom_variance128x64_avx2;
+  }
   aom_variance16x16 = aom_variance16x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_variance16x16 = aom_variance16x16_avx2;
+  }
   aom_variance16x32 = aom_variance16x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_variance16x32 = aom_variance16x32_avx2;
+  }
   aom_variance16x8 = aom_variance16x8_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_variance16x8 = aom_variance16x8_avx2;
+  }
   aom_variance32x16 = aom_variance32x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_variance32x16 = aom_variance32x16_avx2;
+  }
   aom_variance32x32 = aom_variance32x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_variance32x32 = aom_variance32x32_avx2;
+  }
   aom_variance32x64 = aom_variance32x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_variance32x64 = aom_variance32x64_avx2;
+  }
   aom_variance64x128 = aom_variance64x128_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_variance64x128 = aom_variance64x128_avx2;
+  }
   aom_variance64x32 = aom_variance64x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_variance64x32 = aom_variance64x32_avx2;
+  }
   aom_variance64x64 = aom_variance64x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_variance64x64 = aom_variance64x64_avx2;
+  }
   aom_vector_var = aom_vector_var_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     aom_vector_var = aom_vector_var_sse4_1;
+  }
+  if (flags & HAS_AVX2) {
+    aom_vector_var = aom_vector_var_avx2;
+  }
 }
 #endif
 
diff --git a/libaom/source/config/linux/x64/config/aom_scale_rtcd.h b/libaom/source/config/linux/x64/config/aom_scale_rtcd.h
index 5e6c033..ccd7baa 100644
--- a/libaom/source/config/linux/x64/config/aom_scale_rtcd.h
+++ b/libaom/source/config/linux/x64/config/aom_scale_rtcd.h
@@ -155,6 +155,7 @@ void aom_yv12_partial_copy_y_c(const struct yv12_buffer_config* src_ybc,
 int aom_yv12_realloc_with_new_border_c(struct yv12_buffer_config* ybf,
                                        int new_border,
                                        int byte_alignment,
+                                       int num_pyramid_levels,
                                        int num_planes);
 #define aom_yv12_realloc_with_new_border aom_yv12_realloc_with_new_border_c
 
diff --git a/libaom/source/config/linux/x64/config/av1_rtcd.h b/libaom/source/config/linux/x64/config/av1_rtcd.h
index 6d8a64d..05aae12 100644
--- a/libaom/source/config/linux/x64/config/av1_rtcd.h
+++ b/libaom/source/config/linux/x64/config/av1_rtcd.h
@@ -417,76 +417,56 @@ RTCD_EXTERN int64_t (*av1_calc_frame_error)(const uint8_t* const ref,
                                             int p_height,
                                             int p_stride);
 
-void av1_calc_indices_dim1_c(const int* data,
-                             const int* centroids,
+void av1_calc_indices_dim1_c(const int16_t* data,
+                             const int16_t* centroids,
                              uint8_t* indices,
+                             int64_t* total_dist,
                              int n,
                              int k);
-void av1_calc_indices_dim1_sse2(const int* data,
-                                const int* centroids,
+void av1_calc_indices_dim1_sse2(const int16_t* data,
+                                const int16_t* centroids,
                                 uint8_t* indices,
+                                int64_t* total_dist,
                                 int n,
                                 int k);
-void av1_calc_indices_dim1_avx2(const int* data,
-                                const int* centroids,
+void av1_calc_indices_dim1_avx2(const int16_t* data,
+                                const int16_t* centroids,
                                 uint8_t* indices,
+                                int64_t* total_dist,
                                 int n,
                                 int k);
-RTCD_EXTERN void (*av1_calc_indices_dim1)(const int* data,
-                                          const int* centroids,
+RTCD_EXTERN void (*av1_calc_indices_dim1)(const int16_t* data,
+                                          const int16_t* centroids,
                                           uint8_t* indices,
+                                          int64_t* total_dist,
                                           int n,
                                           int k);
 
-void av1_calc_indices_dim2_c(const int* data,
-                             const int* centroids,
+void av1_calc_indices_dim2_c(const int16_t* data,
+                             const int16_t* centroids,
                              uint8_t* indices,
+                             int64_t* total_dist,
                              int n,
                              int k);
-void av1_calc_indices_dim2_avx2(const int* data,
-                                const int* centroids,
+void av1_calc_indices_dim2_sse2(const int16_t* data,
+                                const int16_t* centroids,
                                 uint8_t* indices,
+                                int64_t* total_dist,
                                 int n,
                                 int k);
-RTCD_EXTERN void (*av1_calc_indices_dim2)(const int* data,
-                                          const int* centroids,
+void av1_calc_indices_dim2_avx2(const int16_t* data,
+                                const int16_t* centroids,
+                                uint8_t* indices,
+                                int64_t* total_dist,
+                                int n,
+                                int k);
+RTCD_EXTERN void (*av1_calc_indices_dim2)(const int16_t* data,
+                                          const int16_t* centroids,
                                           uint8_t* indices,
+                                          int64_t* total_dist,
                                           int n,
                                           int k);
 
-double av1_compute_cross_correlation_c(unsigned char* im1,
-                                       int stride1,
-                                       int x1,
-                                       int y1,
-                                       unsigned char* im2,
-                                       int stride2,
-                                       int x2,
-                                       int y2);
-double av1_compute_cross_correlation_sse4_1(unsigned char* im1,
-                                            int stride1,
-                                            int x1,
-                                            int y1,
-                                            unsigned char* im2,
-                                            int stride2,
-                                            int x2,
-                                            int y2);
-double av1_compute_cross_correlation_avx2(unsigned char* im1,
-                                          int stride1,
-                                          int x1,
-                                          int y1,
-                                          unsigned char* im2,
-                                          int stride2,
-                                          int x2,
-                                          int y2);
-RTCD_EXTERN double (*av1_compute_cross_correlation)(unsigned char* im1,
-                                                    int stride1,
-                                                    int x1,
-                                                    int y1,
-                                                    unsigned char* im2,
-                                                    int stride2,
-                                                    int x2,
-                                                    int y2);
-
 void av1_convolve_2d_scale_c(const uint8_t* src,
                              int src_stride,
                              uint8_t* dst,
@@ -1307,14 +1287,6 @@ void av1_get_nz_map_contexts_sse2(const uint8_t* const levels,
                                   int8_t* const coeff_contexts);
 #define av1_get_nz_map_contexts av1_get_nz_map_contexts_sse2
 
-void av1_highbd_fwht4x4_c(const int16_t* input, tran_low_t* output, int stride);
-void av1_highbd_fwht4x4_sse4_1(const int16_t* input,
-                               tran_low_t* output,
-                               int stride);
-RTCD_EXTERN void (*av1_highbd_fwht4x4)(const int16_t* input,
-                                       tran_low_t* output,
-                                       int stride);
-
 void av1_highbd_inv_txfm_add_c(const tran_low_t* input,
                                uint8_t* dest,
                                int stride,
@@ -2149,75 +2121,75 @@ void cdef_copy_rect8_16bit_to_16bit_c(uint16_t* dst,
                                       int dstride,
                                       const uint16_t* src,
                                       int sstride,
-                                      int v,
-                                      int h);
+                                      int width,
+                                      int height);
 void cdef_copy_rect8_16bit_to_16bit_sse2(uint16_t* dst,
                                          int dstride,
                                          const uint16_t* src,
                                          int sstride,
-                                         int v,
-                                         int h);
+                                         int width,
+                                         int height);
 void cdef_copy_rect8_16bit_to_16bit_ssse3(uint16_t* dst,
                                           int dstride,
                                           const uint16_t* src,
                                           int sstride,
-                                          int v,
-                                          int h);
+                                          int width,
+                                          int height);
 void cdef_copy_rect8_16bit_to_16bit_sse4_1(uint16_t* dst,
                                            int dstride,
                                            const uint16_t* src,
                                            int sstride,
-                                           int v,
-                                           int h);
+                                           int width,
+                                           int height);
 void cdef_copy_rect8_16bit_to_16bit_avx2(uint16_t* dst,
                                          int dstride,
                                          const uint16_t* src,
                                          int sstride,
-                                         int v,
-                                         int h);
+                                         int width,
+                                         int height);
 RTCD_EXTERN void (*cdef_copy_rect8_16bit_to_16bit)(uint16_t* dst,
                                                    int dstride,
                                                    const uint16_t* src,
                                                    int sstride,
-                                                   int v,
-                                                   int h);
+                                                   int width,
+                                                   int height);
 
 void cdef_copy_rect8_8bit_to_16bit_c(uint16_t* dst,
                                      int dstride,
                                      const uint8_t* src,
                                      int sstride,
-                                     int v,
-                                     int h);
+                                     int width,
+                                     int height);
 void cdef_copy_rect8_8bit_to_16bit_sse2(uint16_t* dst,
                                         int dstride,
                                         const uint8_t* src,
                                         int sstride,
-                                        int v,
-                                        int h);
+                                        int width,
+                                        int height);
 void cdef_copy_rect8_8bit_to_16bit_ssse3(uint16_t* dst,
                                          int dstride,
                                          const uint8_t* src,
                                          int sstride,
-                                         int v,
-                                         int h);
+                                         int width,
+                                         int height);
 void cdef_copy_rect8_8bit_to_16bit_sse4_1(uint16_t* dst,
                                           int dstride,
                                           const uint8_t* src,
                                           int sstride,
-                                          int v,
-                                          int h);
+                                          int width,
+                                          int height);
 void cdef_copy_rect8_8bit_to_16bit_avx2(uint16_t* dst,
                                         int dstride,
                                         const uint8_t* src,
                                         int sstride,
-                                        int v,
-                                        int h);
+                                        int width,
+                                        int height);
 RTCD_EXTERN void (*cdef_copy_rect8_8bit_to_16bit)(uint16_t* dst,
                                                   int dstride,
                                                   const uint8_t* src,
                                                   int sstride,
-                                                  int v,
-                                                  int h);
+                                                  int width,
+                                                  int height);
 
 void cdef_filter_16_0_c(void* dst16,
                         int dstride,
@@ -2868,373 +2840,500 @@ static void setup_rtcd_internal(void) {
   (void)flags;
 
   aom_dist_wtd_comp_avg_upsampled_pred = aom_dist_wtd_comp_avg_upsampled_pred_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_comp_avg_upsampled_pred =
         aom_dist_wtd_comp_avg_upsampled_pred_ssse3;
+  }
   av1_apply_selfguided_restoration = av1_apply_selfguided_restoration_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_apply_selfguided_restoration = av1_apply_selfguided_restoration_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_apply_selfguided_restoration = av1_apply_selfguided_restoration_avx2;
+  }
   av1_block_error = av1_block_error_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_block_error = av1_block_error_avx2;
+  }
   av1_block_error_lp = av1_block_error_lp_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_block_error_lp = av1_block_error_lp_avx2;
+  }
   av1_build_compound_diffwtd_mask = av1_build_compound_diffwtd_mask_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_build_compound_diffwtd_mask = av1_build_compound_diffwtd_mask_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_build_compound_diffwtd_mask = av1_build_compound_diffwtd_mask_avx2;
+  }
   av1_build_compound_diffwtd_mask_d16 = av1_build_compound_diffwtd_mask_d16_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_build_compound_diffwtd_mask_d16 =
         av1_build_compound_diffwtd_mask_d16_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_build_compound_diffwtd_mask_d16 =
         av1_build_compound_diffwtd_mask_d16_avx2;
+  }
   av1_calc_frame_error = av1_calc_frame_error_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_calc_frame_error = av1_calc_frame_error_avx2;
+  }
   av1_calc_indices_dim1 = av1_calc_indices_dim1_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_calc_indices_dim1 = av1_calc_indices_dim1_avx2;
-  av1_calc_indices_dim2 = av1_calc_indices_dim2_c;
-  if (flags & HAS_AVX2)
+  }
+  av1_calc_indices_dim2 = av1_calc_indices_dim2_sse2;
+  if (flags & HAS_AVX2) {
     av1_calc_indices_dim2 = av1_calc_indices_dim2_avx2;
-  av1_compute_cross_correlation = av1_compute_cross_correlation_c;
-  if (flags & HAS_SSE4_1)
-    av1_compute_cross_correlation = av1_compute_cross_correlation_sse4_1;
-  if (flags & HAS_AVX2)
-    av1_compute_cross_correlation = av1_compute_cross_correlation_avx2;
+  }
   av1_convolve_2d_scale = av1_convolve_2d_scale_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_convolve_2d_scale = av1_convolve_2d_scale_sse4_1;
+  }
   av1_convolve_2d_sr = av1_convolve_2d_sr_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_convolve_2d_sr = av1_convolve_2d_sr_avx2;
+  }
   av1_convolve_horiz_rs = av1_convolve_horiz_rs_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_convolve_horiz_rs = av1_convolve_horiz_rs_sse4_1;
+  }
   av1_convolve_x_sr = av1_convolve_x_sr_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_convolve_x_sr = av1_convolve_x_sr_avx2;
+  }
   av1_convolve_y_sr = av1_convolve_y_sr_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_convolve_y_sr = av1_convolve_y_sr_avx2;
+  }
   av1_dist_wtd_convolve_2d = av1_dist_wtd_convolve_2d_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     av1_dist_wtd_convolve_2d = av1_dist_wtd_convolve_2d_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_dist_wtd_convolve_2d = av1_dist_wtd_convolve_2d_avx2;
+  }
   av1_dist_wtd_convolve_2d_copy = av1_dist_wtd_convolve_2d_copy_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_dist_wtd_convolve_2d_copy = av1_dist_wtd_convolve_2d_copy_avx2;
+  }
   av1_dist_wtd_convolve_x = av1_dist_wtd_convolve_x_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_dist_wtd_convolve_x = av1_dist_wtd_convolve_x_avx2;
+  }
   av1_dist_wtd_convolve_y = av1_dist_wtd_convolve_y_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_dist_wtd_convolve_y = av1_dist_wtd_convolve_y_avx2;
+  }
   av1_dr_prediction_z1 = av1_dr_prediction_z1_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_dr_prediction_z1 = av1_dr_prediction_z1_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_dr_prediction_z1 = av1_dr_prediction_z1_avx2;
+  }
   av1_dr_prediction_z2 = av1_dr_prediction_z2_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_dr_prediction_z2 = av1_dr_prediction_z2_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_dr_prediction_z2 = av1_dr_prediction_z2_avx2;
+  }
   av1_dr_prediction_z3 = av1_dr_prediction_z3_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_dr_prediction_z3 = av1_dr_prediction_z3_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_dr_prediction_z3 = av1_dr_prediction_z3_avx2;
+  }
   av1_filter_intra_edge = av1_filter_intra_edge_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_filter_intra_edge = av1_filter_intra_edge_sse4_1;
+  }
   av1_filter_intra_edge_high = av1_filter_intra_edge_high_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_filter_intra_edge_high = av1_filter_intra_edge_high_sse4_1;
+  }
   av1_filter_intra_predictor = av1_filter_intra_predictor_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_filter_intra_predictor = av1_filter_intra_predictor_sse4_1;
+  }
   av1_fwd_txfm2d_16x16 = av1_fwd_txfm2d_16x16_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_16x16 = av1_fwd_txfm2d_16x16_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_fwd_txfm2d_16x16 = av1_fwd_txfm2d_16x16_avx2;
+  }
   av1_fwd_txfm2d_16x32 = av1_fwd_txfm2d_16x32_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_16x32 = av1_fwd_txfm2d_16x32_sse4_1;
+  }
   av1_fwd_txfm2d_16x4 = av1_fwd_txfm2d_16x4_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_16x4 = av1_fwd_txfm2d_16x4_sse4_1;
+  }
   av1_fwd_txfm2d_16x8 = av1_fwd_txfm2d_16x8_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_16x8 = av1_fwd_txfm2d_16x8_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_fwd_txfm2d_16x8 = av1_fwd_txfm2d_16x8_avx2;
+  }
   av1_fwd_txfm2d_32x16 = av1_fwd_txfm2d_32x16_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_32x16 = av1_fwd_txfm2d_32x16_sse4_1;
+  }
   av1_fwd_txfm2d_32x32 = av1_fwd_txfm2d_32x32_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_32x32 = av1_fwd_txfm2d_32x32_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_fwd_txfm2d_32x32 = av1_fwd_txfm2d_32x32_avx2;
+  }
   av1_fwd_txfm2d_32x64 = av1_fwd_txfm2d_32x64_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_32x64 = av1_fwd_txfm2d_32x64_sse4_1;
+  }
   av1_fwd_txfm2d_4x4 = av1_fwd_txfm2d_4x4_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_4x4 = av1_fwd_txfm2d_4x4_sse4_1;
+  }
   av1_fwd_txfm2d_4x8 = av1_fwd_txfm2d_4x8_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_4x8 = av1_fwd_txfm2d_4x8_sse4_1;
+  }
   av1_fwd_txfm2d_64x32 = av1_fwd_txfm2d_64x32_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_64x32 = av1_fwd_txfm2d_64x32_sse4_1;
+  }
   av1_fwd_txfm2d_64x64 = av1_fwd_txfm2d_64x64_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_64x64 = av1_fwd_txfm2d_64x64_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_fwd_txfm2d_64x64 = av1_fwd_txfm2d_64x64_avx2;
+  }
   av1_fwd_txfm2d_8x16 = av1_fwd_txfm2d_8x16_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_8x16 = av1_fwd_txfm2d_8x16_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_fwd_txfm2d_8x16 = av1_fwd_txfm2d_8x16_avx2;
+  }
   av1_fwd_txfm2d_8x4 = av1_fwd_txfm2d_8x4_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_8x4 = av1_fwd_txfm2d_8x4_sse4_1;
+  }
   av1_fwd_txfm2d_8x8 = av1_fwd_txfm2d_8x8_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_8x8 = av1_fwd_txfm2d_8x8_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_fwd_txfm2d_8x8 = av1_fwd_txfm2d_8x8_avx2;
+  }
   av1_fwht4x4 = av1_fwht4x4_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwht4x4 = av1_fwht4x4_sse4_1;
+  }
   av1_get_crc32c_value = av1_get_crc32c_value_c;
-  if (flags & HAS_SSE4_2)
+  if (flags & HAS_SSE4_2) {
     av1_get_crc32c_value = av1_get_crc32c_value_sse4_2;
+  }
   av1_get_horver_correlation_full = av1_get_horver_correlation_full_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_get_horver_correlation_full = av1_get_horver_correlation_full_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_get_horver_correlation_full = av1_get_horver_correlation_full_avx2;
-  av1_highbd_fwht4x4 = av1_highbd_fwht4x4_c;
-  if (flags & HAS_SSE4_1)
-    av1_highbd_fwht4x4 = av1_highbd_fwht4x4_sse4_1;
+  }
   av1_highbd_inv_txfm_add = av1_highbd_inv_txfm_add_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_highbd_inv_txfm_add = av1_highbd_inv_txfm_add_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_highbd_inv_txfm_add = av1_highbd_inv_txfm_add_avx2;
+  }
   av1_highbd_inv_txfm_add_16x4 = av1_highbd_inv_txfm_add_16x4_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_highbd_inv_txfm_add_16x4 = av1_highbd_inv_txfm_add_16x4_sse4_1;
+  }
   av1_highbd_inv_txfm_add_4x16 = av1_highbd_inv_txfm_add_4x16_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_highbd_inv_txfm_add_4x16 = av1_highbd_inv_txfm_add_4x16_sse4_1;
+  }
   av1_highbd_inv_txfm_add_4x4 = av1_highbd_inv_txfm_add_4x4_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_highbd_inv_txfm_add_4x4 = av1_highbd_inv_txfm_add_4x4_sse4_1;
+  }
   av1_highbd_inv_txfm_add_4x8 = av1_highbd_inv_txfm_add_4x8_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_highbd_inv_txfm_add_4x8 = av1_highbd_inv_txfm_add_4x8_sse4_1;
+  }
   av1_highbd_inv_txfm_add_8x4 = av1_highbd_inv_txfm_add_8x4_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_highbd_inv_txfm_add_8x4 = av1_highbd_inv_txfm_add_8x4_sse4_1;
+  }
   av1_highbd_inv_txfm_add_8x8 = av1_highbd_inv_txfm_add_8x8_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_highbd_inv_txfm_add_8x8 = av1_highbd_inv_txfm_add_8x8_sse4_1;
+  }
   av1_highbd_iwht4x4_16_add = av1_highbd_iwht4x4_16_add_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_highbd_iwht4x4_16_add = av1_highbd_iwht4x4_16_add_sse4_1;
+  }
   av1_inv_txfm2d_add_4x4 = av1_inv_txfm2d_add_4x4_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_inv_txfm2d_add_4x4 = av1_inv_txfm2d_add_4x4_sse4_1;
+  }
   av1_inv_txfm2d_add_8x8 = av1_inv_txfm2d_add_8x8_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_inv_txfm2d_add_8x8 = av1_inv_txfm2d_add_8x8_sse4_1;
+  }
   av1_inv_txfm_add = av1_inv_txfm_add_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     av1_inv_txfm_add = av1_inv_txfm_add_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_inv_txfm_add = av1_inv_txfm_add_avx2;
+  }
   av1_lowbd_fwd_txfm = av1_lowbd_fwd_txfm_sse2;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_lowbd_fwd_txfm = av1_lowbd_fwd_txfm_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_lowbd_fwd_txfm = av1_lowbd_fwd_txfm_avx2;
+  }
   av1_nn_fast_softmax_16 = av1_nn_fast_softmax_16_c;
-  if (flags & HAS_SSE3)
+  if (flags & HAS_SSE3) {
     av1_nn_fast_softmax_16 = av1_nn_fast_softmax_16_sse3;
+  }
   av1_nn_predict = av1_nn_predict_c;
-  if (flags & HAS_SSE3)
+  if (flags & HAS_SSE3) {
     av1_nn_predict = av1_nn_predict_sse3;
+  }
   av1_quantize_fp = av1_quantize_fp_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_quantize_fp = av1_quantize_fp_avx2;
+  }
   av1_quantize_fp_32x32 = av1_quantize_fp_32x32_c;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_quantize_fp_32x32 = av1_quantize_fp_32x32_avx2;
+  }
   av1_quantize_fp_64x64 = av1_quantize_fp_64x64_c;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_quantize_fp_64x64 = av1_quantize_fp_64x64_avx2;
+  }
   av1_quantize_lp = av1_quantize_lp_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_quantize_lp = av1_quantize_lp_avx2;
+  }
   av1_resize_and_extend_frame = av1_resize_and_extend_frame_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     av1_resize_and_extend_frame = av1_resize_and_extend_frame_ssse3;
+  }
   av1_round_shift_array = av1_round_shift_array_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_round_shift_array = av1_round_shift_array_sse4_1;
+  }
   av1_selfguided_restoration = av1_selfguided_restoration_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_selfguided_restoration = av1_selfguided_restoration_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_selfguided_restoration = av1_selfguided_restoration_avx2;
+  }
   av1_txb_init_levels = av1_txb_init_levels_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_txb_init_levels = av1_txb_init_levels_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_txb_init_levels = av1_txb_init_levels_avx2;
+  }
   av1_upsample_intra_edge = av1_upsample_intra_edge_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_upsample_intra_edge = av1_upsample_intra_edge_sse4_1;
+  }
   av1_upsample_intra_edge_high = av1_upsample_intra_edge_high_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_upsample_intra_edge_high = av1_upsample_intra_edge_high_sse4_1;
+  }
   av1_warp_affine = av1_warp_affine_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_warp_affine = av1_warp_affine_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_warp_affine = av1_warp_affine_avx2;
+  }
   av1_wedge_compute_delta_squares = av1_wedge_compute_delta_squares_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_wedge_compute_delta_squares = av1_wedge_compute_delta_squares_avx2;
+  }
   av1_wedge_sign_from_residuals = av1_wedge_sign_from_residuals_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_wedge_sign_from_residuals = av1_wedge_sign_from_residuals_avx2;
+  }
   av1_wedge_sse_from_residuals = av1_wedge_sse_from_residuals_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_wedge_sse_from_residuals = av1_wedge_sse_from_residuals_avx2;
+  }
   av1_wiener_convolve_add_src = av1_wiener_convolve_add_src_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_wiener_convolve_add_src = av1_wiener_convolve_add_src_avx2;
+  }
   cdef_copy_rect8_16bit_to_16bit = cdef_copy_rect8_16bit_to_16bit_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cdef_copy_rect8_16bit_to_16bit = cdef_copy_rect8_16bit_to_16bit_ssse3;
-  if (flags & HAS_SSE4_1)
+  }
+  if (flags & HAS_SSE4_1) {
     cdef_copy_rect8_16bit_to_16bit = cdef_copy_rect8_16bit_to_16bit_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cdef_copy_rect8_16bit_to_16bit = cdef_copy_rect8_16bit_to_16bit_avx2;
+  }
   cdef_copy_rect8_8bit_to_16bit = cdef_copy_rect8_8bit_to_16bit_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cdef_copy_rect8_8bit_to_16bit = cdef_copy_rect8_8bit_to_16bit_ssse3;
-  if (flags & HAS_SSE4_1)
+  }
+  if (flags & HAS_SSE4_1) {
     cdef_copy_rect8_8bit_to_16bit = cdef_copy_rect8_8bit_to_16bit_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cdef_copy_rect8_8bit_to_16bit = cdef_copy_rect8_8bit_to_16bit_avx2;
+  }
   cdef_filter_16_0 = cdef_filter_16_0_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cdef_filter_16_0 = cdef_filter_16_0_ssse3;
-  if (flags & HAS_SSE4_1)
+  }
+  if (flags & HAS_SSE4_1) {
     cdef_filter_16_0 = cdef_filter_16_0_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cdef_filter_16_0 = cdef_filter_16_0_avx2;
+  }
   cdef_filter_16_1 = cdef_filter_16_1_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cdef_filter_16_1 = cdef_filter_16_1_ssse3;
-  if (flags & HAS_SSE4_1)
+  }
+  if (flags & HAS_SSE4_1) {
     cdef_filter_16_1 = cdef_filter_16_1_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cdef_filter_16_1 = cdef_filter_16_1_avx2;
+  }
   cdef_filter_16_2 = cdef_filter_16_2_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cdef_filter_16_2 = cdef_filter_16_2_ssse3;
-  if (flags & HAS_SSE4_1)
+  }
+  if (flags & HAS_SSE4_1) {
     cdef_filter_16_2 = cdef_filter_16_2_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cdef_filter_16_2 = cdef_filter_16_2_avx2;
+  }
   cdef_filter_16_3 = cdef_filter_16_3_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cdef_filter_16_3 = cdef_filter_16_3_ssse3;
-  if (flags & HAS_SSE4_1)
+  }
+  if (flags & HAS_SSE4_1) {
     cdef_filter_16_3 = cdef_filter_16_3_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cdef_filter_16_3 = cdef_filter_16_3_avx2;
+  }
   cdef_filter_8_0 = cdef_filter_8_0_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cdef_filter_8_0 = cdef_filter_8_0_ssse3;
-  if (flags & HAS_SSE4_1)
+  }
+  if (flags & HAS_SSE4_1) {
     cdef_filter_8_0 = cdef_filter_8_0_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cdef_filter_8_0 = cdef_filter_8_0_avx2;
+  }
   cdef_filter_8_1 = cdef_filter_8_1_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cdef_filter_8_1 = cdef_filter_8_1_ssse3;
-  if (flags & HAS_SSE4_1)
+  }
+  if (flags & HAS_SSE4_1) {
     cdef_filter_8_1 = cdef_filter_8_1_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cdef_filter_8_1 = cdef_filter_8_1_avx2;
+  }
   cdef_filter_8_2 = cdef_filter_8_2_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cdef_filter_8_2 = cdef_filter_8_2_ssse3;
-  if (flags & HAS_SSE4_1)
+  }
+  if (flags & HAS_SSE4_1) {
     cdef_filter_8_2 = cdef_filter_8_2_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cdef_filter_8_2 = cdef_filter_8_2_avx2;
+  }
   cdef_filter_8_3 = cdef_filter_8_3_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cdef_filter_8_3 = cdef_filter_8_3_ssse3;
-  if (flags & HAS_SSE4_1)
+  }
+  if (flags & HAS_SSE4_1) {
     cdef_filter_8_3 = cdef_filter_8_3_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cdef_filter_8_3 = cdef_filter_8_3_avx2;
+  }
   cdef_find_dir = cdef_find_dir_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cdef_find_dir = cdef_find_dir_ssse3;
-  if (flags & HAS_SSE4_1)
+  }
+  if (flags & HAS_SSE4_1) {
     cdef_find_dir = cdef_find_dir_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cdef_find_dir = cdef_find_dir_avx2;
+  }
   cdef_find_dir_dual = cdef_find_dir_dual_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cdef_find_dir_dual = cdef_find_dir_dual_ssse3;
-  if (flags & HAS_SSE4_1)
+  }
+  if (flags & HAS_SSE4_1) {
     cdef_find_dir_dual = cdef_find_dir_dual_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cdef_find_dir_dual = cdef_find_dir_dual_avx2;
+  }
   cfl_get_luma_subsampling_420_lbd = cfl_get_luma_subsampling_420_lbd_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cfl_get_luma_subsampling_420_lbd = cfl_get_luma_subsampling_420_lbd_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cfl_get_luma_subsampling_420_lbd = cfl_get_luma_subsampling_420_lbd_avx2;
+  }
   cfl_get_luma_subsampling_422_lbd = cfl_get_luma_subsampling_422_lbd_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cfl_get_luma_subsampling_422_lbd = cfl_get_luma_subsampling_422_lbd_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cfl_get_luma_subsampling_422_lbd = cfl_get_luma_subsampling_422_lbd_avx2;
+  }
   cfl_get_luma_subsampling_444_lbd = cfl_get_luma_subsampling_444_lbd_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cfl_get_luma_subsampling_444_lbd = cfl_get_luma_subsampling_444_lbd_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cfl_get_luma_subsampling_444_lbd = cfl_get_luma_subsampling_444_lbd_avx2;
+  }
   cfl_get_predict_lbd_fn = cfl_get_predict_lbd_fn_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cfl_get_predict_lbd_fn = cfl_get_predict_lbd_fn_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cfl_get_predict_lbd_fn = cfl_get_predict_lbd_fn_avx2;
+  }
   cfl_get_subtract_average_fn = cfl_get_subtract_average_fn_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     cfl_get_subtract_average_fn = cfl_get_subtract_average_fn_avx2;
+  }
 }
 #endif
 
diff --git a/libaom/source/config/win/arm64/config/aom_config.asm b/libaom/source/config/win/arm64/config/aom_config.asm
index c5ebd6a..56f39b6 100644
--- a/libaom/source/config/win/arm64/config/aom_config.asm
+++ b/libaom/source/config/win/arm64/config/aom_config.asm
@@ -1,5 +1,5 @@
 ;
-; Copyright (c) 2022, Alliance for Open Media. All rights reserved
+; Copyright (c) 2023, Alliance for Open Media. All rights reserved
 ;
 ; This source code is subject to the terms of the BSD 2 Clause License and
 ; the Alliance for Open Media Patent License 1.0. If the BSD 2 Clause License
@@ -46,6 +46,7 @@ CONFIG_NN_V2 equ 0
 CONFIG_NORMAL_TILE_MODE equ 1
 CONFIG_OPTICAL_FLOW_API equ 0
 CONFIG_OS_SUPPORT equ 1
+CONFIG_OUTPUT_FRAME_SIZE equ 0
 CONFIG_PARTITION_SEARCH_ORDER equ 0
 CONFIG_PIC equ 1
 CONFIG_RATECTRL_LOG equ 0
@@ -54,6 +55,7 @@ CONFIG_RD_DEBUG equ 0
 CONFIG_REALTIME_ONLY equ 1
 CONFIG_RT_ML_PARTITIONING equ 0
 CONFIG_RUNTIME_CPU_DETECT equ 0
+CONFIG_SALIENCY_MAP equ 0
 CONFIG_SHARED equ 0
 CONFIG_SIZE_LIMIT equ 1
 CONFIG_SPATIAL_RESAMPLING equ 1
diff --git a/libaom/source/config/win/arm64/config/aom_config.h b/libaom/source/config/win/arm64/config/aom_config.h
index fd91a55..2f5a0e4 100644
--- a/libaom/source/config/win/arm64/config/aom_config.h
+++ b/libaom/source/config/win/arm64/config/aom_config.h
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022, Alliance for Open Media. All rights reserved
+ * Copyright (c) 2023, Alliance for Open Media. All rights reserved
  *
  * This source code is subject to the terms of the BSD 2 Clause License and
  * the Alliance for Open Media Patent License 1.0. If the BSD 2 Clause License
@@ -48,6 +48,7 @@
 #define CONFIG_NORMAL_TILE_MODE 1
 #define CONFIG_OPTICAL_FLOW_API 0
 #define CONFIG_OS_SUPPORT 1
+#define CONFIG_OUTPUT_FRAME_SIZE 0
 #define CONFIG_PARTITION_SEARCH_ORDER 0
 #define CONFIG_PIC 1
 #define CONFIG_RATECTRL_LOG 0
@@ -56,6 +57,7 @@
 #define CONFIG_REALTIME_ONLY 1
 #define CONFIG_RT_ML_PARTITIONING 0
 #define CONFIG_RUNTIME_CPU_DETECT 0
+#define CONFIG_SALIENCY_MAP 0
 #define CONFIG_SHARED 0
 #define CONFIG_SIZE_LIMIT 1
 #define CONFIG_SPATIAL_RESAMPLING 1
diff --git a/libaom/source/config/win/arm64/config/aom_dsp_rtcd.h b/libaom/source/config/win/arm64/config/aom_dsp_rtcd.h
index 78b5bb8..5e621eb 100644
--- a/libaom/source/config/win/arm64/config/aom_dsp_rtcd.h
+++ b/libaom/source/config/win/arm64/config/aom_dsp_rtcd.h
@@ -1109,19 +1109,43 @@ void aom_get_blk_sse_sum_c(const int16_t* data,
 unsigned int aom_get_mb_ss_c(const int16_t*);
 #define aom_get_mb_ss aom_get_mb_ss_c
 
-void aom_get_sse_sum_8x8_quad_c(const uint8_t* src_ptr,
-                                int source_stride,
-                                const uint8_t* ref_ptr,
-                                int ref_stride,
-                                unsigned int* sse,
-                                int* sum);
-void aom_get_sse_sum_8x8_quad_neon(const uint8_t* src_ptr,
-                                   int source_stride,
-                                   const uint8_t* ref_ptr,
-                                   int ref_stride,
-                                   unsigned int* sse,
-                                   int* sum);
-#define aom_get_sse_sum_8x8_quad aom_get_sse_sum_8x8_quad_neon
+void aom_get_var_sse_sum_16x16_dual_c(const uint8_t* src_ptr,
+                                      int source_stride,
+                                      const uint8_t* ref_ptr,
+                                      int ref_stride,
+                                      uint32_t* sse16x16,
+                                      unsigned int* tot_sse,
+                                      int* tot_sum,
+                                      uint32_t* var16x16);
+void aom_get_var_sse_sum_16x16_dual_neon(const uint8_t* src_ptr,
+                                         int source_stride,
+                                         const uint8_t* ref_ptr,
+                                         int ref_stride,
+                                         uint32_t* sse16x16,
+                                         unsigned int* tot_sse,
+                                         int* tot_sum,
+                                         uint32_t* var16x16);
+#define aom_get_var_sse_sum_16x16_dual aom_get_var_sse_sum_16x16_dual_neon
+
+void aom_get_var_sse_sum_8x8_quad_c(const uint8_t* src_ptr,
+                                    int source_stride,
+                                    const uint8_t* ref_ptr,
+                                    int ref_stride,
+                                    uint32_t* sse8x8,
+                                    int* sum8x8,
+                                    unsigned int* tot_sse,
+                                    int* tot_sum,
+                                    uint32_t* var8x8);
+void aom_get_var_sse_sum_8x8_quad_neon(const uint8_t* src_ptr,
+                                       int source_stride,
+                                       const uint8_t* ref_ptr,
+                                       int ref_stride,
+                                       uint32_t* sse8x8,
+                                       int* sum8x8,
+                                       unsigned int* tot_sse,
+                                       int* tot_sum,
+                                       uint32_t* var8x8);
+#define aom_get_var_sse_sum_8x8_quad aom_get_var_sse_sum_8x8_quad_neon
 
 void aom_h_predictor_16x16_c(uint8_t* dst,
                              ptrdiff_t y_stride,
@@ -1264,12 +1288,18 @@ void aom_hadamard_16x16_neon(const int16_t* src_diff,
 void aom_hadamard_32x32_c(const int16_t* src_diff,
                           ptrdiff_t src_stride,
                           tran_low_t* coeff);
-#define aom_hadamard_32x32 aom_hadamard_32x32_c
+void aom_hadamard_32x32_neon(const int16_t* src_diff,
+                             ptrdiff_t src_stride,
+                             tran_low_t* coeff);
+#define aom_hadamard_32x32 aom_hadamard_32x32_neon
 
 void aom_hadamard_4x4_c(const int16_t* src_diff,
                         ptrdiff_t src_stride,
                         tran_low_t* coeff);
-#define aom_hadamard_4x4 aom_hadamard_4x4_c
+void aom_hadamard_4x4_neon(const int16_t* src_diff,
+                           ptrdiff_t src_stride,
+                           tran_low_t* coeff);
+#define aom_hadamard_4x4 aom_hadamard_4x4_neon
 
 void aom_hadamard_8x8_c(const int16_t* src_diff,
                         ptrdiff_t src_stride,
@@ -1718,7 +1748,15 @@ unsigned int aom_masked_sad128x128_c(const uint8_t* src,
                                      const uint8_t* msk,
                                      int msk_stride,
                                      int invert_mask);
-#define aom_masked_sad128x128 aom_masked_sad128x128_c
+unsigned int aom_masked_sad128x128_neon(const uint8_t* src,
+                                        int src_stride,
+                                        const uint8_t* ref,
+                                        int ref_stride,
+                                        const uint8_t* second_pred,
+                                        const uint8_t* msk,
+                                        int msk_stride,
+                                        int invert_mask);
+#define aom_masked_sad128x128 aom_masked_sad128x128_neon
 
 void aom_masked_sad128x128x4d_c(const uint8_t* src,
                                 int src_stride,
@@ -1739,7 +1777,15 @@ unsigned int aom_masked_sad128x64_c(const uint8_t* src,
                                     const uint8_t* msk,
                                     int msk_stride,
                                     int invert_mask);
-#define aom_masked_sad128x64 aom_masked_sad128x64_c
+unsigned int aom_masked_sad128x64_neon(const uint8_t* src,
+                                       int src_stride,
+                                       const uint8_t* ref,
+                                       int ref_stride,
+                                       const uint8_t* second_pred,
+                                       const uint8_t* msk,
+                                       int msk_stride,
+                                       int invert_mask);
+#define aom_masked_sad128x64 aom_masked_sad128x64_neon
 
 void aom_masked_sad128x64x4d_c(const uint8_t* src,
                                int src_stride,
@@ -1760,7 +1806,15 @@ unsigned int aom_masked_sad16x16_c(const uint8_t* src,
                                    const uint8_t* msk,
                                    int msk_stride,
                                    int invert_mask);
-#define aom_masked_sad16x16 aom_masked_sad16x16_c
+unsigned int aom_masked_sad16x16_neon(const uint8_t* src,
+                                      int src_stride,
+                                      const uint8_t* ref,
+                                      int ref_stride,
+                                      const uint8_t* second_pred,
+                                      const uint8_t* msk,
+                                      int msk_stride,
+                                      int invert_mask);
+#define aom_masked_sad16x16 aom_masked_sad16x16_neon
 
 void aom_masked_sad16x16x4d_c(const uint8_t* src,
                               int src_stride,
@@ -1781,7 +1835,15 @@ unsigned int aom_masked_sad16x32_c(const uint8_t* src,
                                    const uint8_t* msk,
                                    int msk_stride,
                                    int invert_mask);
-#define aom_masked_sad16x32 aom_masked_sad16x32_c
+unsigned int aom_masked_sad16x32_neon(const uint8_t* src,
+                                      int src_stride,
+                                      const uint8_t* ref,
+                                      int ref_stride,
+                                      const uint8_t* second_pred,
+                                      const uint8_t* msk,
+                                      int msk_stride,
+                                      int invert_mask);
+#define aom_masked_sad16x32 aom_masked_sad16x32_neon
 
 void aom_masked_sad16x32x4d_c(const uint8_t* src,
                               int src_stride,
@@ -1802,7 +1864,15 @@ unsigned int aom_masked_sad16x8_c(const uint8_t* src,
                                   const uint8_t* msk,
                                   int msk_stride,
                                   int invert_mask);
-#define aom_masked_sad16x8 aom_masked_sad16x8_c
+unsigned int aom_masked_sad16x8_neon(const uint8_t* src,
+                                     int src_stride,
+                                     const uint8_t* ref,
+                                     int ref_stride,
+                                     const uint8_t* second_pred,
+                                     const uint8_t* msk,
+                                     int msk_stride,
+                                     int invert_mask);
+#define aom_masked_sad16x8 aom_masked_sad16x8_neon
 
 void aom_masked_sad16x8x4d_c(const uint8_t* src,
                              int src_stride,
@@ -1823,7 +1893,15 @@ unsigned int aom_masked_sad32x16_c(const uint8_t* src,
                                    const uint8_t* msk,
                                    int msk_stride,
                                    int invert_mask);
-#define aom_masked_sad32x16 aom_masked_sad32x16_c
+unsigned int aom_masked_sad32x16_neon(const uint8_t* src,
+                                      int src_stride,
+                                      const uint8_t* ref,
+                                      int ref_stride,
+                                      const uint8_t* second_pred,
+                                      const uint8_t* msk,
+                                      int msk_stride,
+                                      int invert_mask);
+#define aom_masked_sad32x16 aom_masked_sad32x16_neon
 
 void aom_masked_sad32x16x4d_c(const uint8_t* src,
                               int src_stride,
@@ -1844,7 +1922,15 @@ unsigned int aom_masked_sad32x32_c(const uint8_t* src,
                                    const uint8_t* msk,
                                    int msk_stride,
                                    int invert_mask);
-#define aom_masked_sad32x32 aom_masked_sad32x32_c
+unsigned int aom_masked_sad32x32_neon(const uint8_t* src,
+                                      int src_stride,
+                                      const uint8_t* ref,
+                                      int ref_stride,
+                                      const uint8_t* second_pred,
+                                      const uint8_t* msk,
+                                      int msk_stride,
+                                      int invert_mask);
+#define aom_masked_sad32x32 aom_masked_sad32x32_neon
 
 void aom_masked_sad32x32x4d_c(const uint8_t* src,
                               int src_stride,
@@ -1865,7 +1951,15 @@ unsigned int aom_masked_sad32x64_c(const uint8_t* src,
                                    const uint8_t* msk,
                                    int msk_stride,
                                    int invert_mask);
-#define aom_masked_sad32x64 aom_masked_sad32x64_c
+unsigned int aom_masked_sad32x64_neon(const uint8_t* src,
+                                      int src_stride,
+                                      const uint8_t* ref,
+                                      int ref_stride,
+                                      const uint8_t* second_pred,
+                                      const uint8_t* msk,
+                                      int msk_stride,
+                                      int invert_mask);
+#define aom_masked_sad32x64 aom_masked_sad32x64_neon
 
 void aom_masked_sad32x64x4d_c(const uint8_t* src,
                               int src_stride,
@@ -1886,7 +1980,15 @@ unsigned int aom_masked_sad4x4_c(const uint8_t* src,
                                  const uint8_t* msk,
                                  int msk_stride,
                                  int invert_mask);
-#define aom_masked_sad4x4 aom_masked_sad4x4_c
+unsigned int aom_masked_sad4x4_neon(const uint8_t* src,
+                                    int src_stride,
+                                    const uint8_t* ref,
+                                    int ref_stride,
+                                    const uint8_t* second_pred,
+                                    const uint8_t* msk,
+                                    int msk_stride,
+                                    int invert_mask);
+#define aom_masked_sad4x4 aom_masked_sad4x4_neon
 
 void aom_masked_sad4x4x4d_c(const uint8_t* src,
                             int src_stride,
@@ -1907,7 +2009,15 @@ unsigned int aom_masked_sad4x8_c(const uint8_t* src,
                                  const uint8_t* msk,
                                  int msk_stride,
                                  int invert_mask);
-#define aom_masked_sad4x8 aom_masked_sad4x8_c
+unsigned int aom_masked_sad4x8_neon(const uint8_t* src,
+                                    int src_stride,
+                                    const uint8_t* ref,
+                                    int ref_stride,
+                                    const uint8_t* second_pred,
+                                    const uint8_t* msk,
+                                    int msk_stride,
+                                    int invert_mask);
+#define aom_masked_sad4x8 aom_masked_sad4x8_neon
 
 void aom_masked_sad4x8x4d_c(const uint8_t* src,
                             int src_stride,
@@ -1928,7 +2038,15 @@ unsigned int aom_masked_sad64x128_c(const uint8_t* src,
                                     const uint8_t* msk,
                                     int msk_stride,
                                     int invert_mask);
-#define aom_masked_sad64x128 aom_masked_sad64x128_c
+unsigned int aom_masked_sad64x128_neon(const uint8_t* src,
+                                       int src_stride,
+                                       const uint8_t* ref,
+                                       int ref_stride,
+                                       const uint8_t* second_pred,
+                                       const uint8_t* msk,
+                                       int msk_stride,
+                                       int invert_mask);
+#define aom_masked_sad64x128 aom_masked_sad64x128_neon
 
 void aom_masked_sad64x128x4d_c(const uint8_t* src,
                                int src_stride,
@@ -1949,7 +2067,15 @@ unsigned int aom_masked_sad64x32_c(const uint8_t* src,
                                    const uint8_t* msk,
                                    int msk_stride,
                                    int invert_mask);
-#define aom_masked_sad64x32 aom_masked_sad64x32_c
+unsigned int aom_masked_sad64x32_neon(const uint8_t* src,
+                                      int src_stride,
+                                      const uint8_t* ref,
+                                      int ref_stride,
+                                      const uint8_t* second_pred,
+                                      const uint8_t* msk,
+                                      int msk_stride,
+                                      int invert_mask);
+#define aom_masked_sad64x32 aom_masked_sad64x32_neon
 
 void aom_masked_sad64x32x4d_c(const uint8_t* src,
                               int src_stride,
@@ -1970,7 +2096,15 @@ unsigned int aom_masked_sad64x64_c(const uint8_t* src,
                                    const uint8_t* msk,
                                    int msk_stride,
                                    int invert_mask);
-#define aom_masked_sad64x64 aom_masked_sad64x64_c
+unsigned int aom_masked_sad64x64_neon(const uint8_t* src,
+                                      int src_stride,
+                                      const uint8_t* ref,
+                                      int ref_stride,
+                                      const uint8_t* second_pred,
+                                      const uint8_t* msk,
+                                      int msk_stride,
+                                      int invert_mask);
+#define aom_masked_sad64x64 aom_masked_sad64x64_neon
 
 void aom_masked_sad64x64x4d_c(const uint8_t* src,
                               int src_stride,
@@ -1991,7 +2125,15 @@ unsigned int aom_masked_sad8x16_c(const uint8_t* src,
                                   const uint8_t* msk,
                                   int msk_stride,
                                   int invert_mask);
-#define aom_masked_sad8x16 aom_masked_sad8x16_c
+unsigned int aom_masked_sad8x16_neon(const uint8_t* src,
+                                     int src_stride,
+                                     const uint8_t* ref,
+                                     int ref_stride,
+                                     const uint8_t* second_pred,
+                                     const uint8_t* msk,
+                                     int msk_stride,
+                                     int invert_mask);
+#define aom_masked_sad8x16 aom_masked_sad8x16_neon
 
 void aom_masked_sad8x16x4d_c(const uint8_t* src,
                              int src_stride,
@@ -2012,7 +2154,15 @@ unsigned int aom_masked_sad8x4_c(const uint8_t* src,
                                  const uint8_t* msk,
                                  int msk_stride,
                                  int invert_mask);
-#define aom_masked_sad8x4 aom_masked_sad8x4_c
+unsigned int aom_masked_sad8x4_neon(const uint8_t* src,
+                                    int src_stride,
+                                    const uint8_t* ref,
+                                    int ref_stride,
+                                    const uint8_t* second_pred,
+                                    const uint8_t* msk,
+                                    int msk_stride,
+                                    int invert_mask);
+#define aom_masked_sad8x4 aom_masked_sad8x4_neon
 
 void aom_masked_sad8x4x4d_c(const uint8_t* src,
                             int src_stride,
@@ -2033,7 +2183,15 @@ unsigned int aom_masked_sad8x8_c(const uint8_t* src,
                                  const uint8_t* msk,
                                  int msk_stride,
                                  int invert_mask);
-#define aom_masked_sad8x8 aom_masked_sad8x8_c
+unsigned int aom_masked_sad8x8_neon(const uint8_t* src,
+                                    int src_stride,
+                                    const uint8_t* ref,
+                                    int ref_stride,
+                                    const uint8_t* second_pred,
+                                    const uint8_t* msk,
+                                    int msk_stride,
+                                    int invert_mask);
+#define aom_masked_sad8x8 aom_masked_sad8x8_neon
 
 void aom_masked_sad8x8x4d_c(const uint8_t* src,
                             int src_stride,
@@ -2326,7 +2484,13 @@ uint64_t aom_mse_wxh_16bit_c(uint8_t* dst,
                              int sstride,
                              int w,
                              int h);
-#define aom_mse_wxh_16bit aom_mse_wxh_16bit_c
+uint64_t aom_mse_wxh_16bit_neon(uint8_t* dst,
+                                int dstride,
+                                uint16_t* src,
+                                int sstride,
+                                int w,
+                                int h);
+#define aom_mse_wxh_16bit aom_mse_wxh_16bit_neon
 
 void aom_paeth_predictor_16x16_c(uint8_t* dst,
                                  ptrdiff_t y_stride,
@@ -2619,7 +2783,19 @@ unsigned int aom_sad128x128_avg_c(const uint8_t* src_ptr,
                                   const uint8_t* ref_ptr,
                                   int ref_stride,
                                   const uint8_t* second_pred);
-#define aom_sad128x128_avg aom_sad128x128_avg_c
+unsigned int aom_sad128x128_avg_neon(const uint8_t* src_ptr,
+                                     int src_stride,
+                                     const uint8_t* ref_ptr,
+                                     int ref_stride,
+                                     const uint8_t* second_pred);
+#define aom_sad128x128_avg aom_sad128x128_avg_neon
+
+void aom_sad128x128x3d_c(const uint8_t* src_ptr,
+                         int src_stride,
+                         const uint8_t* const ref_ptr[4],
+                         int ref_stride,
+                         uint32_t sad_array[4]);
+#define aom_sad128x128x3d aom_sad128x128x3d_c
 
 void aom_sad128x128x4d_c(const uint8_t* src_ptr,
                          int src_stride,
@@ -2656,7 +2832,19 @@ unsigned int aom_sad128x64_avg_c(const uint8_t* src_ptr,
                                  const uint8_t* ref_ptr,
                                  int ref_stride,
                                  const uint8_t* second_pred);
-#define aom_sad128x64_avg aom_sad128x64_avg_c
+unsigned int aom_sad128x64_avg_neon(const uint8_t* src_ptr,
+                                    int src_stride,
+                                    const uint8_t* ref_ptr,
+                                    int ref_stride,
+                                    const uint8_t* second_pred);
+#define aom_sad128x64_avg aom_sad128x64_avg_neon
+
+void aom_sad128x64x3d_c(const uint8_t* src_ptr,
+                        int src_stride,
+                        const uint8_t* const ref_ptr[4],
+                        int ref_stride,
+                        uint32_t sad_array[4]);
+#define aom_sad128x64x3d aom_sad128x64x3d_c
 
 void aom_sad128x64x4d_c(const uint8_t* src_ptr,
                         int src_stride,
@@ -2701,7 +2889,19 @@ unsigned int aom_sad16x16_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* ref_ptr,
                                 int ref_stride,
                                 const uint8_t* second_pred);
-#define aom_sad16x16_avg aom_sad16x16_avg_c
+unsigned int aom_sad16x16_avg_neon(const uint8_t* src_ptr,
+                                   int src_stride,
+                                   const uint8_t* ref_ptr,
+                                   int ref_stride,
+                                   const uint8_t* second_pred);
+#define aom_sad16x16_avg aom_sad16x16_avg_neon
+
+void aom_sad16x16x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad16x16x3d aom_sad16x16x3d_c
 
 void aom_sad16x16x4d_c(const uint8_t* src_ptr,
                        int src_stride,
@@ -2738,7 +2938,19 @@ unsigned int aom_sad16x32_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* ref_ptr,
                                 int ref_stride,
                                 const uint8_t* second_pred);
-#define aom_sad16x32_avg aom_sad16x32_avg_c
+unsigned int aom_sad16x32_avg_neon(const uint8_t* src_ptr,
+                                   int src_stride,
+                                   const uint8_t* ref_ptr,
+                                   int ref_stride,
+                                   const uint8_t* second_pred);
+#define aom_sad16x32_avg aom_sad16x32_avg_neon
+
+void aom_sad16x32x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad16x32x3d aom_sad16x32x3d_c
 
 void aom_sad16x32x4d_c(const uint8_t* src_ptr,
                        int src_stride,
@@ -2775,7 +2987,19 @@ unsigned int aom_sad16x8_avg_c(const uint8_t* src_ptr,
                                const uint8_t* ref_ptr,
                                int ref_stride,
                                const uint8_t* second_pred);
-#define aom_sad16x8_avg aom_sad16x8_avg_c
+unsigned int aom_sad16x8_avg_neon(const uint8_t* src_ptr,
+                                  int src_stride,
+                                  const uint8_t* ref_ptr,
+                                  int ref_stride,
+                                  const uint8_t* second_pred);
+#define aom_sad16x8_avg aom_sad16x8_avg_neon
+
+void aom_sad16x8x3d_c(const uint8_t* src_ptr,
+                      int src_stride,
+                      const uint8_t* const ref_ptr[4],
+                      int ref_stride,
+                      uint32_t sad_array[4]);
+#define aom_sad16x8x3d aom_sad16x8x3d_c
 
 void aom_sad16x8x4d_c(const uint8_t* src_ptr,
                       int src_stride,
@@ -2820,7 +3044,19 @@ unsigned int aom_sad32x16_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* ref_ptr,
                                 int ref_stride,
                                 const uint8_t* second_pred);
-#define aom_sad32x16_avg aom_sad32x16_avg_c
+unsigned int aom_sad32x16_avg_neon(const uint8_t* src_ptr,
+                                   int src_stride,
+                                   const uint8_t* ref_ptr,
+                                   int ref_stride,
+                                   const uint8_t* second_pred);
+#define aom_sad32x16_avg aom_sad32x16_avg_neon
+
+void aom_sad32x16x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad32x16x3d aom_sad32x16x3d_c
 
 void aom_sad32x16x4d_c(const uint8_t* src_ptr,
                        int src_stride,
@@ -2857,7 +3093,19 @@ unsigned int aom_sad32x32_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* ref_ptr,
                                 int ref_stride,
                                 const uint8_t* second_pred);
-#define aom_sad32x32_avg aom_sad32x32_avg_c
+unsigned int aom_sad32x32_avg_neon(const uint8_t* src_ptr,
+                                   int src_stride,
+                                   const uint8_t* ref_ptr,
+                                   int ref_stride,
+                                   const uint8_t* second_pred);
+#define aom_sad32x32_avg aom_sad32x32_avg_neon
+
+void aom_sad32x32x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad32x32x3d aom_sad32x32x3d_c
 
 void aom_sad32x32x4d_c(const uint8_t* src_ptr,
                        int src_stride,
@@ -2894,7 +3142,19 @@ unsigned int aom_sad32x64_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* ref_ptr,
                                 int ref_stride,
                                 const uint8_t* second_pred);
-#define aom_sad32x64_avg aom_sad32x64_avg_c
+unsigned int aom_sad32x64_avg_neon(const uint8_t* src_ptr,
+                                   int src_stride,
+                                   const uint8_t* ref_ptr,
+                                   int ref_stride,
+                                   const uint8_t* second_pred);
+#define aom_sad32x64_avg aom_sad32x64_avg_neon
+
+void aom_sad32x64x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad32x64x3d aom_sad32x64x3d_c
 
 void aom_sad32x64x4d_c(const uint8_t* src_ptr,
                        int src_stride,
@@ -2939,7 +3199,19 @@ unsigned int aom_sad4x4_avg_c(const uint8_t* src_ptr,
                               const uint8_t* ref_ptr,
                               int ref_stride,
                               const uint8_t* second_pred);
-#define aom_sad4x4_avg aom_sad4x4_avg_c
+unsigned int aom_sad4x4_avg_neon(const uint8_t* src_ptr,
+                                 int src_stride,
+                                 const uint8_t* ref_ptr,
+                                 int ref_stride,
+                                 const uint8_t* second_pred);
+#define aom_sad4x4_avg aom_sad4x4_avg_neon
+
+void aom_sad4x4x3d_c(const uint8_t* src_ptr,
+                     int src_stride,
+                     const uint8_t* const ref_ptr[4],
+                     int ref_stride,
+                     uint32_t sad_array[4]);
+#define aom_sad4x4x3d aom_sad4x4x3d_c
 
 void aom_sad4x4x4d_c(const uint8_t* src_ptr,
                      int src_stride,
@@ -2976,7 +3248,19 @@ unsigned int aom_sad4x8_avg_c(const uint8_t* src_ptr,
                               const uint8_t* ref_ptr,
                               int ref_stride,
                               const uint8_t* second_pred);
-#define aom_sad4x8_avg aom_sad4x8_avg_c
+unsigned int aom_sad4x8_avg_neon(const uint8_t* src_ptr,
+                                 int src_stride,
+                                 const uint8_t* ref_ptr,
+                                 int ref_stride,
+                                 const uint8_t* second_pred);
+#define aom_sad4x8_avg aom_sad4x8_avg_neon
+
+void aom_sad4x8x3d_c(const uint8_t* src_ptr,
+                     int src_stride,
+                     const uint8_t* const ref_ptr[4],
+                     int ref_stride,
+                     uint32_t sad_array[4]);
+#define aom_sad4x8x3d aom_sad4x8x3d_c
 
 void aom_sad4x8x4d_c(const uint8_t* src_ptr,
                      int src_stride,
@@ -3021,7 +3305,19 @@ unsigned int aom_sad64x128_avg_c(const uint8_t* src_ptr,
                                  const uint8_t* ref_ptr,
                                  int ref_stride,
                                  const uint8_t* second_pred);
-#define aom_sad64x128_avg aom_sad64x128_avg_c
+unsigned int aom_sad64x128_avg_neon(const uint8_t* src_ptr,
+                                    int src_stride,
+                                    const uint8_t* ref_ptr,
+                                    int ref_stride,
+                                    const uint8_t* second_pred);
+#define aom_sad64x128_avg aom_sad64x128_avg_neon
+
+void aom_sad64x128x3d_c(const uint8_t* src_ptr,
+                        int src_stride,
+                        const uint8_t* const ref_ptr[4],
+                        int ref_stride,
+                        uint32_t sad_array[4]);
+#define aom_sad64x128x3d aom_sad64x128x3d_c
 
 void aom_sad64x128x4d_c(const uint8_t* src_ptr,
                         int src_stride,
@@ -3058,7 +3354,19 @@ unsigned int aom_sad64x32_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* ref_ptr,
                                 int ref_stride,
                                 const uint8_t* second_pred);
-#define aom_sad64x32_avg aom_sad64x32_avg_c
+unsigned int aom_sad64x32_avg_neon(const uint8_t* src_ptr,
+                                   int src_stride,
+                                   const uint8_t* ref_ptr,
+                                   int ref_stride,
+                                   const uint8_t* second_pred);
+#define aom_sad64x32_avg aom_sad64x32_avg_neon
+
+void aom_sad64x32x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad64x32x3d aom_sad64x32x3d_c
 
 void aom_sad64x32x4d_c(const uint8_t* src_ptr,
                        int src_stride,
@@ -3095,7 +3403,19 @@ unsigned int aom_sad64x64_avg_c(const uint8_t* src_ptr,
                                 const uint8_t* ref_ptr,
                                 int ref_stride,
                                 const uint8_t* second_pred);
-#define aom_sad64x64_avg aom_sad64x64_avg_c
+unsigned int aom_sad64x64_avg_neon(const uint8_t* src_ptr,
+                                   int src_stride,
+                                   const uint8_t* ref_ptr,
+                                   int ref_stride,
+                                   const uint8_t* second_pred);
+#define aom_sad64x64_avg aom_sad64x64_avg_neon
+
+void aom_sad64x64x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+#define aom_sad64x64x3d aom_sad64x64x3d_c
 
 void aom_sad64x64x4d_c(const uint8_t* src_ptr,
                        int src_stride,
@@ -3140,7 +3460,19 @@ unsigned int aom_sad8x16_avg_c(const uint8_t* src_ptr,
                                const uint8_t* ref_ptr,
                                int ref_stride,
                                const uint8_t* second_pred);
-#define aom_sad8x16_avg aom_sad8x16_avg_c
+unsigned int aom_sad8x16_avg_neon(const uint8_t* src_ptr,
+                                  int src_stride,
+                                  const uint8_t* ref_ptr,
+                                  int ref_stride,
+                                  const uint8_t* second_pred);
+#define aom_sad8x16_avg aom_sad8x16_avg_neon
+
+void aom_sad8x16x3d_c(const uint8_t* src_ptr,
+                      int src_stride,
+                      const uint8_t* const ref_ptr[4],
+                      int ref_stride,
+                      uint32_t sad_array[4]);
+#define aom_sad8x16x3d aom_sad8x16x3d_c
 
 void aom_sad8x16x4d_c(const uint8_t* src_ptr,
                       int src_stride,
@@ -3177,7 +3509,19 @@ unsigned int aom_sad8x4_avg_c(const uint8_t* src_ptr,
                               const uint8_t* ref_ptr,
                               int ref_stride,
                               const uint8_t* second_pred);
-#define aom_sad8x4_avg aom_sad8x4_avg_c
+unsigned int aom_sad8x4_avg_neon(const uint8_t* src_ptr,
+                                 int src_stride,
+                                 const uint8_t* ref_ptr,
+                                 int ref_stride,
+                                 const uint8_t* second_pred);
+#define aom_sad8x4_avg aom_sad8x4_avg_neon
+
+void aom_sad8x4x3d_c(const uint8_t* src_ptr,
+                     int src_stride,
+                     const uint8_t* const ref_ptr[4],
+                     int ref_stride,
+                     uint32_t sad_array[4]);
+#define aom_sad8x4x3d aom_sad8x4x3d_c
 
 void aom_sad8x4x4d_c(const uint8_t* src_ptr,
                      int src_stride,
@@ -3214,7 +3558,19 @@ unsigned int aom_sad8x8_avg_c(const uint8_t* src_ptr,
                               const uint8_t* ref_ptr,
                               int ref_stride,
                               const uint8_t* second_pred);
-#define aom_sad8x8_avg aom_sad8x8_avg_c
+unsigned int aom_sad8x8_avg_neon(const uint8_t* src_ptr,
+                                 int src_stride,
+                                 const uint8_t* ref_ptr,
+                                 int ref_stride,
+                                 const uint8_t* second_pred);
+#define aom_sad8x8_avg aom_sad8x8_avg_neon
+
+void aom_sad8x8x3d_c(const uint8_t* src_ptr,
+                     int src_stride,
+                     const uint8_t* const ref_ptr[4],
+                     int ref_stride,
+                     uint32_t sad_array[4]);
+#define aom_sad8x8x3d aom_sad8x8x3d_c
 
 void aom_sad8x8x4d_c(const uint8_t* src_ptr,
                      int src_stride,
@@ -4213,7 +4569,15 @@ uint32_t aom_sub_pixel_avg_variance128x128_c(const uint8_t* src_ptr,
                                              int ref_stride,
                                              uint32_t* sse,
                                              const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance128x128 aom_sub_pixel_avg_variance128x128_c
+uint32_t aom_sub_pixel_avg_variance128x128_neon(const uint8_t* src_ptr,
+                                                int source_stride,
+                                                int xoffset,
+                                                int yoffset,
+                                                const uint8_t* ref_ptr,
+                                                int ref_stride,
+                                                uint32_t* sse,
+                                                const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance128x128 aom_sub_pixel_avg_variance128x128_neon
 
 uint32_t aom_sub_pixel_avg_variance128x64_c(const uint8_t* src_ptr,
                                             int source_stride,
@@ -4223,7 +4587,15 @@ uint32_t aom_sub_pixel_avg_variance128x64_c(const uint8_t* src_ptr,
                                             int ref_stride,
                                             uint32_t* sse,
                                             const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance128x64 aom_sub_pixel_avg_variance128x64_c
+uint32_t aom_sub_pixel_avg_variance128x64_neon(const uint8_t* src_ptr,
+                                               int source_stride,
+                                               int xoffset,
+                                               int yoffset,
+                                               const uint8_t* ref_ptr,
+                                               int ref_stride,
+                                               uint32_t* sse,
+                                               const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance128x64 aom_sub_pixel_avg_variance128x64_neon
 
 uint32_t aom_sub_pixel_avg_variance16x16_c(const uint8_t* src_ptr,
                                            int source_stride,
@@ -4233,7 +4605,15 @@ uint32_t aom_sub_pixel_avg_variance16x16_c(const uint8_t* src_ptr,
                                            int ref_stride,
                                            uint32_t* sse,
                                            const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance16x16 aom_sub_pixel_avg_variance16x16_c
+uint32_t aom_sub_pixel_avg_variance16x16_neon(const uint8_t* src_ptr,
+                                              int source_stride,
+                                              int xoffset,
+                                              int yoffset,
+                                              const uint8_t* ref_ptr,
+                                              int ref_stride,
+                                              uint32_t* sse,
+                                              const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance16x16 aom_sub_pixel_avg_variance16x16_neon
 
 uint32_t aom_sub_pixel_avg_variance16x32_c(const uint8_t* src_ptr,
                                            int source_stride,
@@ -4243,7 +4623,15 @@ uint32_t aom_sub_pixel_avg_variance16x32_c(const uint8_t* src_ptr,
                                            int ref_stride,
                                            uint32_t* sse,
                                            const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance16x32 aom_sub_pixel_avg_variance16x32_c
+uint32_t aom_sub_pixel_avg_variance16x32_neon(const uint8_t* src_ptr,
+                                              int source_stride,
+                                              int xoffset,
+                                              int yoffset,
+                                              const uint8_t* ref_ptr,
+                                              int ref_stride,
+                                              uint32_t* sse,
+                                              const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance16x32 aom_sub_pixel_avg_variance16x32_neon
 
 uint32_t aom_sub_pixel_avg_variance16x8_c(const uint8_t* src_ptr,
                                           int source_stride,
@@ -4253,7 +4641,15 @@ uint32_t aom_sub_pixel_avg_variance16x8_c(const uint8_t* src_ptr,
                                           int ref_stride,
                                           uint32_t* sse,
                                           const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance16x8 aom_sub_pixel_avg_variance16x8_c
+uint32_t aom_sub_pixel_avg_variance16x8_neon(const uint8_t* src_ptr,
+                                             int source_stride,
+                                             int xoffset,
+                                             int yoffset,
+                                             const uint8_t* ref_ptr,
+                                             int ref_stride,
+                                             uint32_t* sse,
+                                             const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance16x8 aom_sub_pixel_avg_variance16x8_neon
 
 uint32_t aom_sub_pixel_avg_variance32x16_c(const uint8_t* src_ptr,
                                            int source_stride,
@@ -4263,7 +4659,15 @@ uint32_t aom_sub_pixel_avg_variance32x16_c(const uint8_t* src_ptr,
                                            int ref_stride,
                                            uint32_t* sse,
                                            const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance32x16 aom_sub_pixel_avg_variance32x16_c
+uint32_t aom_sub_pixel_avg_variance32x16_neon(const uint8_t* src_ptr,
+                                              int source_stride,
+                                              int xoffset,
+                                              int yoffset,
+                                              const uint8_t* ref_ptr,
+                                              int ref_stride,
+                                              uint32_t* sse,
+                                              const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance32x16 aom_sub_pixel_avg_variance32x16_neon
 
 uint32_t aom_sub_pixel_avg_variance32x32_c(const uint8_t* src_ptr,
                                            int source_stride,
@@ -4273,7 +4677,15 @@ uint32_t aom_sub_pixel_avg_variance32x32_c(const uint8_t* src_ptr,
                                            int ref_stride,
                                            uint32_t* sse,
                                            const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance32x32 aom_sub_pixel_avg_variance32x32_c
+uint32_t aom_sub_pixel_avg_variance32x32_neon(const uint8_t* src_ptr,
+                                              int source_stride,
+                                              int xoffset,
+                                              int yoffset,
+                                              const uint8_t* ref_ptr,
+                                              int ref_stride,
+                                              uint32_t* sse,
+                                              const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance32x32 aom_sub_pixel_avg_variance32x32_neon
 
 uint32_t aom_sub_pixel_avg_variance32x64_c(const uint8_t* src_ptr,
                                            int source_stride,
@@ -4283,7 +4695,15 @@ uint32_t aom_sub_pixel_avg_variance32x64_c(const uint8_t* src_ptr,
                                            int ref_stride,
                                            uint32_t* sse,
                                            const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance32x64 aom_sub_pixel_avg_variance32x64_c
+uint32_t aom_sub_pixel_avg_variance32x64_neon(const uint8_t* src_ptr,
+                                              int source_stride,
+                                              int xoffset,
+                                              int yoffset,
+                                              const uint8_t* ref_ptr,
+                                              int ref_stride,
+                                              uint32_t* sse,
+                                              const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance32x64 aom_sub_pixel_avg_variance32x64_neon
 
 uint32_t aom_sub_pixel_avg_variance4x4_c(const uint8_t* src_ptr,
                                          int source_stride,
@@ -4293,7 +4713,15 @@ uint32_t aom_sub_pixel_avg_variance4x4_c(const uint8_t* src_ptr,
                                          int ref_stride,
                                          uint32_t* sse,
                                          const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance4x4 aom_sub_pixel_avg_variance4x4_c
+uint32_t aom_sub_pixel_avg_variance4x4_neon(const uint8_t* src_ptr,
+                                            int source_stride,
+                                            int xoffset,
+                                            int yoffset,
+                                            const uint8_t* ref_ptr,
+                                            int ref_stride,
+                                            uint32_t* sse,
+                                            const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance4x4 aom_sub_pixel_avg_variance4x4_neon
 
 uint32_t aom_sub_pixel_avg_variance4x8_c(const uint8_t* src_ptr,
                                          int source_stride,
@@ -4303,7 +4731,15 @@ uint32_t aom_sub_pixel_avg_variance4x8_c(const uint8_t* src_ptr,
                                          int ref_stride,
                                          uint32_t* sse,
                                          const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance4x8 aom_sub_pixel_avg_variance4x8_c
+uint32_t aom_sub_pixel_avg_variance4x8_neon(const uint8_t* src_ptr,
+                                            int source_stride,
+                                            int xoffset,
+                                            int yoffset,
+                                            const uint8_t* ref_ptr,
+                                            int ref_stride,
+                                            uint32_t* sse,
+                                            const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance4x8 aom_sub_pixel_avg_variance4x8_neon
 
 uint32_t aom_sub_pixel_avg_variance64x128_c(const uint8_t* src_ptr,
                                             int source_stride,
@@ -4313,7 +4749,15 @@ uint32_t aom_sub_pixel_avg_variance64x128_c(const uint8_t* src_ptr,
                                             int ref_stride,
                                             uint32_t* sse,
                                             const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance64x128 aom_sub_pixel_avg_variance64x128_c
+uint32_t aom_sub_pixel_avg_variance64x128_neon(const uint8_t* src_ptr,
+                                               int source_stride,
+                                               int xoffset,
+                                               int yoffset,
+                                               const uint8_t* ref_ptr,
+                                               int ref_stride,
+                                               uint32_t* sse,
+                                               const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance64x128 aom_sub_pixel_avg_variance64x128_neon
 
 uint32_t aom_sub_pixel_avg_variance64x32_c(const uint8_t* src_ptr,
                                            int source_stride,
@@ -4323,7 +4767,15 @@ uint32_t aom_sub_pixel_avg_variance64x32_c(const uint8_t* src_ptr,
                                            int ref_stride,
                                            uint32_t* sse,
                                            const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance64x32 aom_sub_pixel_avg_variance64x32_c
+uint32_t aom_sub_pixel_avg_variance64x32_neon(const uint8_t* src_ptr,
+                                              int source_stride,
+                                              int xoffset,
+                                              int yoffset,
+                                              const uint8_t* ref_ptr,
+                                              int ref_stride,
+                                              uint32_t* sse,
+                                              const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance64x32 aom_sub_pixel_avg_variance64x32_neon
 
 uint32_t aom_sub_pixel_avg_variance64x64_c(const uint8_t* src_ptr,
                                            int source_stride,
@@ -4333,7 +4785,15 @@ uint32_t aom_sub_pixel_avg_variance64x64_c(const uint8_t* src_ptr,
                                            int ref_stride,
                                            uint32_t* sse,
                                            const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance64x64 aom_sub_pixel_avg_variance64x64_c
+uint32_t aom_sub_pixel_avg_variance64x64_neon(const uint8_t* src_ptr,
+                                              int source_stride,
+                                              int xoffset,
+                                              int yoffset,
+                                              const uint8_t* ref_ptr,
+                                              int ref_stride,
+                                              uint32_t* sse,
+                                              const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance64x64 aom_sub_pixel_avg_variance64x64_neon
 
 uint32_t aom_sub_pixel_avg_variance8x16_c(const uint8_t* src_ptr,
                                           int source_stride,
@@ -4343,7 +4803,15 @@ uint32_t aom_sub_pixel_avg_variance8x16_c(const uint8_t* src_ptr,
                                           int ref_stride,
                                           uint32_t* sse,
                                           const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance8x16 aom_sub_pixel_avg_variance8x16_c
+uint32_t aom_sub_pixel_avg_variance8x16_neon(const uint8_t* src_ptr,
+                                             int source_stride,
+                                             int xoffset,
+                                             int yoffset,
+                                             const uint8_t* ref_ptr,
+                                             int ref_stride,
+                                             uint32_t* sse,
+                                             const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance8x16 aom_sub_pixel_avg_variance8x16_neon
 
 uint32_t aom_sub_pixel_avg_variance8x4_c(const uint8_t* src_ptr,
                                          int source_stride,
@@ -4353,7 +4821,15 @@ uint32_t aom_sub_pixel_avg_variance8x4_c(const uint8_t* src_ptr,
                                          int ref_stride,
                                          uint32_t* sse,
                                          const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance8x4 aom_sub_pixel_avg_variance8x4_c
+uint32_t aom_sub_pixel_avg_variance8x4_neon(const uint8_t* src_ptr,
+                                            int source_stride,
+                                            int xoffset,
+                                            int yoffset,
+                                            const uint8_t* ref_ptr,
+                                            int ref_stride,
+                                            uint32_t* sse,
+                                            const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance8x4 aom_sub_pixel_avg_variance8x4_neon
 
 uint32_t aom_sub_pixel_avg_variance8x8_c(const uint8_t* src_ptr,
                                          int source_stride,
@@ -4363,7 +4839,15 @@ uint32_t aom_sub_pixel_avg_variance8x8_c(const uint8_t* src_ptr,
                                          int ref_stride,
                                          uint32_t* sse,
                                          const uint8_t* second_pred);
-#define aom_sub_pixel_avg_variance8x8 aom_sub_pixel_avg_variance8x8_c
+uint32_t aom_sub_pixel_avg_variance8x8_neon(const uint8_t* src_ptr,
+                                            int source_stride,
+                                            int xoffset,
+                                            int yoffset,
+                                            const uint8_t* ref_ptr,
+                                            int ref_stride,
+                                            uint32_t* sse,
+                                            const uint8_t* second_pred);
+#define aom_sub_pixel_avg_variance8x8 aom_sub_pixel_avg_variance8x8_neon
 
 uint32_t aom_sub_pixel_variance128x128_c(const uint8_t* src_ptr,
                                          int source_stride,
@@ -5013,8 +5497,8 @@ unsigned int aom_variance8x8_neon(const uint8_t* src_ptr,
                                   unsigned int* sse);
 #define aom_variance8x8 aom_variance8x8_neon
 
-int aom_vector_var_c(const int16_t* ref, const int16_t* src, const int bwl);
-int aom_vector_var_neon(const int16_t* ref, const int16_t* src, const int bwl);
+int aom_vector_var_c(const int16_t* ref, const int16_t* src, int bwl);
+int aom_vector_var_neon(const int16_t* ref, const int16_t* src, int bwl);
 #define aom_vector_var aom_vector_var_neon
 
 void aom_dsp_rtcd(void);
diff --git a/libaom/source/config/win/arm64/config/aom_scale_rtcd.h b/libaom/source/config/win/arm64/config/aom_scale_rtcd.h
index 7db7b9d..bc23102 100644
--- a/libaom/source/config/win/arm64/config/aom_scale_rtcd.h
+++ b/libaom/source/config/win/arm64/config/aom_scale_rtcd.h
@@ -155,6 +155,7 @@ void aom_yv12_partial_copy_y_c(const struct yv12_buffer_config* src_ybc,
 int aom_yv12_realloc_with_new_border_c(struct yv12_buffer_config* ybf,
                                        int new_border,
                                        int byte_alignment,
+                                       int num_pyramid_levels,
                                        int num_planes);
 #define aom_yv12_realloc_with_new_border aom_yv12_realloc_with_new_border_c
 
diff --git a/libaom/source/config/win/arm64/config/av1_rtcd.h b/libaom/source/config/win/arm64/config/av1_rtcd.h
index fd9ac83..37b5c0d 100644
--- a/libaom/source/config/win/arm64/config/av1_rtcd.h
+++ b/libaom/source/config/win/arm64/config/av1_rtcd.h
@@ -266,30 +266,22 @@ int64_t av1_calc_frame_error_c(const uint8_t* const ref,
                                int p_stride);
 #define av1_calc_frame_error av1_calc_frame_error_c
 
-void av1_calc_indices_dim1_c(const int* data,
-                             const int* centroids,
+void av1_calc_indices_dim1_c(const int16_t* data,
+                             const int16_t* centroids,
                              uint8_t* indices,
+                             int64_t* total_dist,
                              int n,
                              int k);
 #define av1_calc_indices_dim1 av1_calc_indices_dim1_c
 
-void av1_calc_indices_dim2_c(const int* data,
-                             const int* centroids,
+void av1_calc_indices_dim2_c(const int16_t* data,
+                             const int16_t* centroids,
                              uint8_t* indices,
+                             int64_t* total_dist,
                              int n,
                              int k);
 #define av1_calc_indices_dim2 av1_calc_indices_dim2_c
 
-double av1_compute_cross_correlation_c(unsigned char* im1,
-                                       int stride1,
-                                       int x1,
-                                       int y1,
-                                       unsigned char* im2,
-                                       int stride2,
-                                       int x2,
-                                       int y2);
-#define av1_compute_cross_correlation av1_compute_cross_correlation_c
-
 void av1_convolve_2d_scale_c(const uint8_t* src,
                              int src_stride,
                              uint8_t* dst,
@@ -765,12 +757,6 @@ void av1_get_nz_map_contexts_neon(const uint8_t* const levels,
                                   int8_t* const coeff_contexts);
 #define av1_get_nz_map_contexts av1_get_nz_map_contexts_neon
 
-void av1_highbd_fwht4x4_c(const int16_t* input, tran_low_t* output, int stride);
-void av1_highbd_fwht4x4_neon(const int16_t* input,
-                             tran_low_t* output,
-                             int stride);
-#define av1_highbd_fwht4x4 av1_highbd_fwht4x4_neon
-
 void av1_highbd_inv_txfm_add_c(const tran_low_t* input,
                                uint8_t* dest,
                                int stride,
@@ -1472,28 +1458,28 @@ void cdef_copy_rect8_16bit_to_16bit_c(uint16_t* dst,
                                       int dstride,
                                       const uint16_t* src,
                                       int sstride,
-                                      int v,
-                                      int h);
+                                      int width,
+                                      int height);
 void cdef_copy_rect8_16bit_to_16bit_neon(uint16_t* dst,
                                          int dstride,
                                          const uint16_t* src,
                                          int sstride,
-                                         int v,
-                                         int h);
+                                         int width,
+                                         int height);
 #define cdef_copy_rect8_16bit_to_16bit cdef_copy_rect8_16bit_to_16bit_neon
 
 void cdef_copy_rect8_8bit_to_16bit_c(uint16_t* dst,
                                      int dstride,
                                      const uint8_t* src,
                                      int sstride,
-                                     int v,
-                                     int h);
+                                     int width,
+                                     int height);
 void cdef_copy_rect8_8bit_to_16bit_neon(uint16_t* dst,
                                         int dstride,
                                         const uint8_t* src,
                                         int sstride,
-                                        int v,
-                                        int h);
+                                        int width,
+                                        int height);
 #define cdef_copy_rect8_8bit_to_16bit cdef_copy_rect8_8bit_to_16bit_neon
 
 void cdef_filter_16_0_c(void* dst16,
diff --git a/libaom/source/config/win/ia32/config/aom_config.asm b/libaom/source/config/win/ia32/config/aom_config.asm
index 565e75f..690c8ce 100644
--- a/libaom/source/config/win/ia32/config/aom_config.asm
+++ b/libaom/source/config/win/ia32/config/aom_config.asm
@@ -36,6 +36,7 @@
 %define CONFIG_NORMAL_TILE_MODE 1
 %define CONFIG_OPTICAL_FLOW_API 0
 %define CONFIG_OS_SUPPORT 1
+%define CONFIG_OUTPUT_FRAME_SIZE 0
 %define CONFIG_PARTITION_SEARCH_ORDER 0
 %define CONFIG_PIC 1
 %define CONFIG_RATECTRL_LOG 0
@@ -44,6 +45,7 @@
 %define CONFIG_REALTIME_ONLY 1
 %define CONFIG_RT_ML_PARTITIONING 0
 %define CONFIG_RUNTIME_CPU_DETECT 1
+%define CONFIG_SALIENCY_MAP 0
 %define CONFIG_SHARED 0
 %define CONFIG_SIZE_LIMIT 1
 %define CONFIG_SPATIAL_RESAMPLING 1
diff --git a/libaom/source/config/win/ia32/config/aom_config.h b/libaom/source/config/win/ia32/config/aom_config.h
index cb33991..96c753b 100644
--- a/libaom/source/config/win/ia32/config/aom_config.h
+++ b/libaom/source/config/win/ia32/config/aom_config.h
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022, Alliance for Open Media. All rights reserved
+ * Copyright (c) 2023, Alliance for Open Media. All rights reserved
  *
  * This source code is subject to the terms of the BSD 2 Clause License and
  * the Alliance for Open Media Patent License 1.0. If the BSD 2 Clause License
@@ -48,6 +48,7 @@
 #define CONFIG_NORMAL_TILE_MODE 1
 #define CONFIG_OPTICAL_FLOW_API 0
 #define CONFIG_OS_SUPPORT 1
+#define CONFIG_OUTPUT_FRAME_SIZE 0
 #define CONFIG_PARTITION_SEARCH_ORDER 0
 #define CONFIG_PIC 1
 #define CONFIG_RATECTRL_LOG 0
@@ -56,6 +57,7 @@
 #define CONFIG_REALTIME_ONLY 1
 #define CONFIG_RT_ML_PARTITIONING 0
 #define CONFIG_RUNTIME_CPU_DETECT 1
+#define CONFIG_SALIENCY_MAP 0
 #define CONFIG_SHARED 0
 #define CONFIG_SIZE_LIMIT 1
 #define CONFIG_SPATIAL_RESAMPLING 1
diff --git a/libaom/source/config/win/ia32/config/aom_dsp_rtcd.h b/libaom/source/config/win/ia32/config/aom_dsp_rtcd.h
index 4a14080..1c310c1 100644
--- a/libaom/source/config/win/ia32/config/aom_dsp_rtcd.h
+++ b/libaom/source/config/win/ia32/config/aom_dsp_rtcd.h
@@ -2223,30 +2223,75 @@ unsigned int aom_get_mb_ss_c(const int16_t*);
 unsigned int aom_get_mb_ss_sse2(const int16_t*);
 #define aom_get_mb_ss aom_get_mb_ss_sse2
 
-void aom_get_sse_sum_8x8_quad_c(const uint8_t* src_ptr,
-                                int source_stride,
-                                const uint8_t* ref_ptr,
-                                int ref_stride,
-                                unsigned int* sse,
-                                int* sum);
-void aom_get_sse_sum_8x8_quad_sse2(const uint8_t* src_ptr,
-                                   int source_stride,
-                                   const uint8_t* ref_ptr,
-                                   int ref_stride,
-                                   unsigned int* sse,
-                                   int* sum);
-void aom_get_sse_sum_8x8_quad_avx2(const uint8_t* src_ptr,
-                                   int source_stride,
-                                   const uint8_t* ref_ptr,
-                                   int ref_stride,
-                                   unsigned int* sse,
-                                   int* sum);
-RTCD_EXTERN void (*aom_get_sse_sum_8x8_quad)(const uint8_t* src_ptr,
-                                             int source_stride,
-                                             const uint8_t* ref_ptr,
-                                             int ref_stride,
-                                             unsigned int* sse,
-                                             int* sum);
+void aom_get_var_sse_sum_16x16_dual_c(const uint8_t* src_ptr,
+                                      int source_stride,
+                                      const uint8_t* ref_ptr,
+                                      int ref_stride,
+                                      uint32_t* sse16x16,
+                                      unsigned int* tot_sse,
+                                      int* tot_sum,
+                                      uint32_t* var16x16);
+void aom_get_var_sse_sum_16x16_dual_sse2(const uint8_t* src_ptr,
+                                         int source_stride,
+                                         const uint8_t* ref_ptr,
+                                         int ref_stride,
+                                         uint32_t* sse16x16,
+                                         unsigned int* tot_sse,
+                                         int* tot_sum,
+                                         uint32_t* var16x16);
+void aom_get_var_sse_sum_16x16_dual_avx2(const uint8_t* src_ptr,
+                                         int source_stride,
+                                         const uint8_t* ref_ptr,
+                                         int ref_stride,
+                                         uint32_t* sse16x16,
+                                         unsigned int* tot_sse,
+                                         int* tot_sum,
+                                         uint32_t* var16x16);
+RTCD_EXTERN void (*aom_get_var_sse_sum_16x16_dual)(const uint8_t* src_ptr,
+                                                   int source_stride,
+                                                   const uint8_t* ref_ptr,
+                                                   int ref_stride,
+                                                   uint32_t* sse16x16,
+                                                   unsigned int* tot_sse,
+                                                   int* tot_sum,
+                                                   uint32_t* var16x16);
+
+void aom_get_var_sse_sum_8x8_quad_c(const uint8_t* src_ptr,
+                                    int source_stride,
+                                    const uint8_t* ref_ptr,
+                                    int ref_stride,
+                                    uint32_t* sse8x8,
+                                    int* sum8x8,
+                                    unsigned int* tot_sse,
+                                    int* tot_sum,
+                                    uint32_t* var8x8);
+void aom_get_var_sse_sum_8x8_quad_sse2(const uint8_t* src_ptr,
+                                       int source_stride,
+                                       const uint8_t* ref_ptr,
+                                       int ref_stride,
+                                       uint32_t* sse8x8,
+                                       int* sum8x8,
+                                       unsigned int* tot_sse,
+                                       int* tot_sum,
+                                       uint32_t* var8x8);
+void aom_get_var_sse_sum_8x8_quad_avx2(const uint8_t* src_ptr,
+                                       int source_stride,
+                                       const uint8_t* ref_ptr,
+                                       int ref_stride,
+                                       uint32_t* sse8x8,
+                                       int* sum8x8,
+                                       unsigned int* tot_sse,
+                                       int* tot_sum,
+                                       uint32_t* var8x8);
+RTCD_EXTERN void (*aom_get_var_sse_sum_8x8_quad)(const uint8_t* src_ptr,
+                                                 int source_stride,
+                                                 const uint8_t* ref_ptr,
+                                                 int ref_stride,
+                                                 uint32_t* sse8x8,
+                                                 int* sum8x8,
+                                                 unsigned int* tot_sse,
+                                                 int* tot_sum,
+                                                 uint32_t* var8x8);
 
 void aom_h_predictor_16x16_c(uint8_t* dst,
                              ptrdiff_t y_stride,
@@ -2887,7 +2932,16 @@ void aom_lpf_vertical_14_quad_sse2(uint8_t* s,
                                    const uint8_t* blimit0,
                                    const uint8_t* limit0,
                                    const uint8_t* thresh0);
-#define aom_lpf_vertical_14_quad aom_lpf_vertical_14_quad_sse2
+void aom_lpf_vertical_14_quad_avx2(uint8_t* s,
+                                   int pitch,
+                                   const uint8_t* blimit0,
+                                   const uint8_t* limit0,
+                                   const uint8_t* thresh0);
+RTCD_EXTERN void (*aom_lpf_vertical_14_quad)(uint8_t* s,
+                                             int pitch,
+                                             const uint8_t* blimit0,
+                                             const uint8_t* limit0,
+                                             const uint8_t* thresh0);
 
 void aom_lpf_vertical_4_c(uint8_t* s,
                           int pitch,
@@ -4637,6 +4691,11 @@ uint64_t aom_mse_16xh_16bit_c(uint8_t* dst,
                               uint16_t* src,
                               int w,
                               int h);
+uint64_t aom_mse_16xh_16bit_sse2(uint8_t* dst,
+                                 int dstride,
+                                 uint16_t* src,
+                                 int w,
+                                 int h);
 uint64_t aom_mse_16xh_16bit_avx2(uint8_t* dst,
                                  int dstride,
                                  uint16_t* src,
@@ -5171,6 +5230,22 @@ RTCD_EXTERN unsigned int (*aom_sad128x128_avg)(const uint8_t* src_ptr,
                                                int ref_stride,
                                                const uint8_t* second_pred);
 
+void aom_sad128x128x3d_c(const uint8_t* src_ptr,
+                         int src_stride,
+                         const uint8_t* const ref_ptr[4],
+                         int ref_stride,
+                         uint32_t sad_array[4]);
+void aom_sad128x128x3d_avx2(const uint8_t* src_ptr,
+                            int src_stride,
+                            const uint8_t* const ref_ptr[4],
+                            int ref_stride,
+                            uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad128x128x3d)(const uint8_t* src_ptr,
+                                      int src_stride,
+                                      const uint8_t* const ref_ptr[4],
+                                      int ref_stride,
+                                      uint32_t sad_array[4]);
+
 void aom_sad128x128x4d_c(const uint8_t* src_ptr,
                          int src_stride,
                          const uint8_t* const ref_ptr[4],
@@ -5238,6 +5313,22 @@ RTCD_EXTERN unsigned int (*aom_sad128x64_avg)(const uint8_t* src_ptr,
                                               int ref_stride,
                                               const uint8_t* second_pred);
 
+void aom_sad128x64x3d_c(const uint8_t* src_ptr,
+                        int src_stride,
+                        const uint8_t* const ref_ptr[4],
+                        int ref_stride,
+                        uint32_t sad_array[4]);
+void aom_sad128x64x3d_avx2(const uint8_t* src_ptr,
+                           int src_stride,
+                           const uint8_t* const ref_ptr[4],
+                           int ref_stride,
+                           uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad128x64x3d)(const uint8_t* src_ptr,
+                                     int src_stride,
+                                     const uint8_t* const ref_ptr[4],
+                                     int ref_stride,
+                                     uint32_t sad_array[4]);
+
 void aom_sad128x64x4d_c(const uint8_t* src_ptr,
                         int src_stride,
                         const uint8_t* const ref_ptr[4],
@@ -5303,6 +5394,22 @@ unsigned int aom_sad16x16_avg_sse2(const uint8_t* src_ptr,
                                    const uint8_t* second_pred);
 #define aom_sad16x16_avg aom_sad16x16_avg_sse2
 
+void aom_sad16x16x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+void aom_sad16x16x3d_avx2(const uint8_t* src_ptr,
+                          int src_stride,
+                          const uint8_t* const ref_ptr[4],
+                          int ref_stride,
+                          uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad16x16x3d)(const uint8_t* src_ptr,
+                                    int src_stride,
+                                    const uint8_t* const ref_ptr[4],
+                                    int ref_stride,
+                                    uint32_t sad_array[4]);
+
 void aom_sad16x16x4d_c(const uint8_t* src_ptr,
                        int src_stride,
                        const uint8_t* const ref_ptr[4],
@@ -5313,7 +5420,16 @@ void aom_sad16x16x4d_sse2(const uint8_t* src_ptr,
                           const uint8_t* const ref_ptr[4],
                           int ref_stride,
                           uint32_t sad_array[4]);
-#define aom_sad16x16x4d aom_sad16x16x4d_sse2
+void aom_sad16x16x4d_avx2(const uint8_t* src_ptr,
+                          int src_stride,
+                          const uint8_t* const ref_ptr[4],
+                          int ref_stride,
+                          uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad16x16x4d)(const uint8_t* src_ptr,
+                                    int src_stride,
+                                    const uint8_t* const ref_ptr[4],
+                                    int ref_stride,
+                                    uint32_t sad_array[4]);
 
 void aom_sad16x16x4d_avg_c(const uint8_t* src_ptr,
                            int src_stride,
@@ -5345,6 +5461,22 @@ unsigned int aom_sad16x32_avg_sse2(const uint8_t* src_ptr,
                                    const uint8_t* second_pred);
 #define aom_sad16x32_avg aom_sad16x32_avg_sse2
 
+void aom_sad16x32x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+void aom_sad16x32x3d_avx2(const uint8_t* src_ptr,
+                          int src_stride,
+                          const uint8_t* const ref_ptr[4],
+                          int ref_stride,
+                          uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad16x32x3d)(const uint8_t* src_ptr,
+                                    int src_stride,
+                                    const uint8_t* const ref_ptr[4],
+                                    int ref_stride,
+                                    uint32_t sad_array[4]);
+
 void aom_sad16x32x4d_c(const uint8_t* src_ptr,
                        int src_stride,
                        const uint8_t* const ref_ptr[4],
@@ -5355,7 +5487,16 @@ void aom_sad16x32x4d_sse2(const uint8_t* src_ptr,
                           const uint8_t* const ref_ptr[4],
                           int ref_stride,
                           uint32_t sad_array[4]);
-#define aom_sad16x32x4d aom_sad16x32x4d_sse2
+void aom_sad16x32x4d_avx2(const uint8_t* src_ptr,
+                          int src_stride,
+                          const uint8_t* const ref_ptr[4],
+                          int ref_stride,
+                          uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad16x32x4d)(const uint8_t* src_ptr,
+                                    int src_stride,
+                                    const uint8_t* const ref_ptr[4],
+                                    int ref_stride,
+                                    uint32_t sad_array[4]);
 
 void aom_sad16x32x4d_avg_c(const uint8_t* src_ptr,
                            int src_stride,
@@ -5387,6 +5528,22 @@ unsigned int aom_sad16x8_avg_sse2(const uint8_t* src_ptr,
                                   const uint8_t* second_pred);
 #define aom_sad16x8_avg aom_sad16x8_avg_sse2
 
+void aom_sad16x8x3d_c(const uint8_t* src_ptr,
+                      int src_stride,
+                      const uint8_t* const ref_ptr[4],
+                      int ref_stride,
+                      uint32_t sad_array[4]);
+void aom_sad16x8x3d_avx2(const uint8_t* src_ptr,
+                         int src_stride,
+                         const uint8_t* const ref_ptr[4],
+                         int ref_stride,
+                         uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad16x8x3d)(const uint8_t* src_ptr,
+                                   int src_stride,
+                                   const uint8_t* const ref_ptr[4],
+                                   int ref_stride,
+                                   uint32_t sad_array[4]);
+
 void aom_sad16x8x4d_c(const uint8_t* src_ptr,
                       int src_stride,
                       const uint8_t* const ref_ptr[4],
@@ -5397,7 +5554,16 @@ void aom_sad16x8x4d_sse2(const uint8_t* src_ptr,
                          const uint8_t* const ref_ptr[4],
                          int ref_stride,
                          uint32_t sad_array[4]);
-#define aom_sad16x8x4d aom_sad16x8x4d_sse2
+void aom_sad16x8x4d_avx2(const uint8_t* src_ptr,
+                         int src_stride,
+                         const uint8_t* const ref_ptr[4],
+                         int ref_stride,
+                         uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad16x8x4d)(const uint8_t* src_ptr,
+                                   int src_stride,
+                                   const uint8_t* const ref_ptr[4],
+                                   int ref_stride,
+                                   uint32_t sad_array[4]);
 
 void aom_sad16x8x4d_avg_c(const uint8_t* src_ptr,
                           int src_stride,
@@ -5459,6 +5625,22 @@ RTCD_EXTERN unsigned int (*aom_sad32x16_avg)(const uint8_t* src_ptr,
                                              int ref_stride,
                                              const uint8_t* second_pred);
 
+void aom_sad32x16x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+void aom_sad32x16x3d_avx2(const uint8_t* src_ptr,
+                          int src_stride,
+                          const uint8_t* const ref_ptr[4],
+                          int ref_stride,
+                          uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad32x16x3d)(const uint8_t* src_ptr,
+                                    int src_stride,
+                                    const uint8_t* const ref_ptr[4],
+                                    int ref_stride,
+                                    uint32_t sad_array[4]);
+
 void aom_sad32x16x4d_c(const uint8_t* src_ptr,
                        int src_stride,
                        const uint8_t* const ref_ptr[4],
@@ -5526,6 +5708,22 @@ RTCD_EXTERN unsigned int (*aom_sad32x32_avg)(const uint8_t* src_ptr,
                                              int ref_stride,
                                              const uint8_t* second_pred);
 
+void aom_sad32x32x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+void aom_sad32x32x3d_avx2(const uint8_t* src_ptr,
+                          int src_stride,
+                          const uint8_t* const ref_ptr[4],
+                          int ref_stride,
+                          uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad32x32x3d)(const uint8_t* src_ptr,
+                                    int src_stride,
+                                    const uint8_t* const ref_ptr[4],
+                                    int ref_stride,
+                                    uint32_t sad_array[4]);
+
 void aom_sad32x32x4d_c(const uint8_t* src_ptr,
                        int src_stride,
                        const uint8_t* const ref_ptr[4],
@@ -5593,6 +5791,22 @@ RTCD_EXTERN unsigned int (*aom_sad32x64_avg)(const uint8_t* src_ptr,
                                              int ref_stride,
                                              const uint8_t* second_pred);
 
+void aom_sad32x64x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+void aom_sad32x64x3d_avx2(const uint8_t* src_ptr,
+                          int src_stride,
+                          const uint8_t* const ref_ptr[4],
+                          int ref_stride,
+                          uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad32x64x3d)(const uint8_t* src_ptr,
+                                    int src_stride,
+                                    const uint8_t* const ref_ptr[4],
+                                    int ref_stride,
+                                    uint32_t sad_array[4]);
+
 void aom_sad32x64x4d_c(const uint8_t* src_ptr,
                        int src_stride,
                        const uint8_t* const ref_ptr[4],
@@ -5658,6 +5872,13 @@ unsigned int aom_sad4x4_avg_sse2(const uint8_t* src_ptr,
                                  const uint8_t* second_pred);
 #define aom_sad4x4_avg aom_sad4x4_avg_sse2
 
+void aom_sad4x4x3d_c(const uint8_t* src_ptr,
+                     int src_stride,
+                     const uint8_t* const ref_ptr[4],
+                     int ref_stride,
+                     uint32_t sad_array[4]);
+#define aom_sad4x4x3d aom_sad4x4x3d_c
+
 void aom_sad4x4x4d_c(const uint8_t* src_ptr,
                      int src_stride,
                      const uint8_t* const ref_ptr[4],
@@ -5700,6 +5921,13 @@ unsigned int aom_sad4x8_avg_sse2(const uint8_t* src_ptr,
                                  const uint8_t* second_pred);
 #define aom_sad4x8_avg aom_sad4x8_avg_sse2
 
+void aom_sad4x8x3d_c(const uint8_t* src_ptr,
+                     int src_stride,
+                     const uint8_t* const ref_ptr[4],
+                     int ref_stride,
+                     uint32_t sad_array[4]);
+#define aom_sad4x8x3d aom_sad4x8x3d_c
+
 void aom_sad4x8x4d_c(const uint8_t* src_ptr,
                      int src_stride,
                      const uint8_t* const ref_ptr[4],
@@ -5772,6 +6000,22 @@ RTCD_EXTERN unsigned int (*aom_sad64x128_avg)(const uint8_t* src_ptr,
                                               int ref_stride,
                                               const uint8_t* second_pred);
 
+void aom_sad64x128x3d_c(const uint8_t* src_ptr,
+                        int src_stride,
+                        const uint8_t* const ref_ptr[4],
+                        int ref_stride,
+                        uint32_t sad_array[4]);
+void aom_sad64x128x3d_avx2(const uint8_t* src_ptr,
+                           int src_stride,
+                           const uint8_t* const ref_ptr[4],
+                           int ref_stride,
+                           uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad64x128x3d)(const uint8_t* src_ptr,
+                                     int src_stride,
+                                     const uint8_t* const ref_ptr[4],
+                                     int ref_stride,
+                                     uint32_t sad_array[4]);
+
 void aom_sad64x128x4d_c(const uint8_t* src_ptr,
                         int src_stride,
                         const uint8_t* const ref_ptr[4],
@@ -5839,6 +6083,22 @@ RTCD_EXTERN unsigned int (*aom_sad64x32_avg)(const uint8_t* src_ptr,
                                              int ref_stride,
                                              const uint8_t* second_pred);
 
+void aom_sad64x32x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+void aom_sad64x32x3d_avx2(const uint8_t* src_ptr,
+                          int src_stride,
+                          const uint8_t* const ref_ptr[4],
+                          int ref_stride,
+                          uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad64x32x3d)(const uint8_t* src_ptr,
+                                    int src_stride,
+                                    const uint8_t* const ref_ptr[4],
+                                    int ref_stride,
+                                    uint32_t sad_array[4]);
+
 void aom_sad64x32x4d_c(const uint8_t* src_ptr,
                        int src_stride,
                        const uint8_t* const ref_ptr[4],
@@ -5906,6 +6166,22 @@ RTCD_EXTERN unsigned int (*aom_sad64x64_avg)(const uint8_t* src_ptr,
                                              int ref_stride,
                                              const uint8_t* second_pred);
 
+void aom_sad64x64x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+void aom_sad64x64x3d_avx2(const uint8_t* src_ptr,
+                          int src_stride,
+                          const uint8_t* const ref_ptr[4],
+                          int ref_stride,
+                          uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad64x64x3d)(const uint8_t* src_ptr,
+                                    int src_stride,
+                                    const uint8_t* const ref_ptr[4],
+                                    int ref_stride,
+                                    uint32_t sad_array[4]);
+
 void aom_sad64x64x4d_c(const uint8_t* src_ptr,
                        int src_stride,
                        const uint8_t* const ref_ptr[4],
@@ -5971,6 +6247,13 @@ unsigned int aom_sad8x16_avg_sse2(const uint8_t* src_ptr,
                                   const uint8_t* second_pred);
 #define aom_sad8x16_avg aom_sad8x16_avg_sse2
 
+void aom_sad8x16x3d_c(const uint8_t* src_ptr,
+                      int src_stride,
+                      const uint8_t* const ref_ptr[4],
+                      int ref_stride,
+                      uint32_t sad_array[4]);
+#define aom_sad8x16x3d aom_sad8x16x3d_c
+
 void aom_sad8x16x4d_c(const uint8_t* src_ptr,
                       int src_stride,
                       const uint8_t* const ref_ptr[4],
@@ -6013,6 +6296,13 @@ unsigned int aom_sad8x4_avg_sse2(const uint8_t* src_ptr,
                                  const uint8_t* second_pred);
 #define aom_sad8x4_avg aom_sad8x4_avg_sse2
 
+void aom_sad8x4x3d_c(const uint8_t* src_ptr,
+                     int src_stride,
+                     const uint8_t* const ref_ptr[4],
+                     int ref_stride,
+                     uint32_t sad_array[4]);
+#define aom_sad8x4x3d aom_sad8x4x3d_c
+
 void aom_sad8x4x4d_c(const uint8_t* src_ptr,
                      int src_stride,
                      const uint8_t* const ref_ptr[4],
@@ -6055,6 +6345,13 @@ unsigned int aom_sad8x8_avg_sse2(const uint8_t* src_ptr,
                                  const uint8_t* second_pred);
 #define aom_sad8x8_avg aom_sad8x8_avg_sse2
 
+void aom_sad8x8x3d_c(const uint8_t* src_ptr,
+                     int src_stride,
+                     const uint8_t* const ref_ptr[4],
+                     int ref_stride,
+                     uint32_t sad_array[4]);
+#define aom_sad8x8x3d aom_sad8x8x3d_c
+
 void aom_sad8x8x4d_c(const uint8_t* src_ptr,
                      int src_stride,
                      const uint8_t* const ref_ptr[4],
@@ -6185,7 +6482,16 @@ void aom_sad_skip_16x16x4d_sse2(const uint8_t* src_ptr,
                                 const uint8_t* const ref_ptr[4],
                                 int ref_stride,
                                 uint32_t sad_array[4]);
-#define aom_sad_skip_16x16x4d aom_sad_skip_16x16x4d_sse2
+void aom_sad_skip_16x16x4d_avx2(const uint8_t* src_ptr,
+                                int src_stride,
+                                const uint8_t* const ref_ptr[4],
+                                int ref_stride,
+                                uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad_skip_16x16x4d)(const uint8_t* src_ptr,
+                                          int src_stride,
+                                          const uint8_t* const ref_ptr[4],
+                                          int ref_stride,
+                                          uint32_t sad_array[4]);
 
 unsigned int aom_sad_skip_16x32_c(const uint8_t* src_ptr,
                                   int src_stride,
@@ -6207,7 +6513,16 @@ void aom_sad_skip_16x32x4d_sse2(const uint8_t* src_ptr,
                                 const uint8_t* const ref_ptr[4],
                                 int ref_stride,
                                 uint32_t sad_array[4]);
-#define aom_sad_skip_16x32x4d aom_sad_skip_16x32x4d_sse2
+void aom_sad_skip_16x32x4d_avx2(const uint8_t* src_ptr,
+                                int src_stride,
+                                const uint8_t* const ref_ptr[4],
+                                int ref_stride,
+                                uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad_skip_16x32x4d)(const uint8_t* src_ptr,
+                                          int src_stride,
+                                          const uint8_t* const ref_ptr[4],
+                                          int ref_stride,
+                                          uint32_t sad_array[4]);
 
 unsigned int aom_sad_skip_16x8_c(const uint8_t* src_ptr,
                                  int src_stride,
@@ -6229,7 +6544,16 @@ void aom_sad_skip_16x8x4d_sse2(const uint8_t* src_ptr,
                                const uint8_t* const ref_ptr[4],
                                int ref_stride,
                                uint32_t sad_array[4]);
-#define aom_sad_skip_16x8x4d aom_sad_skip_16x8x4d_sse2
+void aom_sad_skip_16x8x4d_avx2(const uint8_t* src_ptr,
+                               int src_stride,
+                               const uint8_t* const ref_ptr[4],
+                               int ref_stride,
+                               uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad_skip_16x8x4d)(const uint8_t* src_ptr,
+                                         int src_stride,
+                                         const uint8_t* const ref_ptr[4],
+                                         int ref_stride,
+                                         uint32_t sad_array[4]);
 
 unsigned int aom_sad_skip_32x16_c(const uint8_t* src_ptr,
                                   int src_stride,
@@ -9168,13 +9492,12 @@ unsigned int aom_variance8x8_sse2(const uint8_t* src_ptr,
                                   unsigned int* sse);
 #define aom_variance8x8 aom_variance8x8_sse2
 
-int aom_vector_var_c(const int16_t* ref, const int16_t* src, const int bwl);
-int aom_vector_var_sse4_1(const int16_t* ref,
-                          const int16_t* src,
-                          const int bwl);
+int aom_vector_var_c(const int16_t* ref, const int16_t* src, int bwl);
+int aom_vector_var_sse4_1(const int16_t* ref, const int16_t* src, int bwl);
+int aom_vector_var_avx2(const int16_t* ref, const int16_t* src, int bwl);
 RTCD_EXTERN int (*aom_vector_var)(const int16_t* ref,
                                   const int16_t* src,
-                                  const int bwl);
+                                  int bwl);
 
 void aom_dsp_rtcd(void);
 
@@ -9186,1094 +9509,1540 @@ static void setup_rtcd_internal(void) {
   (void)flags;
 
   aom_avg_8x8_quad = aom_avg_8x8_quad_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_avg_8x8_quad = aom_avg_8x8_quad_avx2;
+  }
   aom_blend_a64_hmask = aom_blend_a64_hmask_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     aom_blend_a64_hmask = aom_blend_a64_hmask_sse4_1;
+  }
   aom_blend_a64_mask = aom_blend_a64_mask_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     aom_blend_a64_mask = aom_blend_a64_mask_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_blend_a64_mask = aom_blend_a64_mask_avx2;
+  }
   aom_blend_a64_vmask = aom_blend_a64_vmask_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     aom_blend_a64_vmask = aom_blend_a64_vmask_sse4_1;
+  }
   aom_comp_mask_pred = aom_comp_mask_pred_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_comp_mask_pred = aom_comp_mask_pred_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_comp_mask_pred = aom_comp_mask_pred_avx2;
+  }
   aom_convolve8_horiz = aom_convolve8_horiz_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_convolve8_horiz = aom_convolve8_horiz_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_convolve8_horiz = aom_convolve8_horiz_avx2;
+  }
   aom_convolve8_vert = aom_convolve8_vert_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_convolve8_vert = aom_convolve8_vert_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_convolve8_vert = aom_convolve8_vert_avx2;
+  }
   aom_convolve_copy = aom_convolve_copy_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_convolve_copy = aom_convolve_copy_avx2;
+  }
   aom_dc_128_predictor_32x16 = aom_dc_128_predictor_32x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_128_predictor_32x16 = aom_dc_128_predictor_32x16_avx2;
+  }
   aom_dc_128_predictor_32x32 = aom_dc_128_predictor_32x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_128_predictor_32x32 = aom_dc_128_predictor_32x32_avx2;
+  }
   aom_dc_128_predictor_32x64 = aom_dc_128_predictor_32x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_128_predictor_32x64 = aom_dc_128_predictor_32x64_avx2;
+  }
   aom_dc_128_predictor_64x16 = aom_dc_128_predictor_64x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_128_predictor_64x16 = aom_dc_128_predictor_64x16_avx2;
+  }
   aom_dc_128_predictor_64x32 = aom_dc_128_predictor_64x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_128_predictor_64x32 = aom_dc_128_predictor_64x32_avx2;
+  }
   aom_dc_128_predictor_64x64 = aom_dc_128_predictor_64x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_128_predictor_64x64 = aom_dc_128_predictor_64x64_avx2;
+  }
   aom_dc_left_predictor_32x16 = aom_dc_left_predictor_32x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_left_predictor_32x16 = aom_dc_left_predictor_32x16_avx2;
+  }
   aom_dc_left_predictor_32x32 = aom_dc_left_predictor_32x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_left_predictor_32x32 = aom_dc_left_predictor_32x32_avx2;
+  }
   aom_dc_left_predictor_32x64 = aom_dc_left_predictor_32x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_left_predictor_32x64 = aom_dc_left_predictor_32x64_avx2;
+  }
   aom_dc_left_predictor_64x16 = aom_dc_left_predictor_64x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_left_predictor_64x16 = aom_dc_left_predictor_64x16_avx2;
+  }
   aom_dc_left_predictor_64x32 = aom_dc_left_predictor_64x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_left_predictor_64x32 = aom_dc_left_predictor_64x32_avx2;
+  }
   aom_dc_left_predictor_64x64 = aom_dc_left_predictor_64x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_left_predictor_64x64 = aom_dc_left_predictor_64x64_avx2;
+  }
   aom_dc_predictor_32x16 = aom_dc_predictor_32x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_predictor_32x16 = aom_dc_predictor_32x16_avx2;
+  }
   aom_dc_predictor_32x32 = aom_dc_predictor_32x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_predictor_32x32 = aom_dc_predictor_32x32_avx2;
+  }
   aom_dc_predictor_32x64 = aom_dc_predictor_32x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_predictor_32x64 = aom_dc_predictor_32x64_avx2;
+  }
   aom_dc_predictor_64x16 = aom_dc_predictor_64x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_predictor_64x16 = aom_dc_predictor_64x16_avx2;
+  }
   aom_dc_predictor_64x32 = aom_dc_predictor_64x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_predictor_64x32 = aom_dc_predictor_64x32_avx2;
+  }
   aom_dc_predictor_64x64 = aom_dc_predictor_64x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_predictor_64x64 = aom_dc_predictor_64x64_avx2;
+  }
   aom_dc_top_predictor_32x16 = aom_dc_top_predictor_32x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_top_predictor_32x16 = aom_dc_top_predictor_32x16_avx2;
+  }
   aom_dc_top_predictor_32x32 = aom_dc_top_predictor_32x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_top_predictor_32x32 = aom_dc_top_predictor_32x32_avx2;
+  }
   aom_dc_top_predictor_32x64 = aom_dc_top_predictor_32x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_top_predictor_32x64 = aom_dc_top_predictor_32x64_avx2;
+  }
   aom_dc_top_predictor_64x16 = aom_dc_top_predictor_64x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_top_predictor_64x16 = aom_dc_top_predictor_64x16_avx2;
+  }
   aom_dc_top_predictor_64x32 = aom_dc_top_predictor_64x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_top_predictor_64x32 = aom_dc_top_predictor_64x32_avx2;
+  }
   aom_dc_top_predictor_64x64 = aom_dc_top_predictor_64x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_top_predictor_64x64 = aom_dc_top_predictor_64x64_avx2;
+  }
   aom_dist_wtd_comp_avg_pred = aom_dist_wtd_comp_avg_pred_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_comp_avg_pred = aom_dist_wtd_comp_avg_pred_ssse3;
+  }
   aom_dist_wtd_sad128x128_avg = aom_dist_wtd_sad128x128_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad128x128_avg = aom_dist_wtd_sad128x128_avg_ssse3;
+  }
   aom_dist_wtd_sad128x64_avg = aom_dist_wtd_sad128x64_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad128x64_avg = aom_dist_wtd_sad128x64_avg_ssse3;
+  }
   aom_dist_wtd_sad16x16_avg = aom_dist_wtd_sad16x16_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad16x16_avg = aom_dist_wtd_sad16x16_avg_ssse3;
+  }
   aom_dist_wtd_sad16x32_avg = aom_dist_wtd_sad16x32_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad16x32_avg = aom_dist_wtd_sad16x32_avg_ssse3;
+  }
   aom_dist_wtd_sad16x8_avg = aom_dist_wtd_sad16x8_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad16x8_avg = aom_dist_wtd_sad16x8_avg_ssse3;
+  }
   aom_dist_wtd_sad32x16_avg = aom_dist_wtd_sad32x16_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad32x16_avg = aom_dist_wtd_sad32x16_avg_ssse3;
+  }
   aom_dist_wtd_sad32x32_avg = aom_dist_wtd_sad32x32_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad32x32_avg = aom_dist_wtd_sad32x32_avg_ssse3;
+  }
   aom_dist_wtd_sad32x64_avg = aom_dist_wtd_sad32x64_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad32x64_avg = aom_dist_wtd_sad32x64_avg_ssse3;
+  }
   aom_dist_wtd_sad4x4_avg = aom_dist_wtd_sad4x4_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad4x4_avg = aom_dist_wtd_sad4x4_avg_ssse3;
+  }
   aom_dist_wtd_sad4x8_avg = aom_dist_wtd_sad4x8_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad4x8_avg = aom_dist_wtd_sad4x8_avg_ssse3;
+  }
   aom_dist_wtd_sad64x128_avg = aom_dist_wtd_sad64x128_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad64x128_avg = aom_dist_wtd_sad64x128_avg_ssse3;
+  }
   aom_dist_wtd_sad64x32_avg = aom_dist_wtd_sad64x32_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad64x32_avg = aom_dist_wtd_sad64x32_avg_ssse3;
+  }
   aom_dist_wtd_sad64x64_avg = aom_dist_wtd_sad64x64_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad64x64_avg = aom_dist_wtd_sad64x64_avg_ssse3;
+  }
   aom_dist_wtd_sad8x16_avg = aom_dist_wtd_sad8x16_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad8x16_avg = aom_dist_wtd_sad8x16_avg_ssse3;
+  }
   aom_dist_wtd_sad8x4_avg = aom_dist_wtd_sad8x4_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad8x4_avg = aom_dist_wtd_sad8x4_avg_ssse3;
+  }
   aom_dist_wtd_sad8x8_avg = aom_dist_wtd_sad8x8_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad8x8_avg = aom_dist_wtd_sad8x8_avg_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance128x128 =
       aom_dist_wtd_sub_pixel_avg_variance128x128_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance128x128 =
         aom_dist_wtd_sub_pixel_avg_variance128x128_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance128x64 =
       aom_dist_wtd_sub_pixel_avg_variance128x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance128x64 =
         aom_dist_wtd_sub_pixel_avg_variance128x64_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance16x16 =
       aom_dist_wtd_sub_pixel_avg_variance16x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance16x16 =
         aom_dist_wtd_sub_pixel_avg_variance16x16_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance16x32 =
       aom_dist_wtd_sub_pixel_avg_variance16x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance16x32 =
         aom_dist_wtd_sub_pixel_avg_variance16x32_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance16x8 =
       aom_dist_wtd_sub_pixel_avg_variance16x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance16x8 =
         aom_dist_wtd_sub_pixel_avg_variance16x8_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance32x16 =
       aom_dist_wtd_sub_pixel_avg_variance32x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance32x16 =
         aom_dist_wtd_sub_pixel_avg_variance32x16_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance32x32 =
       aom_dist_wtd_sub_pixel_avg_variance32x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance32x32 =
         aom_dist_wtd_sub_pixel_avg_variance32x32_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance32x64 =
       aom_dist_wtd_sub_pixel_avg_variance32x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance32x64 =
         aom_dist_wtd_sub_pixel_avg_variance32x64_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance4x4 =
       aom_dist_wtd_sub_pixel_avg_variance4x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance4x4 =
         aom_dist_wtd_sub_pixel_avg_variance4x4_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance4x8 =
       aom_dist_wtd_sub_pixel_avg_variance4x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance4x8 =
         aom_dist_wtd_sub_pixel_avg_variance4x8_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance64x128 =
       aom_dist_wtd_sub_pixel_avg_variance64x128_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance64x128 =
         aom_dist_wtd_sub_pixel_avg_variance64x128_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance64x32 =
       aom_dist_wtd_sub_pixel_avg_variance64x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance64x32 =
         aom_dist_wtd_sub_pixel_avg_variance64x32_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance64x64 =
       aom_dist_wtd_sub_pixel_avg_variance64x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance64x64 =
         aom_dist_wtd_sub_pixel_avg_variance64x64_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance8x16 =
       aom_dist_wtd_sub_pixel_avg_variance8x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance8x16 =
         aom_dist_wtd_sub_pixel_avg_variance8x16_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance8x4 =
       aom_dist_wtd_sub_pixel_avg_variance8x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance8x4 =
         aom_dist_wtd_sub_pixel_avg_variance8x4_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance8x8 =
       aom_dist_wtd_sub_pixel_avg_variance8x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance8x8 =
         aom_dist_wtd_sub_pixel_avg_variance8x8_ssse3;
+  }
   aom_fft16x16_float = aom_fft16x16_float_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_fft16x16_float = aom_fft16x16_float_avx2;
+  }
   aom_fft32x32_float = aom_fft32x32_float_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_fft32x32_float = aom_fft32x32_float_avx2;
+  }
   aom_fft8x8_float = aom_fft8x8_float_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_fft8x8_float = aom_fft8x8_float_avx2;
+  }
   aom_get_blk_sse_sum = aom_get_blk_sse_sum_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_get_blk_sse_sum = aom_get_blk_sse_sum_avx2;
-  aom_get_sse_sum_8x8_quad = aom_get_sse_sum_8x8_quad_sse2;
-  if (flags & HAS_AVX2)
-    aom_get_sse_sum_8x8_quad = aom_get_sse_sum_8x8_quad_avx2;
+  }
+  aom_get_var_sse_sum_16x16_dual = aom_get_var_sse_sum_16x16_dual_sse2;
+  if (flags & HAS_AVX2) {
+    aom_get_var_sse_sum_16x16_dual = aom_get_var_sse_sum_16x16_dual_avx2;
+  }
+  aom_get_var_sse_sum_8x8_quad = aom_get_var_sse_sum_8x8_quad_sse2;
+  if (flags & HAS_AVX2) {
+    aom_get_var_sse_sum_8x8_quad = aom_get_var_sse_sum_8x8_quad_avx2;
+  }
   aom_h_predictor_32x32 = aom_h_predictor_32x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_h_predictor_32x32 = aom_h_predictor_32x32_avx2;
+  }
   aom_hadamard_16x16 = aom_hadamard_16x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_hadamard_16x16 = aom_hadamard_16x16_avx2;
+  }
   aom_hadamard_32x32 = aom_hadamard_32x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_hadamard_32x32 = aom_hadamard_32x32_avx2;
+  }
   aom_hadamard_lp_16x16 = aom_hadamard_lp_16x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_hadamard_lp_16x16 = aom_hadamard_lp_16x16_avx2;
+  }
   aom_hadamard_lp_8x8_dual = aom_hadamard_lp_8x8_dual_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_hadamard_lp_8x8_dual = aom_hadamard_lp_8x8_dual_avx2;
+  }
   aom_ifft16x16_float = aom_ifft16x16_float_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_ifft16x16_float = aom_ifft16x16_float_avx2;
+  }
   aom_ifft32x32_float = aom_ifft32x32_float_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_ifft32x32_float = aom_ifft32x32_float_avx2;
+  }
   aom_ifft8x8_float = aom_ifft8x8_float_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_ifft8x8_float = aom_ifft8x8_float_avx2;
+  }
   aom_int_pro_col = aom_int_pro_col_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_int_pro_col = aom_int_pro_col_avx2;
+  }
   aom_int_pro_row = aom_int_pro_row_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_int_pro_row = aom_int_pro_row_avx2;
+  }
   aom_lowbd_blend_a64_d16_mask = aom_lowbd_blend_a64_d16_mask_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     aom_lowbd_blend_a64_d16_mask = aom_lowbd_blend_a64_d16_mask_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_lowbd_blend_a64_d16_mask = aom_lowbd_blend_a64_d16_mask_avx2;
+  }
   aom_lpf_horizontal_14_quad = aom_lpf_horizontal_14_quad_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_lpf_horizontal_14_quad = aom_lpf_horizontal_14_quad_avx2;
+  }
   aom_lpf_horizontal_6_quad = aom_lpf_horizontal_6_quad_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_lpf_horizontal_6_quad = aom_lpf_horizontal_6_quad_avx2;
+  }
   aom_lpf_horizontal_8_quad = aom_lpf_horizontal_8_quad_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_lpf_horizontal_8_quad = aom_lpf_horizontal_8_quad_avx2;
+  }
+  aom_lpf_vertical_14_quad = aom_lpf_vertical_14_quad_sse2;
+  if (flags & HAS_AVX2) {
+    aom_lpf_vertical_14_quad = aom_lpf_vertical_14_quad_avx2;
+  }
   aom_masked_sad128x128 = aom_masked_sad128x128_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad128x128 = aom_masked_sad128x128_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad128x128 = aom_masked_sad128x128_avx2;
+  }
   aom_masked_sad128x128x4d = aom_masked_sad128x128x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad128x128x4d = aom_masked_sad128x128x4d_ssse3;
+  }
   aom_masked_sad128x64 = aom_masked_sad128x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad128x64 = aom_masked_sad128x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad128x64 = aom_masked_sad128x64_avx2;
+  }
   aom_masked_sad128x64x4d = aom_masked_sad128x64x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad128x64x4d = aom_masked_sad128x64x4d_ssse3;
+  }
   aom_masked_sad16x16 = aom_masked_sad16x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad16x16 = aom_masked_sad16x16_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad16x16 = aom_masked_sad16x16_avx2;
+  }
   aom_masked_sad16x16x4d = aom_masked_sad16x16x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad16x16x4d = aom_masked_sad16x16x4d_ssse3;
+  }
   aom_masked_sad16x32 = aom_masked_sad16x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad16x32 = aom_masked_sad16x32_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad16x32 = aom_masked_sad16x32_avx2;
+  }
   aom_masked_sad16x32x4d = aom_masked_sad16x32x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad16x32x4d = aom_masked_sad16x32x4d_ssse3;
+  }
   aom_masked_sad16x8 = aom_masked_sad16x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad16x8 = aom_masked_sad16x8_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad16x8 = aom_masked_sad16x8_avx2;
+  }
   aom_masked_sad16x8x4d = aom_masked_sad16x8x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad16x8x4d = aom_masked_sad16x8x4d_ssse3;
+  }
   aom_masked_sad32x16 = aom_masked_sad32x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad32x16 = aom_masked_sad32x16_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad32x16 = aom_masked_sad32x16_avx2;
+  }
   aom_masked_sad32x16x4d = aom_masked_sad32x16x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad32x16x4d = aom_masked_sad32x16x4d_ssse3;
+  }
   aom_masked_sad32x32 = aom_masked_sad32x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad32x32 = aom_masked_sad32x32_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad32x32 = aom_masked_sad32x32_avx2;
+  }
   aom_masked_sad32x32x4d = aom_masked_sad32x32x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad32x32x4d = aom_masked_sad32x32x4d_ssse3;
+  }
   aom_masked_sad32x64 = aom_masked_sad32x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad32x64 = aom_masked_sad32x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad32x64 = aom_masked_sad32x64_avx2;
+  }
   aom_masked_sad32x64x4d = aom_masked_sad32x64x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad32x64x4d = aom_masked_sad32x64x4d_ssse3;
+  }
   aom_masked_sad4x4 = aom_masked_sad4x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad4x4 = aom_masked_sad4x4_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad4x4 = aom_masked_sad4x4_avx2;
+  }
   aom_masked_sad4x4x4d = aom_masked_sad4x4x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad4x4x4d = aom_masked_sad4x4x4d_ssse3;
+  }
   aom_masked_sad4x8 = aom_masked_sad4x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad4x8 = aom_masked_sad4x8_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad4x8 = aom_masked_sad4x8_avx2;
+  }
   aom_masked_sad4x8x4d = aom_masked_sad4x8x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad4x8x4d = aom_masked_sad4x8x4d_ssse3;
+  }
   aom_masked_sad64x128 = aom_masked_sad64x128_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad64x128 = aom_masked_sad64x128_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad64x128 = aom_masked_sad64x128_avx2;
+  }
   aom_masked_sad64x128x4d = aom_masked_sad64x128x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad64x128x4d = aom_masked_sad64x128x4d_ssse3;
+  }
   aom_masked_sad64x32 = aom_masked_sad64x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad64x32 = aom_masked_sad64x32_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad64x32 = aom_masked_sad64x32_avx2;
+  }
   aom_masked_sad64x32x4d = aom_masked_sad64x32x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad64x32x4d = aom_masked_sad64x32x4d_ssse3;
+  }
   aom_masked_sad64x64 = aom_masked_sad64x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad64x64 = aom_masked_sad64x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad64x64 = aom_masked_sad64x64_avx2;
+  }
   aom_masked_sad64x64x4d = aom_masked_sad64x64x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad64x64x4d = aom_masked_sad64x64x4d_ssse3;
+  }
   aom_masked_sad8x16 = aom_masked_sad8x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad8x16 = aom_masked_sad8x16_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad8x16 = aom_masked_sad8x16_avx2;
+  }
   aom_masked_sad8x16x4d = aom_masked_sad8x16x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad8x16x4d = aom_masked_sad8x16x4d_ssse3;
+  }
   aom_masked_sad8x4 = aom_masked_sad8x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad8x4 = aom_masked_sad8x4_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad8x4 = aom_masked_sad8x4_avx2;
+  }
   aom_masked_sad8x4x4d = aom_masked_sad8x4x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad8x4x4d = aom_masked_sad8x4x4d_ssse3;
+  }
   aom_masked_sad8x8 = aom_masked_sad8x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad8x8 = aom_masked_sad8x8_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad8x8 = aom_masked_sad8x8_avx2;
+  }
   aom_masked_sad8x8x4d = aom_masked_sad8x8x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad8x8x4d = aom_masked_sad8x8x4d_ssse3;
+  }
   aom_masked_sub_pixel_variance128x128 = aom_masked_sub_pixel_variance128x128_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance128x128 =
         aom_masked_sub_pixel_variance128x128_ssse3;
+  }
   aom_masked_sub_pixel_variance128x64 = aom_masked_sub_pixel_variance128x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance128x64 =
         aom_masked_sub_pixel_variance128x64_ssse3;
+  }
   aom_masked_sub_pixel_variance16x16 = aom_masked_sub_pixel_variance16x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance16x16 =
         aom_masked_sub_pixel_variance16x16_ssse3;
+  }
   aom_masked_sub_pixel_variance16x32 = aom_masked_sub_pixel_variance16x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance16x32 =
         aom_masked_sub_pixel_variance16x32_ssse3;
+  }
   aom_masked_sub_pixel_variance16x8 = aom_masked_sub_pixel_variance16x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance16x8 = aom_masked_sub_pixel_variance16x8_ssse3;
+  }
   aom_masked_sub_pixel_variance32x16 = aom_masked_sub_pixel_variance32x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance32x16 =
         aom_masked_sub_pixel_variance32x16_ssse3;
+  }
   aom_masked_sub_pixel_variance32x32 = aom_masked_sub_pixel_variance32x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance32x32 =
         aom_masked_sub_pixel_variance32x32_ssse3;
+  }
   aom_masked_sub_pixel_variance32x64 = aom_masked_sub_pixel_variance32x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance32x64 =
         aom_masked_sub_pixel_variance32x64_ssse3;
+  }
   aom_masked_sub_pixel_variance4x4 = aom_masked_sub_pixel_variance4x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance4x4 = aom_masked_sub_pixel_variance4x4_ssse3;
+  }
   aom_masked_sub_pixel_variance4x8 = aom_masked_sub_pixel_variance4x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance4x8 = aom_masked_sub_pixel_variance4x8_ssse3;
+  }
   aom_masked_sub_pixel_variance64x128 = aom_masked_sub_pixel_variance64x128_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance64x128 =
         aom_masked_sub_pixel_variance64x128_ssse3;
+  }
   aom_masked_sub_pixel_variance64x32 = aom_masked_sub_pixel_variance64x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance64x32 =
         aom_masked_sub_pixel_variance64x32_ssse3;
+  }
   aom_masked_sub_pixel_variance64x64 = aom_masked_sub_pixel_variance64x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance64x64 =
         aom_masked_sub_pixel_variance64x64_ssse3;
+  }
   aom_masked_sub_pixel_variance8x16 = aom_masked_sub_pixel_variance8x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance8x16 = aom_masked_sub_pixel_variance8x16_ssse3;
+  }
   aom_masked_sub_pixel_variance8x4 = aom_masked_sub_pixel_variance8x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance8x4 = aom_masked_sub_pixel_variance8x4_ssse3;
+  }
   aom_masked_sub_pixel_variance8x8 = aom_masked_sub_pixel_variance8x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance8x8 = aom_masked_sub_pixel_variance8x8_ssse3;
+  }
   aom_mse16x16 = aom_mse16x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_mse16x16 = aom_mse16x16_avx2;
-  aom_mse_16xh_16bit = aom_mse_16xh_16bit_c;
-  if (flags & HAS_AVX2)
+  }
+  aom_mse_16xh_16bit = aom_mse_16xh_16bit_sse2;
+  if (flags & HAS_AVX2) {
     aom_mse_16xh_16bit = aom_mse_16xh_16bit_avx2;
+  }
   aom_mse_wxh_16bit = aom_mse_wxh_16bit_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_mse_wxh_16bit = aom_mse_wxh_16bit_avx2;
+  }
   aom_paeth_predictor_16x16 = aom_paeth_predictor_16x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_16x16 = aom_paeth_predictor_16x16_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_paeth_predictor_16x16 = aom_paeth_predictor_16x16_avx2;
+  }
   aom_paeth_predictor_16x32 = aom_paeth_predictor_16x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_16x32 = aom_paeth_predictor_16x32_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_paeth_predictor_16x32 = aom_paeth_predictor_16x32_avx2;
+  }
   aom_paeth_predictor_16x4 = aom_paeth_predictor_16x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_16x4 = aom_paeth_predictor_16x4_ssse3;
+  }
   aom_paeth_predictor_16x64 = aom_paeth_predictor_16x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_16x64 = aom_paeth_predictor_16x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_paeth_predictor_16x64 = aom_paeth_predictor_16x64_avx2;
+  }
   aom_paeth_predictor_16x8 = aom_paeth_predictor_16x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_16x8 = aom_paeth_predictor_16x8_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_paeth_predictor_16x8 = aom_paeth_predictor_16x8_avx2;
+  }
   aom_paeth_predictor_32x16 = aom_paeth_predictor_32x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_32x16 = aom_paeth_predictor_32x16_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_paeth_predictor_32x16 = aom_paeth_predictor_32x16_avx2;
+  }
   aom_paeth_predictor_32x32 = aom_paeth_predictor_32x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_32x32 = aom_paeth_predictor_32x32_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_paeth_predictor_32x32 = aom_paeth_predictor_32x32_avx2;
+  }
   aom_paeth_predictor_32x64 = aom_paeth_predictor_32x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_32x64 = aom_paeth_predictor_32x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_paeth_predictor_32x64 = aom_paeth_predictor_32x64_avx2;
+  }
   aom_paeth_predictor_32x8 = aom_paeth_predictor_32x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_32x8 = aom_paeth_predictor_32x8_ssse3;
+  }
   aom_paeth_predictor_4x16 = aom_paeth_predictor_4x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_4x16 = aom_paeth_predictor_4x16_ssse3;
+  }
   aom_paeth_predictor_4x4 = aom_paeth_predictor_4x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_4x4 = aom_paeth_predictor_4x4_ssse3;
+  }
   aom_paeth_predictor_4x8 = aom_paeth_predictor_4x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_4x8 = aom_paeth_predictor_4x8_ssse3;
+  }
   aom_paeth_predictor_64x16 = aom_paeth_predictor_64x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_64x16 = aom_paeth_predictor_64x16_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_paeth_predictor_64x16 = aom_paeth_predictor_64x16_avx2;
+  }
   aom_paeth_predictor_64x32 = aom_paeth_predictor_64x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_64x32 = aom_paeth_predictor_64x32_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_paeth_predictor_64x32 = aom_paeth_predictor_64x32_avx2;
+  }
   aom_paeth_predictor_64x64 = aom_paeth_predictor_64x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_64x64 = aom_paeth_predictor_64x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_paeth_predictor_64x64 = aom_paeth_predictor_64x64_avx2;
+  }
   aom_paeth_predictor_8x16 = aom_paeth_predictor_8x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_8x16 = aom_paeth_predictor_8x16_ssse3;
+  }
   aom_paeth_predictor_8x32 = aom_paeth_predictor_8x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_8x32 = aom_paeth_predictor_8x32_ssse3;
+  }
   aom_paeth_predictor_8x4 = aom_paeth_predictor_8x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_8x4 = aom_paeth_predictor_8x4_ssse3;
+  }
   aom_paeth_predictor_8x8 = aom_paeth_predictor_8x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_8x8 = aom_paeth_predictor_8x8_ssse3;
+  }
   aom_quantize_b = aom_quantize_b_sse2;
-  if (flags & HAS_AVX)
+  if (flags & HAS_AVX) {
     aom_quantize_b = aom_quantize_b_avx;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_quantize_b = aom_quantize_b_avx2;
+  }
   aom_quantize_b_32x32 = aom_quantize_b_32x32_c;
-  if (flags & HAS_AVX)
+  if (flags & HAS_AVX) {
     aom_quantize_b_32x32 = aom_quantize_b_32x32_avx;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_quantize_b_32x32 = aom_quantize_b_32x32_avx2;
+  }
   aom_quantize_b_64x64 = aom_quantize_b_64x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_quantize_b_64x64 = aom_quantize_b_64x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_quantize_b_64x64 = aom_quantize_b_64x64_avx2;
+  }
   aom_sad128x128 = aom_sad128x128_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad128x128 = aom_sad128x128_avx2;
+  }
   aom_sad128x128_avg = aom_sad128x128_avg_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad128x128_avg = aom_sad128x128_avg_avx2;
+  }
+  aom_sad128x128x3d = aom_sad128x128x3d_c;
+  if (flags & HAS_AVX2) {
+    aom_sad128x128x3d = aom_sad128x128x3d_avx2;
+  }
   aom_sad128x128x4d = aom_sad128x128x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad128x128x4d = aom_sad128x128x4d_avx2;
+  }
   aom_sad128x64 = aom_sad128x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad128x64 = aom_sad128x64_avx2;
+  }
   aom_sad128x64_avg = aom_sad128x64_avg_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad128x64_avg = aom_sad128x64_avg_avx2;
+  }
+  aom_sad128x64x3d = aom_sad128x64x3d_c;
+  if (flags & HAS_AVX2) {
+    aom_sad128x64x3d = aom_sad128x64x3d_avx2;
+  }
   aom_sad128x64x4d = aom_sad128x64x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad128x64x4d = aom_sad128x64x4d_avx2;
+  }
+  aom_sad16x16x3d = aom_sad16x16x3d_c;
+  if (flags & HAS_AVX2) {
+    aom_sad16x16x3d = aom_sad16x16x3d_avx2;
+  }
+  aom_sad16x16x4d = aom_sad16x16x4d_sse2;
+  if (flags & HAS_AVX2) {
+    aom_sad16x16x4d = aom_sad16x16x4d_avx2;
+  }
+  aom_sad16x32x3d = aom_sad16x32x3d_c;
+  if (flags & HAS_AVX2) {
+    aom_sad16x32x3d = aom_sad16x32x3d_avx2;
+  }
+  aom_sad16x32x4d = aom_sad16x32x4d_sse2;
+  if (flags & HAS_AVX2) {
+    aom_sad16x32x4d = aom_sad16x32x4d_avx2;
+  }
+  aom_sad16x8x3d = aom_sad16x8x3d_c;
+  if (flags & HAS_AVX2) {
+    aom_sad16x8x3d = aom_sad16x8x3d_avx2;
+  }
+  aom_sad16x8x4d = aom_sad16x8x4d_sse2;
+  if (flags & HAS_AVX2) {
+    aom_sad16x8x4d = aom_sad16x8x4d_avx2;
+  }
   aom_sad32x16 = aom_sad32x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad32x16 = aom_sad32x16_avx2;
+  }
   aom_sad32x16_avg = aom_sad32x16_avg_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad32x16_avg = aom_sad32x16_avg_avx2;
+  }
+  aom_sad32x16x3d = aom_sad32x16x3d_c;
+  if (flags & HAS_AVX2) {
+    aom_sad32x16x3d = aom_sad32x16x3d_avx2;
+  }
   aom_sad32x16x4d = aom_sad32x16x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad32x16x4d = aom_sad32x16x4d_avx2;
+  }
   aom_sad32x32 = aom_sad32x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad32x32 = aom_sad32x32_avx2;
+  }
   aom_sad32x32_avg = aom_sad32x32_avg_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad32x32_avg = aom_sad32x32_avg_avx2;
+  }
+  aom_sad32x32x3d = aom_sad32x32x3d_c;
+  if (flags & HAS_AVX2) {
+    aom_sad32x32x3d = aom_sad32x32x3d_avx2;
+  }
   aom_sad32x32x4d = aom_sad32x32x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad32x32x4d = aom_sad32x32x4d_avx2;
+  }
   aom_sad32x64 = aom_sad32x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad32x64 = aom_sad32x64_avx2;
+  }
   aom_sad32x64_avg = aom_sad32x64_avg_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad32x64_avg = aom_sad32x64_avg_avx2;
+  }
+  aom_sad32x64x3d = aom_sad32x64x3d_c;
+  if (flags & HAS_AVX2) {
+    aom_sad32x64x3d = aom_sad32x64x3d_avx2;
+  }
   aom_sad32x64x4d = aom_sad32x64x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad32x64x4d = aom_sad32x64x4d_avx2;
+  }
   aom_sad64x128 = aom_sad64x128_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad64x128 = aom_sad64x128_avx2;
+  }
   aom_sad64x128_avg = aom_sad64x128_avg_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad64x128_avg = aom_sad64x128_avg_avx2;
+  }
+  aom_sad64x128x3d = aom_sad64x128x3d_c;
+  if (flags & HAS_AVX2) {
+    aom_sad64x128x3d = aom_sad64x128x3d_avx2;
+  }
   aom_sad64x128x4d = aom_sad64x128x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad64x128x4d = aom_sad64x128x4d_avx2;
+  }
   aom_sad64x32 = aom_sad64x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad64x32 = aom_sad64x32_avx2;
+  }
   aom_sad64x32_avg = aom_sad64x32_avg_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad64x32_avg = aom_sad64x32_avg_avx2;
+  }
+  aom_sad64x32x3d = aom_sad64x32x3d_c;
+  if (flags & HAS_AVX2) {
+    aom_sad64x32x3d = aom_sad64x32x3d_avx2;
+  }
   aom_sad64x32x4d = aom_sad64x32x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad64x32x4d = aom_sad64x32x4d_avx2;
+  }
   aom_sad64x64 = aom_sad64x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad64x64 = aom_sad64x64_avx2;
+  }
   aom_sad64x64_avg = aom_sad64x64_avg_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad64x64_avg = aom_sad64x64_avg_avx2;
+  }
+  aom_sad64x64x3d = aom_sad64x64x3d_c;
+  if (flags & HAS_AVX2) {
+    aom_sad64x64x3d = aom_sad64x64x3d_avx2;
+  }
   aom_sad64x64x4d = aom_sad64x64x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad64x64x4d = aom_sad64x64x4d_avx2;
+  }
   aom_sad_skip_128x128 = aom_sad_skip_128x128_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_128x128 = aom_sad_skip_128x128_avx2;
+  }
   aom_sad_skip_128x128x4d = aom_sad_skip_128x128x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_128x128x4d = aom_sad_skip_128x128x4d_avx2;
+  }
   aom_sad_skip_128x64 = aom_sad_skip_128x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_128x64 = aom_sad_skip_128x64_avx2;
+  }
   aom_sad_skip_128x64x4d = aom_sad_skip_128x64x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_128x64x4d = aom_sad_skip_128x64x4d_avx2;
+  }
+  aom_sad_skip_16x16x4d = aom_sad_skip_16x16x4d_sse2;
+  if (flags & HAS_AVX2) {
+    aom_sad_skip_16x16x4d = aom_sad_skip_16x16x4d_avx2;
+  }
+  aom_sad_skip_16x32x4d = aom_sad_skip_16x32x4d_sse2;
+  if (flags & HAS_AVX2) {
+    aom_sad_skip_16x32x4d = aom_sad_skip_16x32x4d_avx2;
+  }
+  aom_sad_skip_16x8x4d = aom_sad_skip_16x8x4d_sse2;
+  if (flags & HAS_AVX2) {
+    aom_sad_skip_16x8x4d = aom_sad_skip_16x8x4d_avx2;
+  }
   aom_sad_skip_32x16 = aom_sad_skip_32x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_32x16 = aom_sad_skip_32x16_avx2;
+  }
   aom_sad_skip_32x16x4d = aom_sad_skip_32x16x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_32x16x4d = aom_sad_skip_32x16x4d_avx2;
+  }
   aom_sad_skip_32x32 = aom_sad_skip_32x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_32x32 = aom_sad_skip_32x32_avx2;
+  }
   aom_sad_skip_32x32x4d = aom_sad_skip_32x32x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_32x32x4d = aom_sad_skip_32x32x4d_avx2;
+  }
   aom_sad_skip_32x64 = aom_sad_skip_32x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_32x64 = aom_sad_skip_32x64_avx2;
+  }
   aom_sad_skip_32x64x4d = aom_sad_skip_32x64x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_32x64x4d = aom_sad_skip_32x64x4d_avx2;
+  }
   aom_sad_skip_64x128 = aom_sad_skip_64x128_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_64x128 = aom_sad_skip_64x128_avx2;
+  }
   aom_sad_skip_64x128x4d = aom_sad_skip_64x128x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_64x128x4d = aom_sad_skip_64x128x4d_avx2;
+  }
   aom_sad_skip_64x32 = aom_sad_skip_64x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_64x32 = aom_sad_skip_64x32_avx2;
+  }
   aom_sad_skip_64x32x4d = aom_sad_skip_64x32x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_64x32x4d = aom_sad_skip_64x32x4d_avx2;
+  }
   aom_sad_skip_64x64 = aom_sad_skip_64x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_64x64 = aom_sad_skip_64x64_avx2;
+  }
   aom_sad_skip_64x64x4d = aom_sad_skip_64x64x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_64x64x4d = aom_sad_skip_64x64x4d_avx2;
+  }
   aom_satd = aom_satd_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_satd = aom_satd_avx2;
+  }
   aom_satd_lp = aom_satd_lp_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_satd_lp = aom_satd_lp_avx2;
+  }
   aom_scaled_2d = aom_scaled_2d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_scaled_2d = aom_scaled_2d_ssse3;
+  }
   aom_smooth_h_predictor_16x16 = aom_smooth_h_predictor_16x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_16x16 = aom_smooth_h_predictor_16x16_ssse3;
+  }
   aom_smooth_h_predictor_16x32 = aom_smooth_h_predictor_16x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_16x32 = aom_smooth_h_predictor_16x32_ssse3;
+  }
   aom_smooth_h_predictor_16x4 = aom_smooth_h_predictor_16x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_16x4 = aom_smooth_h_predictor_16x4_ssse3;
+  }
   aom_smooth_h_predictor_16x64 = aom_smooth_h_predictor_16x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_16x64 = aom_smooth_h_predictor_16x64_ssse3;
+  }
   aom_smooth_h_predictor_16x8 = aom_smooth_h_predictor_16x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_16x8 = aom_smooth_h_predictor_16x8_ssse3;
+  }
   aom_smooth_h_predictor_32x16 = aom_smooth_h_predictor_32x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_32x16 = aom_smooth_h_predictor_32x16_ssse3;
+  }
   aom_smooth_h_predictor_32x32 = aom_smooth_h_predictor_32x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_32x32 = aom_smooth_h_predictor_32x32_ssse3;
+  }
   aom_smooth_h_predictor_32x64 = aom_smooth_h_predictor_32x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_32x64 = aom_smooth_h_predictor_32x64_ssse3;
+  }
   aom_smooth_h_predictor_32x8 = aom_smooth_h_predictor_32x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_32x8 = aom_smooth_h_predictor_32x8_ssse3;
+  }
   aom_smooth_h_predictor_4x16 = aom_smooth_h_predictor_4x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_4x16 = aom_smooth_h_predictor_4x16_ssse3;
+  }
   aom_smooth_h_predictor_4x4 = aom_smooth_h_predictor_4x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_4x4 = aom_smooth_h_predictor_4x4_ssse3;
+  }
   aom_smooth_h_predictor_4x8 = aom_smooth_h_predictor_4x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_4x8 = aom_smooth_h_predictor_4x8_ssse3;
+  }
   aom_smooth_h_predictor_64x16 = aom_smooth_h_predictor_64x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_64x16 = aom_smooth_h_predictor_64x16_ssse3;
+  }
   aom_smooth_h_predictor_64x32 = aom_smooth_h_predictor_64x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_64x32 = aom_smooth_h_predictor_64x32_ssse3;
+  }
   aom_smooth_h_predictor_64x64 = aom_smooth_h_predictor_64x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_64x64 = aom_smooth_h_predictor_64x64_ssse3;
+  }
   aom_smooth_h_predictor_8x16 = aom_smooth_h_predictor_8x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_8x16 = aom_smooth_h_predictor_8x16_ssse3;
+  }
   aom_smooth_h_predictor_8x32 = aom_smooth_h_predictor_8x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_8x32 = aom_smooth_h_predictor_8x32_ssse3;
+  }
   aom_smooth_h_predictor_8x4 = aom_smooth_h_predictor_8x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_8x4 = aom_smooth_h_predictor_8x4_ssse3;
+  }
   aom_smooth_h_predictor_8x8 = aom_smooth_h_predictor_8x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_8x8 = aom_smooth_h_predictor_8x8_ssse3;
+  }
   aom_smooth_predictor_16x16 = aom_smooth_predictor_16x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_16x16 = aom_smooth_predictor_16x16_ssse3;
+  }
   aom_smooth_predictor_16x32 = aom_smooth_predictor_16x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_16x32 = aom_smooth_predictor_16x32_ssse3;
+  }
   aom_smooth_predictor_16x4 = aom_smooth_predictor_16x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_16x4 = aom_smooth_predictor_16x4_ssse3;
+  }
   aom_smooth_predictor_16x64 = aom_smooth_predictor_16x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_16x64 = aom_smooth_predictor_16x64_ssse3;
+  }
   aom_smooth_predictor_16x8 = aom_smooth_predictor_16x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_16x8 = aom_smooth_predictor_16x8_ssse3;
+  }
   aom_smooth_predictor_32x16 = aom_smooth_predictor_32x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_32x16 = aom_smooth_predictor_32x16_ssse3;
+  }
   aom_smooth_predictor_32x32 = aom_smooth_predictor_32x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_32x32 = aom_smooth_predictor_32x32_ssse3;
+  }
   aom_smooth_predictor_32x64 = aom_smooth_predictor_32x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_32x64 = aom_smooth_predictor_32x64_ssse3;
+  }
   aom_smooth_predictor_32x8 = aom_smooth_predictor_32x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_32x8 = aom_smooth_predictor_32x8_ssse3;
+  }
   aom_smooth_predictor_4x16 = aom_smooth_predictor_4x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_4x16 = aom_smooth_predictor_4x16_ssse3;
+  }
   aom_smooth_predictor_4x4 = aom_smooth_predictor_4x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_4x4 = aom_smooth_predictor_4x4_ssse3;
+  }
   aom_smooth_predictor_4x8 = aom_smooth_predictor_4x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_4x8 = aom_smooth_predictor_4x8_ssse3;
+  }
   aom_smooth_predictor_64x16 = aom_smooth_predictor_64x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_64x16 = aom_smooth_predictor_64x16_ssse3;
+  }
   aom_smooth_predictor_64x32 = aom_smooth_predictor_64x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_64x32 = aom_smooth_predictor_64x32_ssse3;
+  }
   aom_smooth_predictor_64x64 = aom_smooth_predictor_64x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_64x64 = aom_smooth_predictor_64x64_ssse3;
+  }
   aom_smooth_predictor_8x16 = aom_smooth_predictor_8x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_8x16 = aom_smooth_predictor_8x16_ssse3;
+  }
   aom_smooth_predictor_8x32 = aom_smooth_predictor_8x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_8x32 = aom_smooth_predictor_8x32_ssse3;
+  }
   aom_smooth_predictor_8x4 = aom_smooth_predictor_8x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_8x4 = aom_smooth_predictor_8x4_ssse3;
+  }
   aom_smooth_predictor_8x8 = aom_smooth_predictor_8x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_8x8 = aom_smooth_predictor_8x8_ssse3;
+  }
   aom_smooth_v_predictor_16x16 = aom_smooth_v_predictor_16x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_16x16 = aom_smooth_v_predictor_16x16_ssse3;
+  }
   aom_smooth_v_predictor_16x32 = aom_smooth_v_predictor_16x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_16x32 = aom_smooth_v_predictor_16x32_ssse3;
+  }
   aom_smooth_v_predictor_16x4 = aom_smooth_v_predictor_16x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_16x4 = aom_smooth_v_predictor_16x4_ssse3;
+  }
   aom_smooth_v_predictor_16x64 = aom_smooth_v_predictor_16x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_16x64 = aom_smooth_v_predictor_16x64_ssse3;
+  }
   aom_smooth_v_predictor_16x8 = aom_smooth_v_predictor_16x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_16x8 = aom_smooth_v_predictor_16x8_ssse3;
+  }
   aom_smooth_v_predictor_32x16 = aom_smooth_v_predictor_32x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_32x16 = aom_smooth_v_predictor_32x16_ssse3;
+  }
   aom_smooth_v_predictor_32x32 = aom_smooth_v_predictor_32x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_32x32 = aom_smooth_v_predictor_32x32_ssse3;
+  }
   aom_smooth_v_predictor_32x64 = aom_smooth_v_predictor_32x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_32x64 = aom_smooth_v_predictor_32x64_ssse3;
+  }
   aom_smooth_v_predictor_32x8 = aom_smooth_v_predictor_32x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_32x8 = aom_smooth_v_predictor_32x8_ssse3;
+  }
   aom_smooth_v_predictor_4x16 = aom_smooth_v_predictor_4x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_4x16 = aom_smooth_v_predictor_4x16_ssse3;
+  }
   aom_smooth_v_predictor_4x4 = aom_smooth_v_predictor_4x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_4x4 = aom_smooth_v_predictor_4x4_ssse3;
+  }
   aom_smooth_v_predictor_4x8 = aom_smooth_v_predictor_4x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_4x8 = aom_smooth_v_predictor_4x8_ssse3;
+  }
   aom_smooth_v_predictor_64x16 = aom_smooth_v_predictor_64x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_64x16 = aom_smooth_v_predictor_64x16_ssse3;
+  }
   aom_smooth_v_predictor_64x32 = aom_smooth_v_predictor_64x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_64x32 = aom_smooth_v_predictor_64x32_ssse3;
+  }
   aom_smooth_v_predictor_64x64 = aom_smooth_v_predictor_64x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_64x64 = aom_smooth_v_predictor_64x64_ssse3;
+  }
   aom_smooth_v_predictor_8x16 = aom_smooth_v_predictor_8x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_8x16 = aom_smooth_v_predictor_8x16_ssse3;
+  }
   aom_smooth_v_predictor_8x32 = aom_smooth_v_predictor_8x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_8x32 = aom_smooth_v_predictor_8x32_ssse3;
+  }
   aom_smooth_v_predictor_8x4 = aom_smooth_v_predictor_8x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_8x4 = aom_smooth_v_predictor_8x4_ssse3;
+  }
   aom_smooth_v_predictor_8x8 = aom_smooth_v_predictor_8x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_8x8 = aom_smooth_v_predictor_8x8_ssse3;
+  }
   aom_sse = aom_sse_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     aom_sse = aom_sse_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sse = aom_sse_avx2;
+  }
   aom_sub_pixel_avg_variance128x128 = aom_sub_pixel_avg_variance128x128_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance128x128 = aom_sub_pixel_avg_variance128x128_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_avg_variance128x128 = aom_sub_pixel_avg_variance128x128_avx2;
+  }
   aom_sub_pixel_avg_variance128x64 = aom_sub_pixel_avg_variance128x64_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance128x64 = aom_sub_pixel_avg_variance128x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_avg_variance128x64 = aom_sub_pixel_avg_variance128x64_avx2;
+  }
   aom_sub_pixel_avg_variance16x16 = aom_sub_pixel_avg_variance16x16_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance16x16 = aom_sub_pixel_avg_variance16x16_ssse3;
+  }
   aom_sub_pixel_avg_variance16x32 = aom_sub_pixel_avg_variance16x32_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance16x32 = aom_sub_pixel_avg_variance16x32_ssse3;
+  }
   aom_sub_pixel_avg_variance16x8 = aom_sub_pixel_avg_variance16x8_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance16x8 = aom_sub_pixel_avg_variance16x8_ssse3;
+  }
   aom_sub_pixel_avg_variance32x16 = aom_sub_pixel_avg_variance32x16_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance32x16 = aom_sub_pixel_avg_variance32x16_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_avg_variance32x16 = aom_sub_pixel_avg_variance32x16_avx2;
+  }
   aom_sub_pixel_avg_variance32x32 = aom_sub_pixel_avg_variance32x32_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance32x32 = aom_sub_pixel_avg_variance32x32_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_avg_variance32x32 = aom_sub_pixel_avg_variance32x32_avx2;
+  }
   aom_sub_pixel_avg_variance32x64 = aom_sub_pixel_avg_variance32x64_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance32x64 = aom_sub_pixel_avg_variance32x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_avg_variance32x64 = aom_sub_pixel_avg_variance32x64_avx2;
+  }
   aom_sub_pixel_avg_variance4x4 = aom_sub_pixel_avg_variance4x4_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance4x4 = aom_sub_pixel_avg_variance4x4_ssse3;
+  }
   aom_sub_pixel_avg_variance4x8 = aom_sub_pixel_avg_variance4x8_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance4x8 = aom_sub_pixel_avg_variance4x8_ssse3;
+  }
   aom_sub_pixel_avg_variance64x128 = aom_sub_pixel_avg_variance64x128_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance64x128 = aom_sub_pixel_avg_variance64x128_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_avg_variance64x128 = aom_sub_pixel_avg_variance64x128_avx2;
+  }
   aom_sub_pixel_avg_variance64x32 = aom_sub_pixel_avg_variance64x32_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance64x32 = aom_sub_pixel_avg_variance64x32_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_avg_variance64x32 = aom_sub_pixel_avg_variance64x32_avx2;
+  }
   aom_sub_pixel_avg_variance64x64 = aom_sub_pixel_avg_variance64x64_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance64x64 = aom_sub_pixel_avg_variance64x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_avg_variance64x64 = aom_sub_pixel_avg_variance64x64_avx2;
+  }
   aom_sub_pixel_avg_variance8x16 = aom_sub_pixel_avg_variance8x16_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance8x16 = aom_sub_pixel_avg_variance8x16_ssse3;
+  }
   aom_sub_pixel_avg_variance8x4 = aom_sub_pixel_avg_variance8x4_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance8x4 = aom_sub_pixel_avg_variance8x4_ssse3;
+  }
   aom_sub_pixel_avg_variance8x8 = aom_sub_pixel_avg_variance8x8_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance8x8 = aom_sub_pixel_avg_variance8x8_ssse3;
+  }
   aom_sub_pixel_variance128x128 = aom_sub_pixel_variance128x128_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance128x128 = aom_sub_pixel_variance128x128_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_variance128x128 = aom_sub_pixel_variance128x128_avx2;
+  }
   aom_sub_pixel_variance128x64 = aom_sub_pixel_variance128x64_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance128x64 = aom_sub_pixel_variance128x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_variance128x64 = aom_sub_pixel_variance128x64_avx2;
+  }
   aom_sub_pixel_variance16x16 = aom_sub_pixel_variance16x16_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance16x16 = aom_sub_pixel_variance16x16_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_variance16x16 = aom_sub_pixel_variance16x16_avx2;
+  }
   aom_sub_pixel_variance16x32 = aom_sub_pixel_variance16x32_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance16x32 = aom_sub_pixel_variance16x32_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_variance16x32 = aom_sub_pixel_variance16x32_avx2;
+  }
   aom_sub_pixel_variance16x8 = aom_sub_pixel_variance16x8_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance16x8 = aom_sub_pixel_variance16x8_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_variance16x8 = aom_sub_pixel_variance16x8_avx2;
+  }
   aom_sub_pixel_variance32x16 = aom_sub_pixel_variance32x16_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance32x16 = aom_sub_pixel_variance32x16_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_variance32x16 = aom_sub_pixel_variance32x16_avx2;
+  }
   aom_sub_pixel_variance32x32 = aom_sub_pixel_variance32x32_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance32x32 = aom_sub_pixel_variance32x32_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_variance32x32 = aom_sub_pixel_variance32x32_avx2;
+  }
   aom_sub_pixel_variance32x64 = aom_sub_pixel_variance32x64_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance32x64 = aom_sub_pixel_variance32x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_variance32x64 = aom_sub_pixel_variance32x64_avx2;
+  }
   aom_sub_pixel_variance4x4 = aom_sub_pixel_variance4x4_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance4x4 = aom_sub_pixel_variance4x4_ssse3;
+  }
   aom_sub_pixel_variance4x8 = aom_sub_pixel_variance4x8_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance4x8 = aom_sub_pixel_variance4x8_ssse3;
+  }
   aom_sub_pixel_variance64x128 = aom_sub_pixel_variance64x128_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance64x128 = aom_sub_pixel_variance64x128_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_variance64x128 = aom_sub_pixel_variance64x128_avx2;
+  }
   aom_sub_pixel_variance64x32 = aom_sub_pixel_variance64x32_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance64x32 = aom_sub_pixel_variance64x32_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_variance64x32 = aom_sub_pixel_variance64x32_avx2;
+  }
   aom_sub_pixel_variance64x64 = aom_sub_pixel_variance64x64_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance64x64 = aom_sub_pixel_variance64x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_variance64x64 = aom_sub_pixel_variance64x64_avx2;
+  }
   aom_sub_pixel_variance8x16 = aom_sub_pixel_variance8x16_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance8x16 = aom_sub_pixel_variance8x16_ssse3;
+  }
   aom_sub_pixel_variance8x4 = aom_sub_pixel_variance8x4_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance8x4 = aom_sub_pixel_variance8x4_ssse3;
+  }
   aom_sub_pixel_variance8x8 = aom_sub_pixel_variance8x8_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance8x8 = aom_sub_pixel_variance8x8_ssse3;
+  }
   aom_subtract_block = aom_subtract_block_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_subtract_block = aom_subtract_block_avx2;
+  }
   aom_sum_squares_2d_i16 = aom_sum_squares_2d_i16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sum_squares_2d_i16 = aom_sum_squares_2d_i16_avx2;
+  }
   aom_sum_sse_2d_i16 = aom_sum_sse_2d_i16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sum_sse_2d_i16 = aom_sum_sse_2d_i16_avx2;
+  }
   aom_v_predictor_32x16 = aom_v_predictor_32x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_v_predictor_32x16 = aom_v_predictor_32x16_avx2;
+  }
   aom_v_predictor_32x32 = aom_v_predictor_32x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_v_predictor_32x32 = aom_v_predictor_32x32_avx2;
+  }
   aom_v_predictor_32x64 = aom_v_predictor_32x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_v_predictor_32x64 = aom_v_predictor_32x64_avx2;
+  }
   aom_v_predictor_64x16 = aom_v_predictor_64x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_v_predictor_64x16 = aom_v_predictor_64x16_avx2;
+  }
   aom_v_predictor_64x32 = aom_v_predictor_64x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_v_predictor_64x32 = aom_v_predictor_64x32_avx2;
+  }
   aom_v_predictor_64x64 = aom_v_predictor_64x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_v_predictor_64x64 = aom_v_predictor_64x64_avx2;
+  }
   aom_var_2d_u16 = aom_var_2d_u16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_var_2d_u16 = aom_var_2d_u16_avx2;
+  }
   aom_var_2d_u8 = aom_var_2d_u8_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_var_2d_u8 = aom_var_2d_u8_avx2;
+  }
   aom_variance128x128 = aom_variance128x128_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_variance128x128 = aom_variance128x128_avx2;
+  }
   aom_variance128x64 = aom_variance128x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_variance128x64 = aom_variance128x64_avx2;
+  }
   aom_variance16x16 = aom_variance16x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_variance16x16 = aom_variance16x16_avx2;
+  }
   aom_variance16x32 = aom_variance16x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_variance16x32 = aom_variance16x32_avx2;
+  }
   aom_variance16x8 = aom_variance16x8_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_variance16x8 = aom_variance16x8_avx2;
+  }
   aom_variance32x16 = aom_variance32x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_variance32x16 = aom_variance32x16_avx2;
+  }
   aom_variance32x32 = aom_variance32x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_variance32x32 = aom_variance32x32_avx2;
+  }
   aom_variance32x64 = aom_variance32x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_variance32x64 = aom_variance32x64_avx2;
+  }
   aom_variance64x128 = aom_variance64x128_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_variance64x128 = aom_variance64x128_avx2;
+  }
   aom_variance64x32 = aom_variance64x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_variance64x32 = aom_variance64x32_avx2;
+  }
   aom_variance64x64 = aom_variance64x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_variance64x64 = aom_variance64x64_avx2;
+  }
   aom_vector_var = aom_vector_var_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     aom_vector_var = aom_vector_var_sse4_1;
+  }
+  if (flags & HAS_AVX2) {
+    aom_vector_var = aom_vector_var_avx2;
+  }
 }
 #endif
 
diff --git a/libaom/source/config/win/ia32/config/aom_scale_rtcd.h b/libaom/source/config/win/ia32/config/aom_scale_rtcd.h
index 5e6c033..ccd7baa 100644
--- a/libaom/source/config/win/ia32/config/aom_scale_rtcd.h
+++ b/libaom/source/config/win/ia32/config/aom_scale_rtcd.h
@@ -155,6 +155,7 @@ void aom_yv12_partial_copy_y_c(const struct yv12_buffer_config* src_ybc,
 int aom_yv12_realloc_with_new_border_c(struct yv12_buffer_config* ybf,
                                        int new_border,
                                        int byte_alignment,
+                                       int num_pyramid_levels,
                                        int num_planes);
 #define aom_yv12_realloc_with_new_border aom_yv12_realloc_with_new_border_c
 
diff --git a/libaom/source/config/win/ia32/config/av1_rtcd.h b/libaom/source/config/win/ia32/config/av1_rtcd.h
index 6d8a64d..05aae12 100644
--- a/libaom/source/config/win/ia32/config/av1_rtcd.h
+++ b/libaom/source/config/win/ia32/config/av1_rtcd.h
@@ -417,76 +417,56 @@ RTCD_EXTERN int64_t (*av1_calc_frame_error)(const uint8_t* const ref,
                                             int p_height,
                                             int p_stride);
 
-void av1_calc_indices_dim1_c(const int* data,
-                             const int* centroids,
+void av1_calc_indices_dim1_c(const int16_t* data,
+                             const int16_t* centroids,
                              uint8_t* indices,
+                             int64_t* total_dist,
                              int n,
                              int k);
-void av1_calc_indices_dim1_sse2(const int* data,
-                                const int* centroids,
+void av1_calc_indices_dim1_sse2(const int16_t* data,
+                                const int16_t* centroids,
                                 uint8_t* indices,
+                                int64_t* total_dist,
                                 int n,
                                 int k);
-void av1_calc_indices_dim1_avx2(const int* data,
-                                const int* centroids,
+void av1_calc_indices_dim1_avx2(const int16_t* data,
+                                const int16_t* centroids,
                                 uint8_t* indices,
+                                int64_t* total_dist,
                                 int n,
                                 int k);
-RTCD_EXTERN void (*av1_calc_indices_dim1)(const int* data,
-                                          const int* centroids,
+RTCD_EXTERN void (*av1_calc_indices_dim1)(const int16_t* data,
+                                          const int16_t* centroids,
                                           uint8_t* indices,
+                                          int64_t* total_dist,
                                           int n,
                                           int k);
 
-void av1_calc_indices_dim2_c(const int* data,
-                             const int* centroids,
+void av1_calc_indices_dim2_c(const int16_t* data,
+                             const int16_t* centroids,
                              uint8_t* indices,
+                             int64_t* total_dist,
                              int n,
                              int k);
-void av1_calc_indices_dim2_avx2(const int* data,
-                                const int* centroids,
+void av1_calc_indices_dim2_sse2(const int16_t* data,
+                                const int16_t* centroids,
                                 uint8_t* indices,
+                                int64_t* total_dist,
                                 int n,
                                 int k);
-RTCD_EXTERN void (*av1_calc_indices_dim2)(const int* data,
-                                          const int* centroids,
+void av1_calc_indices_dim2_avx2(const int16_t* data,
+                                const int16_t* centroids,
+                                uint8_t* indices,
+                                int64_t* total_dist,
+                                int n,
+                                int k);
+RTCD_EXTERN void (*av1_calc_indices_dim2)(const int16_t* data,
+                                          const int16_t* centroids,
                                           uint8_t* indices,
+                                          int64_t* total_dist,
                                           int n,
                                           int k);
 
-double av1_compute_cross_correlation_c(unsigned char* im1,
-                                       int stride1,
-                                       int x1,
-                                       int y1,
-                                       unsigned char* im2,
-                                       int stride2,
-                                       int x2,
-                                       int y2);
-double av1_compute_cross_correlation_sse4_1(unsigned char* im1,
-                                            int stride1,
-                                            int x1,
-                                            int y1,
-                                            unsigned char* im2,
-                                            int stride2,
-                                            int x2,
-                                            int y2);
-double av1_compute_cross_correlation_avx2(unsigned char* im1,
-                                          int stride1,
-                                          int x1,
-                                          int y1,
-                                          unsigned char* im2,
-                                          int stride2,
-                                          int x2,
-                                          int y2);
-RTCD_EXTERN double (*av1_compute_cross_correlation)(unsigned char* im1,
-                                                    int stride1,
-                                                    int x1,
-                                                    int y1,
-                                                    unsigned char* im2,
-                                                    int stride2,
-                                                    int x2,
-                                                    int y2);
-
 void av1_convolve_2d_scale_c(const uint8_t* src,
                              int src_stride,
                              uint8_t* dst,
@@ -1307,14 +1287,6 @@ void av1_get_nz_map_contexts_sse2(const uint8_t* const levels,
                                   int8_t* const coeff_contexts);
 #define av1_get_nz_map_contexts av1_get_nz_map_contexts_sse2
 
-void av1_highbd_fwht4x4_c(const int16_t* input, tran_low_t* output, int stride);
-void av1_highbd_fwht4x4_sse4_1(const int16_t* input,
-                               tran_low_t* output,
-                               int stride);
-RTCD_EXTERN void (*av1_highbd_fwht4x4)(const int16_t* input,
-                                       tran_low_t* output,
-                                       int stride);
-
 void av1_highbd_inv_txfm_add_c(const tran_low_t* input,
                                uint8_t* dest,
                                int stride,
@@ -2149,75 +2121,75 @@ void cdef_copy_rect8_16bit_to_16bit_c(uint16_t* dst,
                                       int dstride,
                                       const uint16_t* src,
                                       int sstride,
-                                      int v,
-                                      int h);
+                                      int width,
+                                      int height);
 void cdef_copy_rect8_16bit_to_16bit_sse2(uint16_t* dst,
                                          int dstride,
                                          const uint16_t* src,
                                          int sstride,
-                                         int v,
-                                         int h);
+                                         int width,
+                                         int height);
 void cdef_copy_rect8_16bit_to_16bit_ssse3(uint16_t* dst,
                                           int dstride,
                                           const uint16_t* src,
                                           int sstride,
-                                          int v,
-                                          int h);
+                                          int width,
+                                          int height);
 void cdef_copy_rect8_16bit_to_16bit_sse4_1(uint16_t* dst,
                                            int dstride,
                                            const uint16_t* src,
                                            int sstride,
-                                           int v,
-                                           int h);
+                                           int width,
+                                           int height);
 void cdef_copy_rect8_16bit_to_16bit_avx2(uint16_t* dst,
                                          int dstride,
                                          const uint16_t* src,
                                          int sstride,
-                                         int v,
-                                         int h);
+                                         int width,
+                                         int height);
 RTCD_EXTERN void (*cdef_copy_rect8_16bit_to_16bit)(uint16_t* dst,
                                                    int dstride,
                                                    const uint16_t* src,
                                                    int sstride,
-                                                   int v,
-                                                   int h);
+                                                   int width,
+                                                   int height);
 
 void cdef_copy_rect8_8bit_to_16bit_c(uint16_t* dst,
                                      int dstride,
                                      const uint8_t* src,
                                      int sstride,
-                                     int v,
-                                     int h);
+                                     int width,
+                                     int height);
 void cdef_copy_rect8_8bit_to_16bit_sse2(uint16_t* dst,
                                         int dstride,
                                         const uint8_t* src,
                                         int sstride,
-                                        int v,
-                                        int h);
+                                        int width,
+                                        int height);
 void cdef_copy_rect8_8bit_to_16bit_ssse3(uint16_t* dst,
                                          int dstride,
                                          const uint8_t* src,
                                          int sstride,
-                                         int v,
-                                         int h);
+                                         int width,
+                                         int height);
 void cdef_copy_rect8_8bit_to_16bit_sse4_1(uint16_t* dst,
                                           int dstride,
                                           const uint8_t* src,
                                           int sstride,
-                                          int v,
-                                          int h);
+                                          int width,
+                                          int height);
 void cdef_copy_rect8_8bit_to_16bit_avx2(uint16_t* dst,
                                         int dstride,
                                         const uint8_t* src,
                                         int sstride,
-                                        int v,
-                                        int h);
+                                        int width,
+                                        int height);
 RTCD_EXTERN void (*cdef_copy_rect8_8bit_to_16bit)(uint16_t* dst,
                                                   int dstride,
                                                   const uint8_t* src,
                                                   int sstride,
-                                                  int v,
-                                                  int h);
+                                                  int width,
+                                                  int height);
 
 void cdef_filter_16_0_c(void* dst16,
                         int dstride,
@@ -2868,373 +2840,500 @@ static void setup_rtcd_internal(void) {
   (void)flags;
 
   aom_dist_wtd_comp_avg_upsampled_pred = aom_dist_wtd_comp_avg_upsampled_pred_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_comp_avg_upsampled_pred =
         aom_dist_wtd_comp_avg_upsampled_pred_ssse3;
+  }
   av1_apply_selfguided_restoration = av1_apply_selfguided_restoration_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_apply_selfguided_restoration = av1_apply_selfguided_restoration_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_apply_selfguided_restoration = av1_apply_selfguided_restoration_avx2;
+  }
   av1_block_error = av1_block_error_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_block_error = av1_block_error_avx2;
+  }
   av1_block_error_lp = av1_block_error_lp_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_block_error_lp = av1_block_error_lp_avx2;
+  }
   av1_build_compound_diffwtd_mask = av1_build_compound_diffwtd_mask_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_build_compound_diffwtd_mask = av1_build_compound_diffwtd_mask_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_build_compound_diffwtd_mask = av1_build_compound_diffwtd_mask_avx2;
+  }
   av1_build_compound_diffwtd_mask_d16 = av1_build_compound_diffwtd_mask_d16_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_build_compound_diffwtd_mask_d16 =
         av1_build_compound_diffwtd_mask_d16_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_build_compound_diffwtd_mask_d16 =
         av1_build_compound_diffwtd_mask_d16_avx2;
+  }
   av1_calc_frame_error = av1_calc_frame_error_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_calc_frame_error = av1_calc_frame_error_avx2;
+  }
   av1_calc_indices_dim1 = av1_calc_indices_dim1_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_calc_indices_dim1 = av1_calc_indices_dim1_avx2;
-  av1_calc_indices_dim2 = av1_calc_indices_dim2_c;
-  if (flags & HAS_AVX2)
+  }
+  av1_calc_indices_dim2 = av1_calc_indices_dim2_sse2;
+  if (flags & HAS_AVX2) {
     av1_calc_indices_dim2 = av1_calc_indices_dim2_avx2;
-  av1_compute_cross_correlation = av1_compute_cross_correlation_c;
-  if (flags & HAS_SSE4_1)
-    av1_compute_cross_correlation = av1_compute_cross_correlation_sse4_1;
-  if (flags & HAS_AVX2)
-    av1_compute_cross_correlation = av1_compute_cross_correlation_avx2;
+  }
   av1_convolve_2d_scale = av1_convolve_2d_scale_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_convolve_2d_scale = av1_convolve_2d_scale_sse4_1;
+  }
   av1_convolve_2d_sr = av1_convolve_2d_sr_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_convolve_2d_sr = av1_convolve_2d_sr_avx2;
+  }
   av1_convolve_horiz_rs = av1_convolve_horiz_rs_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_convolve_horiz_rs = av1_convolve_horiz_rs_sse4_1;
+  }
   av1_convolve_x_sr = av1_convolve_x_sr_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_convolve_x_sr = av1_convolve_x_sr_avx2;
+  }
   av1_convolve_y_sr = av1_convolve_y_sr_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_convolve_y_sr = av1_convolve_y_sr_avx2;
+  }
   av1_dist_wtd_convolve_2d = av1_dist_wtd_convolve_2d_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     av1_dist_wtd_convolve_2d = av1_dist_wtd_convolve_2d_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_dist_wtd_convolve_2d = av1_dist_wtd_convolve_2d_avx2;
+  }
   av1_dist_wtd_convolve_2d_copy = av1_dist_wtd_convolve_2d_copy_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_dist_wtd_convolve_2d_copy = av1_dist_wtd_convolve_2d_copy_avx2;
+  }
   av1_dist_wtd_convolve_x = av1_dist_wtd_convolve_x_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_dist_wtd_convolve_x = av1_dist_wtd_convolve_x_avx2;
+  }
   av1_dist_wtd_convolve_y = av1_dist_wtd_convolve_y_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_dist_wtd_convolve_y = av1_dist_wtd_convolve_y_avx2;
+  }
   av1_dr_prediction_z1 = av1_dr_prediction_z1_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_dr_prediction_z1 = av1_dr_prediction_z1_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_dr_prediction_z1 = av1_dr_prediction_z1_avx2;
+  }
   av1_dr_prediction_z2 = av1_dr_prediction_z2_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_dr_prediction_z2 = av1_dr_prediction_z2_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_dr_prediction_z2 = av1_dr_prediction_z2_avx2;
+  }
   av1_dr_prediction_z3 = av1_dr_prediction_z3_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_dr_prediction_z3 = av1_dr_prediction_z3_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_dr_prediction_z3 = av1_dr_prediction_z3_avx2;
+  }
   av1_filter_intra_edge = av1_filter_intra_edge_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_filter_intra_edge = av1_filter_intra_edge_sse4_1;
+  }
   av1_filter_intra_edge_high = av1_filter_intra_edge_high_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_filter_intra_edge_high = av1_filter_intra_edge_high_sse4_1;
+  }
   av1_filter_intra_predictor = av1_filter_intra_predictor_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_filter_intra_predictor = av1_filter_intra_predictor_sse4_1;
+  }
   av1_fwd_txfm2d_16x16 = av1_fwd_txfm2d_16x16_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_16x16 = av1_fwd_txfm2d_16x16_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_fwd_txfm2d_16x16 = av1_fwd_txfm2d_16x16_avx2;
+  }
   av1_fwd_txfm2d_16x32 = av1_fwd_txfm2d_16x32_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_16x32 = av1_fwd_txfm2d_16x32_sse4_1;
+  }
   av1_fwd_txfm2d_16x4 = av1_fwd_txfm2d_16x4_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_16x4 = av1_fwd_txfm2d_16x4_sse4_1;
+  }
   av1_fwd_txfm2d_16x8 = av1_fwd_txfm2d_16x8_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_16x8 = av1_fwd_txfm2d_16x8_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_fwd_txfm2d_16x8 = av1_fwd_txfm2d_16x8_avx2;
+  }
   av1_fwd_txfm2d_32x16 = av1_fwd_txfm2d_32x16_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_32x16 = av1_fwd_txfm2d_32x16_sse4_1;
+  }
   av1_fwd_txfm2d_32x32 = av1_fwd_txfm2d_32x32_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_32x32 = av1_fwd_txfm2d_32x32_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_fwd_txfm2d_32x32 = av1_fwd_txfm2d_32x32_avx2;
+  }
   av1_fwd_txfm2d_32x64 = av1_fwd_txfm2d_32x64_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_32x64 = av1_fwd_txfm2d_32x64_sse4_1;
+  }
   av1_fwd_txfm2d_4x4 = av1_fwd_txfm2d_4x4_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_4x4 = av1_fwd_txfm2d_4x4_sse4_1;
+  }
   av1_fwd_txfm2d_4x8 = av1_fwd_txfm2d_4x8_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_4x8 = av1_fwd_txfm2d_4x8_sse4_1;
+  }
   av1_fwd_txfm2d_64x32 = av1_fwd_txfm2d_64x32_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_64x32 = av1_fwd_txfm2d_64x32_sse4_1;
+  }
   av1_fwd_txfm2d_64x64 = av1_fwd_txfm2d_64x64_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_64x64 = av1_fwd_txfm2d_64x64_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_fwd_txfm2d_64x64 = av1_fwd_txfm2d_64x64_avx2;
+  }
   av1_fwd_txfm2d_8x16 = av1_fwd_txfm2d_8x16_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_8x16 = av1_fwd_txfm2d_8x16_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_fwd_txfm2d_8x16 = av1_fwd_txfm2d_8x16_avx2;
+  }
   av1_fwd_txfm2d_8x4 = av1_fwd_txfm2d_8x4_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_8x4 = av1_fwd_txfm2d_8x4_sse4_1;
+  }
   av1_fwd_txfm2d_8x8 = av1_fwd_txfm2d_8x8_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_8x8 = av1_fwd_txfm2d_8x8_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_fwd_txfm2d_8x8 = av1_fwd_txfm2d_8x8_avx2;
+  }
   av1_fwht4x4 = av1_fwht4x4_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwht4x4 = av1_fwht4x4_sse4_1;
+  }
   av1_get_crc32c_value = av1_get_crc32c_value_c;
-  if (flags & HAS_SSE4_2)
+  if (flags & HAS_SSE4_2) {
     av1_get_crc32c_value = av1_get_crc32c_value_sse4_2;
+  }
   av1_get_horver_correlation_full = av1_get_horver_correlation_full_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_get_horver_correlation_full = av1_get_horver_correlation_full_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_get_horver_correlation_full = av1_get_horver_correlation_full_avx2;
-  av1_highbd_fwht4x4 = av1_highbd_fwht4x4_c;
-  if (flags & HAS_SSE4_1)
-    av1_highbd_fwht4x4 = av1_highbd_fwht4x4_sse4_1;
+  }
   av1_highbd_inv_txfm_add = av1_highbd_inv_txfm_add_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_highbd_inv_txfm_add = av1_highbd_inv_txfm_add_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_highbd_inv_txfm_add = av1_highbd_inv_txfm_add_avx2;
+  }
   av1_highbd_inv_txfm_add_16x4 = av1_highbd_inv_txfm_add_16x4_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_highbd_inv_txfm_add_16x4 = av1_highbd_inv_txfm_add_16x4_sse4_1;
+  }
   av1_highbd_inv_txfm_add_4x16 = av1_highbd_inv_txfm_add_4x16_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_highbd_inv_txfm_add_4x16 = av1_highbd_inv_txfm_add_4x16_sse4_1;
+  }
   av1_highbd_inv_txfm_add_4x4 = av1_highbd_inv_txfm_add_4x4_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_highbd_inv_txfm_add_4x4 = av1_highbd_inv_txfm_add_4x4_sse4_1;
+  }
   av1_highbd_inv_txfm_add_4x8 = av1_highbd_inv_txfm_add_4x8_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_highbd_inv_txfm_add_4x8 = av1_highbd_inv_txfm_add_4x8_sse4_1;
+  }
   av1_highbd_inv_txfm_add_8x4 = av1_highbd_inv_txfm_add_8x4_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_highbd_inv_txfm_add_8x4 = av1_highbd_inv_txfm_add_8x4_sse4_1;
+  }
   av1_highbd_inv_txfm_add_8x8 = av1_highbd_inv_txfm_add_8x8_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_highbd_inv_txfm_add_8x8 = av1_highbd_inv_txfm_add_8x8_sse4_1;
+  }
   av1_highbd_iwht4x4_16_add = av1_highbd_iwht4x4_16_add_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_highbd_iwht4x4_16_add = av1_highbd_iwht4x4_16_add_sse4_1;
+  }
   av1_inv_txfm2d_add_4x4 = av1_inv_txfm2d_add_4x4_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_inv_txfm2d_add_4x4 = av1_inv_txfm2d_add_4x4_sse4_1;
+  }
   av1_inv_txfm2d_add_8x8 = av1_inv_txfm2d_add_8x8_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_inv_txfm2d_add_8x8 = av1_inv_txfm2d_add_8x8_sse4_1;
+  }
   av1_inv_txfm_add = av1_inv_txfm_add_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     av1_inv_txfm_add = av1_inv_txfm_add_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_inv_txfm_add = av1_inv_txfm_add_avx2;
+  }
   av1_lowbd_fwd_txfm = av1_lowbd_fwd_txfm_sse2;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_lowbd_fwd_txfm = av1_lowbd_fwd_txfm_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_lowbd_fwd_txfm = av1_lowbd_fwd_txfm_avx2;
+  }
   av1_nn_fast_softmax_16 = av1_nn_fast_softmax_16_c;
-  if (flags & HAS_SSE3)
+  if (flags & HAS_SSE3) {
     av1_nn_fast_softmax_16 = av1_nn_fast_softmax_16_sse3;
+  }
   av1_nn_predict = av1_nn_predict_c;
-  if (flags & HAS_SSE3)
+  if (flags & HAS_SSE3) {
     av1_nn_predict = av1_nn_predict_sse3;
+  }
   av1_quantize_fp = av1_quantize_fp_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_quantize_fp = av1_quantize_fp_avx2;
+  }
   av1_quantize_fp_32x32 = av1_quantize_fp_32x32_c;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_quantize_fp_32x32 = av1_quantize_fp_32x32_avx2;
+  }
   av1_quantize_fp_64x64 = av1_quantize_fp_64x64_c;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_quantize_fp_64x64 = av1_quantize_fp_64x64_avx2;
+  }
   av1_quantize_lp = av1_quantize_lp_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_quantize_lp = av1_quantize_lp_avx2;
+  }
   av1_resize_and_extend_frame = av1_resize_and_extend_frame_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     av1_resize_and_extend_frame = av1_resize_and_extend_frame_ssse3;
+  }
   av1_round_shift_array = av1_round_shift_array_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_round_shift_array = av1_round_shift_array_sse4_1;
+  }
   av1_selfguided_restoration = av1_selfguided_restoration_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_selfguided_restoration = av1_selfguided_restoration_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_selfguided_restoration = av1_selfguided_restoration_avx2;
+  }
   av1_txb_init_levels = av1_txb_init_levels_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_txb_init_levels = av1_txb_init_levels_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_txb_init_levels = av1_txb_init_levels_avx2;
+  }
   av1_upsample_intra_edge = av1_upsample_intra_edge_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_upsample_intra_edge = av1_upsample_intra_edge_sse4_1;
+  }
   av1_upsample_intra_edge_high = av1_upsample_intra_edge_high_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_upsample_intra_edge_high = av1_upsample_intra_edge_high_sse4_1;
+  }
   av1_warp_affine = av1_warp_affine_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_warp_affine = av1_warp_affine_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_warp_affine = av1_warp_affine_avx2;
+  }
   av1_wedge_compute_delta_squares = av1_wedge_compute_delta_squares_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_wedge_compute_delta_squares = av1_wedge_compute_delta_squares_avx2;
+  }
   av1_wedge_sign_from_residuals = av1_wedge_sign_from_residuals_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_wedge_sign_from_residuals = av1_wedge_sign_from_residuals_avx2;
+  }
   av1_wedge_sse_from_residuals = av1_wedge_sse_from_residuals_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_wedge_sse_from_residuals = av1_wedge_sse_from_residuals_avx2;
+  }
   av1_wiener_convolve_add_src = av1_wiener_convolve_add_src_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_wiener_convolve_add_src = av1_wiener_convolve_add_src_avx2;
+  }
   cdef_copy_rect8_16bit_to_16bit = cdef_copy_rect8_16bit_to_16bit_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cdef_copy_rect8_16bit_to_16bit = cdef_copy_rect8_16bit_to_16bit_ssse3;
-  if (flags & HAS_SSE4_1)
+  }
+  if (flags & HAS_SSE4_1) {
     cdef_copy_rect8_16bit_to_16bit = cdef_copy_rect8_16bit_to_16bit_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cdef_copy_rect8_16bit_to_16bit = cdef_copy_rect8_16bit_to_16bit_avx2;
+  }
   cdef_copy_rect8_8bit_to_16bit = cdef_copy_rect8_8bit_to_16bit_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cdef_copy_rect8_8bit_to_16bit = cdef_copy_rect8_8bit_to_16bit_ssse3;
-  if (flags & HAS_SSE4_1)
+  }
+  if (flags & HAS_SSE4_1) {
     cdef_copy_rect8_8bit_to_16bit = cdef_copy_rect8_8bit_to_16bit_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cdef_copy_rect8_8bit_to_16bit = cdef_copy_rect8_8bit_to_16bit_avx2;
+  }
   cdef_filter_16_0 = cdef_filter_16_0_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cdef_filter_16_0 = cdef_filter_16_0_ssse3;
-  if (flags & HAS_SSE4_1)
+  }
+  if (flags & HAS_SSE4_1) {
     cdef_filter_16_0 = cdef_filter_16_0_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cdef_filter_16_0 = cdef_filter_16_0_avx2;
+  }
   cdef_filter_16_1 = cdef_filter_16_1_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cdef_filter_16_1 = cdef_filter_16_1_ssse3;
-  if (flags & HAS_SSE4_1)
+  }
+  if (flags & HAS_SSE4_1) {
     cdef_filter_16_1 = cdef_filter_16_1_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cdef_filter_16_1 = cdef_filter_16_1_avx2;
+  }
   cdef_filter_16_2 = cdef_filter_16_2_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cdef_filter_16_2 = cdef_filter_16_2_ssse3;
-  if (flags & HAS_SSE4_1)
+  }
+  if (flags & HAS_SSE4_1) {
     cdef_filter_16_2 = cdef_filter_16_2_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cdef_filter_16_2 = cdef_filter_16_2_avx2;
+  }
   cdef_filter_16_3 = cdef_filter_16_3_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cdef_filter_16_3 = cdef_filter_16_3_ssse3;
-  if (flags & HAS_SSE4_1)
+  }
+  if (flags & HAS_SSE4_1) {
     cdef_filter_16_3 = cdef_filter_16_3_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cdef_filter_16_3 = cdef_filter_16_3_avx2;
+  }
   cdef_filter_8_0 = cdef_filter_8_0_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cdef_filter_8_0 = cdef_filter_8_0_ssse3;
-  if (flags & HAS_SSE4_1)
+  }
+  if (flags & HAS_SSE4_1) {
     cdef_filter_8_0 = cdef_filter_8_0_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cdef_filter_8_0 = cdef_filter_8_0_avx2;
+  }
   cdef_filter_8_1 = cdef_filter_8_1_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cdef_filter_8_1 = cdef_filter_8_1_ssse3;
-  if (flags & HAS_SSE4_1)
+  }
+  if (flags & HAS_SSE4_1) {
     cdef_filter_8_1 = cdef_filter_8_1_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cdef_filter_8_1 = cdef_filter_8_1_avx2;
+  }
   cdef_filter_8_2 = cdef_filter_8_2_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cdef_filter_8_2 = cdef_filter_8_2_ssse3;
-  if (flags & HAS_SSE4_1)
+  }
+  if (flags & HAS_SSE4_1) {
     cdef_filter_8_2 = cdef_filter_8_2_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cdef_filter_8_2 = cdef_filter_8_2_avx2;
+  }
   cdef_filter_8_3 = cdef_filter_8_3_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cdef_filter_8_3 = cdef_filter_8_3_ssse3;
-  if (flags & HAS_SSE4_1)
+  }
+  if (flags & HAS_SSE4_1) {
     cdef_filter_8_3 = cdef_filter_8_3_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cdef_filter_8_3 = cdef_filter_8_3_avx2;
+  }
   cdef_find_dir = cdef_find_dir_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cdef_find_dir = cdef_find_dir_ssse3;
-  if (flags & HAS_SSE4_1)
+  }
+  if (flags & HAS_SSE4_1) {
     cdef_find_dir = cdef_find_dir_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cdef_find_dir = cdef_find_dir_avx2;
+  }
   cdef_find_dir_dual = cdef_find_dir_dual_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cdef_find_dir_dual = cdef_find_dir_dual_ssse3;
-  if (flags & HAS_SSE4_1)
+  }
+  if (flags & HAS_SSE4_1) {
     cdef_find_dir_dual = cdef_find_dir_dual_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cdef_find_dir_dual = cdef_find_dir_dual_avx2;
+  }
   cfl_get_luma_subsampling_420_lbd = cfl_get_luma_subsampling_420_lbd_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cfl_get_luma_subsampling_420_lbd = cfl_get_luma_subsampling_420_lbd_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cfl_get_luma_subsampling_420_lbd = cfl_get_luma_subsampling_420_lbd_avx2;
+  }
   cfl_get_luma_subsampling_422_lbd = cfl_get_luma_subsampling_422_lbd_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cfl_get_luma_subsampling_422_lbd = cfl_get_luma_subsampling_422_lbd_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cfl_get_luma_subsampling_422_lbd = cfl_get_luma_subsampling_422_lbd_avx2;
+  }
   cfl_get_luma_subsampling_444_lbd = cfl_get_luma_subsampling_444_lbd_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cfl_get_luma_subsampling_444_lbd = cfl_get_luma_subsampling_444_lbd_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cfl_get_luma_subsampling_444_lbd = cfl_get_luma_subsampling_444_lbd_avx2;
+  }
   cfl_get_predict_lbd_fn = cfl_get_predict_lbd_fn_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cfl_get_predict_lbd_fn = cfl_get_predict_lbd_fn_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cfl_get_predict_lbd_fn = cfl_get_predict_lbd_fn_avx2;
+  }
   cfl_get_subtract_average_fn = cfl_get_subtract_average_fn_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     cfl_get_subtract_average_fn = cfl_get_subtract_average_fn_avx2;
+  }
 }
 #endif
 
diff --git a/libaom/source/config/win/x64/config/aom_config.asm b/libaom/source/config/win/x64/config/aom_config.asm
index 6a228f2..8526e15 100644
--- a/libaom/source/config/win/x64/config/aom_config.asm
+++ b/libaom/source/config/win/x64/config/aom_config.asm
@@ -36,6 +36,7 @@
 %define CONFIG_NORMAL_TILE_MODE 1
 %define CONFIG_OPTICAL_FLOW_API 0
 %define CONFIG_OS_SUPPORT 1
+%define CONFIG_OUTPUT_FRAME_SIZE 0
 %define CONFIG_PARTITION_SEARCH_ORDER 0
 %define CONFIG_PIC 1
 %define CONFIG_RATECTRL_LOG 0
@@ -44,6 +45,7 @@
 %define CONFIG_REALTIME_ONLY 1
 %define CONFIG_RT_ML_PARTITIONING 0
 %define CONFIG_RUNTIME_CPU_DETECT 1
+%define CONFIG_SALIENCY_MAP 0
 %define CONFIG_SHARED 0
 %define CONFIG_SIZE_LIMIT 1
 %define CONFIG_SPATIAL_RESAMPLING 1
diff --git a/libaom/source/config/win/x64/config/aom_config.h b/libaom/source/config/win/x64/config/aom_config.h
index a76264e..47b5a74 100644
--- a/libaom/source/config/win/x64/config/aom_config.h
+++ b/libaom/source/config/win/x64/config/aom_config.h
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2022, Alliance for Open Media. All rights reserved
+ * Copyright (c) 2023, Alliance for Open Media. All rights reserved
  *
  * This source code is subject to the terms of the BSD 2 Clause License and
  * the Alliance for Open Media Patent License 1.0. If the BSD 2 Clause License
@@ -48,6 +48,7 @@
 #define CONFIG_NORMAL_TILE_MODE 1
 #define CONFIG_OPTICAL_FLOW_API 0
 #define CONFIG_OS_SUPPORT 1
+#define CONFIG_OUTPUT_FRAME_SIZE 0
 #define CONFIG_PARTITION_SEARCH_ORDER 0
 #define CONFIG_PIC 1
 #define CONFIG_RATECTRL_LOG 0
@@ -56,6 +57,7 @@
 #define CONFIG_REALTIME_ONLY 1
 #define CONFIG_RT_ML_PARTITIONING 0
 #define CONFIG_RUNTIME_CPU_DETECT 1
+#define CONFIG_SALIENCY_MAP 0
 #define CONFIG_SHARED 0
 #define CONFIG_SIZE_LIMIT 1
 #define CONFIG_SPATIAL_RESAMPLING 1
diff --git a/libaom/source/config/win/x64/config/aom_dsp_rtcd.h b/libaom/source/config/win/x64/config/aom_dsp_rtcd.h
index a53972f..ba451d7 100644
--- a/libaom/source/config/win/x64/config/aom_dsp_rtcd.h
+++ b/libaom/source/config/win/x64/config/aom_dsp_rtcd.h
@@ -2226,30 +2226,75 @@ unsigned int aom_get_mb_ss_c(const int16_t*);
 unsigned int aom_get_mb_ss_sse2(const int16_t*);
 #define aom_get_mb_ss aom_get_mb_ss_sse2
 
-void aom_get_sse_sum_8x8_quad_c(const uint8_t* src_ptr,
-                                int source_stride,
-                                const uint8_t* ref_ptr,
-                                int ref_stride,
-                                unsigned int* sse,
-                                int* sum);
-void aom_get_sse_sum_8x8_quad_sse2(const uint8_t* src_ptr,
-                                   int source_stride,
-                                   const uint8_t* ref_ptr,
-                                   int ref_stride,
-                                   unsigned int* sse,
-                                   int* sum);
-void aom_get_sse_sum_8x8_quad_avx2(const uint8_t* src_ptr,
-                                   int source_stride,
-                                   const uint8_t* ref_ptr,
-                                   int ref_stride,
-                                   unsigned int* sse,
-                                   int* sum);
-RTCD_EXTERN void (*aom_get_sse_sum_8x8_quad)(const uint8_t* src_ptr,
-                                             int source_stride,
-                                             const uint8_t* ref_ptr,
-                                             int ref_stride,
-                                             unsigned int* sse,
-                                             int* sum);
+void aom_get_var_sse_sum_16x16_dual_c(const uint8_t* src_ptr,
+                                      int source_stride,
+                                      const uint8_t* ref_ptr,
+                                      int ref_stride,
+                                      uint32_t* sse16x16,
+                                      unsigned int* tot_sse,
+                                      int* tot_sum,
+                                      uint32_t* var16x16);
+void aom_get_var_sse_sum_16x16_dual_sse2(const uint8_t* src_ptr,
+                                         int source_stride,
+                                         const uint8_t* ref_ptr,
+                                         int ref_stride,
+                                         uint32_t* sse16x16,
+                                         unsigned int* tot_sse,
+                                         int* tot_sum,
+                                         uint32_t* var16x16);
+void aom_get_var_sse_sum_16x16_dual_avx2(const uint8_t* src_ptr,
+                                         int source_stride,
+                                         const uint8_t* ref_ptr,
+                                         int ref_stride,
+                                         uint32_t* sse16x16,
+                                         unsigned int* tot_sse,
+                                         int* tot_sum,
+                                         uint32_t* var16x16);
+RTCD_EXTERN void (*aom_get_var_sse_sum_16x16_dual)(const uint8_t* src_ptr,
+                                                   int source_stride,
+                                                   const uint8_t* ref_ptr,
+                                                   int ref_stride,
+                                                   uint32_t* sse16x16,
+                                                   unsigned int* tot_sse,
+                                                   int* tot_sum,
+                                                   uint32_t* var16x16);
+
+void aom_get_var_sse_sum_8x8_quad_c(const uint8_t* src_ptr,
+                                    int source_stride,
+                                    const uint8_t* ref_ptr,
+                                    int ref_stride,
+                                    uint32_t* sse8x8,
+                                    int* sum8x8,
+                                    unsigned int* tot_sse,
+                                    int* tot_sum,
+                                    uint32_t* var8x8);
+void aom_get_var_sse_sum_8x8_quad_sse2(const uint8_t* src_ptr,
+                                       int source_stride,
+                                       const uint8_t* ref_ptr,
+                                       int ref_stride,
+                                       uint32_t* sse8x8,
+                                       int* sum8x8,
+                                       unsigned int* tot_sse,
+                                       int* tot_sum,
+                                       uint32_t* var8x8);
+void aom_get_var_sse_sum_8x8_quad_avx2(const uint8_t* src_ptr,
+                                       int source_stride,
+                                       const uint8_t* ref_ptr,
+                                       int ref_stride,
+                                       uint32_t* sse8x8,
+                                       int* sum8x8,
+                                       unsigned int* tot_sse,
+                                       int* tot_sum,
+                                       uint32_t* var8x8);
+RTCD_EXTERN void (*aom_get_var_sse_sum_8x8_quad)(const uint8_t* src_ptr,
+                                                 int source_stride,
+                                                 const uint8_t* ref_ptr,
+                                                 int ref_stride,
+                                                 uint32_t* sse8x8,
+                                                 int* sum8x8,
+                                                 unsigned int* tot_sse,
+                                                 int* tot_sum,
+                                                 uint32_t* var8x8);
 
 void aom_h_predictor_16x16_c(uint8_t* dst,
                              ptrdiff_t y_stride,
@@ -2890,7 +2935,16 @@ void aom_lpf_vertical_14_quad_sse2(uint8_t* s,
                                    const uint8_t* blimit0,
                                    const uint8_t* limit0,
                                    const uint8_t* thresh0);
-#define aom_lpf_vertical_14_quad aom_lpf_vertical_14_quad_sse2
+void aom_lpf_vertical_14_quad_avx2(uint8_t* s,
+                                   int pitch,
+                                   const uint8_t* blimit0,
+                                   const uint8_t* limit0,
+                                   const uint8_t* thresh0);
+RTCD_EXTERN void (*aom_lpf_vertical_14_quad)(uint8_t* s,
+                                             int pitch,
+                                             const uint8_t* blimit0,
+                                             const uint8_t* limit0,
+                                             const uint8_t* thresh0);
 
 void aom_lpf_vertical_4_c(uint8_t* s,
                           int pitch,
@@ -4640,6 +4694,11 @@ uint64_t aom_mse_16xh_16bit_c(uint8_t* dst,
                               uint16_t* src,
                               int w,
                               int h);
+uint64_t aom_mse_16xh_16bit_sse2(uint8_t* dst,
+                                 int dstride,
+                                 uint16_t* src,
+                                 int w,
+                                 int h);
 uint64_t aom_mse_16xh_16bit_avx2(uint8_t* dst,
                                  int dstride,
                                  uint16_t* src,
@@ -5198,6 +5257,22 @@ RTCD_EXTERN unsigned int (*aom_sad128x128_avg)(const uint8_t* src_ptr,
                                                int ref_stride,
                                                const uint8_t* second_pred);
 
+void aom_sad128x128x3d_c(const uint8_t* src_ptr,
+                         int src_stride,
+                         const uint8_t* const ref_ptr[4],
+                         int ref_stride,
+                         uint32_t sad_array[4]);
+void aom_sad128x128x3d_avx2(const uint8_t* src_ptr,
+                            int src_stride,
+                            const uint8_t* const ref_ptr[4],
+                            int ref_stride,
+                            uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad128x128x3d)(const uint8_t* src_ptr,
+                                      int src_stride,
+                                      const uint8_t* const ref_ptr[4],
+                                      int ref_stride,
+                                      uint32_t sad_array[4]);
+
 void aom_sad128x128x4d_c(const uint8_t* src_ptr,
                          int src_stride,
                          const uint8_t* const ref_ptr[4],
@@ -5265,6 +5340,22 @@ RTCD_EXTERN unsigned int (*aom_sad128x64_avg)(const uint8_t* src_ptr,
                                               int ref_stride,
                                               const uint8_t* second_pred);
 
+void aom_sad128x64x3d_c(const uint8_t* src_ptr,
+                        int src_stride,
+                        const uint8_t* const ref_ptr[4],
+                        int ref_stride,
+                        uint32_t sad_array[4]);
+void aom_sad128x64x3d_avx2(const uint8_t* src_ptr,
+                           int src_stride,
+                           const uint8_t* const ref_ptr[4],
+                           int ref_stride,
+                           uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad128x64x3d)(const uint8_t* src_ptr,
+                                     int src_stride,
+                                     const uint8_t* const ref_ptr[4],
+                                     int ref_stride,
+                                     uint32_t sad_array[4]);
+
 void aom_sad128x64x4d_c(const uint8_t* src_ptr,
                         int src_stride,
                         const uint8_t* const ref_ptr[4],
@@ -5330,6 +5421,22 @@ unsigned int aom_sad16x16_avg_sse2(const uint8_t* src_ptr,
                                    const uint8_t* second_pred);
 #define aom_sad16x16_avg aom_sad16x16_avg_sse2
 
+void aom_sad16x16x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+void aom_sad16x16x3d_avx2(const uint8_t* src_ptr,
+                          int src_stride,
+                          const uint8_t* const ref_ptr[4],
+                          int ref_stride,
+                          uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad16x16x3d)(const uint8_t* src_ptr,
+                                    int src_stride,
+                                    const uint8_t* const ref_ptr[4],
+                                    int ref_stride,
+                                    uint32_t sad_array[4]);
+
 void aom_sad16x16x4d_c(const uint8_t* src_ptr,
                        int src_stride,
                        const uint8_t* const ref_ptr[4],
@@ -5340,7 +5447,16 @@ void aom_sad16x16x4d_sse2(const uint8_t* src_ptr,
                           const uint8_t* const ref_ptr[4],
                           int ref_stride,
                           uint32_t sad_array[4]);
-#define aom_sad16x16x4d aom_sad16x16x4d_sse2
+void aom_sad16x16x4d_avx2(const uint8_t* src_ptr,
+                          int src_stride,
+                          const uint8_t* const ref_ptr[4],
+                          int ref_stride,
+                          uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad16x16x4d)(const uint8_t* src_ptr,
+                                    int src_stride,
+                                    const uint8_t* const ref_ptr[4],
+                                    int ref_stride,
+                                    uint32_t sad_array[4]);
 
 void aom_sad16x16x4d_avg_c(const uint8_t* src_ptr,
                            int src_stride,
@@ -5372,6 +5488,22 @@ unsigned int aom_sad16x32_avg_sse2(const uint8_t* src_ptr,
                                    const uint8_t* second_pred);
 #define aom_sad16x32_avg aom_sad16x32_avg_sse2
 
+void aom_sad16x32x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+void aom_sad16x32x3d_avx2(const uint8_t* src_ptr,
+                          int src_stride,
+                          const uint8_t* const ref_ptr[4],
+                          int ref_stride,
+                          uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad16x32x3d)(const uint8_t* src_ptr,
+                                    int src_stride,
+                                    const uint8_t* const ref_ptr[4],
+                                    int ref_stride,
+                                    uint32_t sad_array[4]);
+
 void aom_sad16x32x4d_c(const uint8_t* src_ptr,
                        int src_stride,
                        const uint8_t* const ref_ptr[4],
@@ -5382,7 +5514,16 @@ void aom_sad16x32x4d_sse2(const uint8_t* src_ptr,
                           const uint8_t* const ref_ptr[4],
                           int ref_stride,
                           uint32_t sad_array[4]);
-#define aom_sad16x32x4d aom_sad16x32x4d_sse2
+void aom_sad16x32x4d_avx2(const uint8_t* src_ptr,
+                          int src_stride,
+                          const uint8_t* const ref_ptr[4],
+                          int ref_stride,
+                          uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad16x32x4d)(const uint8_t* src_ptr,
+                                    int src_stride,
+                                    const uint8_t* const ref_ptr[4],
+                                    int ref_stride,
+                                    uint32_t sad_array[4]);
 
 void aom_sad16x32x4d_avg_c(const uint8_t* src_ptr,
                            int src_stride,
@@ -5414,6 +5555,22 @@ unsigned int aom_sad16x8_avg_sse2(const uint8_t* src_ptr,
                                   const uint8_t* second_pred);
 #define aom_sad16x8_avg aom_sad16x8_avg_sse2
 
+void aom_sad16x8x3d_c(const uint8_t* src_ptr,
+                      int src_stride,
+                      const uint8_t* const ref_ptr[4],
+                      int ref_stride,
+                      uint32_t sad_array[4]);
+void aom_sad16x8x3d_avx2(const uint8_t* src_ptr,
+                         int src_stride,
+                         const uint8_t* const ref_ptr[4],
+                         int ref_stride,
+                         uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad16x8x3d)(const uint8_t* src_ptr,
+                                   int src_stride,
+                                   const uint8_t* const ref_ptr[4],
+                                   int ref_stride,
+                                   uint32_t sad_array[4]);
+
 void aom_sad16x8x4d_c(const uint8_t* src_ptr,
                       int src_stride,
                       const uint8_t* const ref_ptr[4],
@@ -5424,7 +5581,16 @@ void aom_sad16x8x4d_sse2(const uint8_t* src_ptr,
                          const uint8_t* const ref_ptr[4],
                          int ref_stride,
                          uint32_t sad_array[4]);
-#define aom_sad16x8x4d aom_sad16x8x4d_sse2
+void aom_sad16x8x4d_avx2(const uint8_t* src_ptr,
+                         int src_stride,
+                         const uint8_t* const ref_ptr[4],
+                         int ref_stride,
+                         uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad16x8x4d)(const uint8_t* src_ptr,
+                                   int src_stride,
+                                   const uint8_t* const ref_ptr[4],
+                                   int ref_stride,
+                                   uint32_t sad_array[4]);
 
 void aom_sad16x8x4d_avg_c(const uint8_t* src_ptr,
                           int src_stride,
@@ -5486,6 +5652,22 @@ RTCD_EXTERN unsigned int (*aom_sad32x16_avg)(const uint8_t* src_ptr,
                                              int ref_stride,
                                              const uint8_t* second_pred);
 
+void aom_sad32x16x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+void aom_sad32x16x3d_avx2(const uint8_t* src_ptr,
+                          int src_stride,
+                          const uint8_t* const ref_ptr[4],
+                          int ref_stride,
+                          uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad32x16x3d)(const uint8_t* src_ptr,
+                                    int src_stride,
+                                    const uint8_t* const ref_ptr[4],
+                                    int ref_stride,
+                                    uint32_t sad_array[4]);
+
 void aom_sad32x16x4d_c(const uint8_t* src_ptr,
                        int src_stride,
                        const uint8_t* const ref_ptr[4],
@@ -5553,6 +5735,22 @@ RTCD_EXTERN unsigned int (*aom_sad32x32_avg)(const uint8_t* src_ptr,
                                              int ref_stride,
                                              const uint8_t* second_pred);
 
+void aom_sad32x32x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+void aom_sad32x32x3d_avx2(const uint8_t* src_ptr,
+                          int src_stride,
+                          const uint8_t* const ref_ptr[4],
+                          int ref_stride,
+                          uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad32x32x3d)(const uint8_t* src_ptr,
+                                    int src_stride,
+                                    const uint8_t* const ref_ptr[4],
+                                    int ref_stride,
+                                    uint32_t sad_array[4]);
+
 void aom_sad32x32x4d_c(const uint8_t* src_ptr,
                        int src_stride,
                        const uint8_t* const ref_ptr[4],
@@ -5620,6 +5818,22 @@ RTCD_EXTERN unsigned int (*aom_sad32x64_avg)(const uint8_t* src_ptr,
                                              int ref_stride,
                                              const uint8_t* second_pred);
 
+void aom_sad32x64x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+void aom_sad32x64x3d_avx2(const uint8_t* src_ptr,
+                          int src_stride,
+                          const uint8_t* const ref_ptr[4],
+                          int ref_stride,
+                          uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad32x64x3d)(const uint8_t* src_ptr,
+                                    int src_stride,
+                                    const uint8_t* const ref_ptr[4],
+                                    int ref_stride,
+                                    uint32_t sad_array[4]);
+
 void aom_sad32x64x4d_c(const uint8_t* src_ptr,
                        int src_stride,
                        const uint8_t* const ref_ptr[4],
@@ -5685,6 +5899,13 @@ unsigned int aom_sad4x4_avg_sse2(const uint8_t* src_ptr,
                                  const uint8_t* second_pred);
 #define aom_sad4x4_avg aom_sad4x4_avg_sse2
 
+void aom_sad4x4x3d_c(const uint8_t* src_ptr,
+                     int src_stride,
+                     const uint8_t* const ref_ptr[4],
+                     int ref_stride,
+                     uint32_t sad_array[4]);
+#define aom_sad4x4x3d aom_sad4x4x3d_c
+
 void aom_sad4x4x4d_c(const uint8_t* src_ptr,
                      int src_stride,
                      const uint8_t* const ref_ptr[4],
@@ -5727,6 +5948,13 @@ unsigned int aom_sad4x8_avg_sse2(const uint8_t* src_ptr,
                                  const uint8_t* second_pred);
 #define aom_sad4x8_avg aom_sad4x8_avg_sse2
 
+void aom_sad4x8x3d_c(const uint8_t* src_ptr,
+                     int src_stride,
+                     const uint8_t* const ref_ptr[4],
+                     int ref_stride,
+                     uint32_t sad_array[4]);
+#define aom_sad4x8x3d aom_sad4x8x3d_c
+
 void aom_sad4x8x4d_c(const uint8_t* src_ptr,
                      int src_stride,
                      const uint8_t* const ref_ptr[4],
@@ -5799,6 +6027,22 @@ RTCD_EXTERN unsigned int (*aom_sad64x128_avg)(const uint8_t* src_ptr,
                                               int ref_stride,
                                               const uint8_t* second_pred);
 
+void aom_sad64x128x3d_c(const uint8_t* src_ptr,
+                        int src_stride,
+                        const uint8_t* const ref_ptr[4],
+                        int ref_stride,
+                        uint32_t sad_array[4]);
+void aom_sad64x128x3d_avx2(const uint8_t* src_ptr,
+                           int src_stride,
+                           const uint8_t* const ref_ptr[4],
+                           int ref_stride,
+                           uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad64x128x3d)(const uint8_t* src_ptr,
+                                     int src_stride,
+                                     const uint8_t* const ref_ptr[4],
+                                     int ref_stride,
+                                     uint32_t sad_array[4]);
+
 void aom_sad64x128x4d_c(const uint8_t* src_ptr,
                         int src_stride,
                         const uint8_t* const ref_ptr[4],
@@ -5866,6 +6110,22 @@ RTCD_EXTERN unsigned int (*aom_sad64x32_avg)(const uint8_t* src_ptr,
                                              int ref_stride,
                                              const uint8_t* second_pred);
 
+void aom_sad64x32x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+void aom_sad64x32x3d_avx2(const uint8_t* src_ptr,
+                          int src_stride,
+                          const uint8_t* const ref_ptr[4],
+                          int ref_stride,
+                          uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad64x32x3d)(const uint8_t* src_ptr,
+                                    int src_stride,
+                                    const uint8_t* const ref_ptr[4],
+                                    int ref_stride,
+                                    uint32_t sad_array[4]);
+
 void aom_sad64x32x4d_c(const uint8_t* src_ptr,
                        int src_stride,
                        const uint8_t* const ref_ptr[4],
@@ -5933,6 +6193,22 @@ RTCD_EXTERN unsigned int (*aom_sad64x64_avg)(const uint8_t* src_ptr,
                                              int ref_stride,
                                              const uint8_t* second_pred);
 
+void aom_sad64x64x3d_c(const uint8_t* src_ptr,
+                       int src_stride,
+                       const uint8_t* const ref_ptr[4],
+                       int ref_stride,
+                       uint32_t sad_array[4]);
+void aom_sad64x64x3d_avx2(const uint8_t* src_ptr,
+                          int src_stride,
+                          const uint8_t* const ref_ptr[4],
+                          int ref_stride,
+                          uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad64x64x3d)(const uint8_t* src_ptr,
+                                    int src_stride,
+                                    const uint8_t* const ref_ptr[4],
+                                    int ref_stride,
+                                    uint32_t sad_array[4]);
+
 void aom_sad64x64x4d_c(const uint8_t* src_ptr,
                        int src_stride,
                        const uint8_t* const ref_ptr[4],
@@ -5998,6 +6274,13 @@ unsigned int aom_sad8x16_avg_sse2(const uint8_t* src_ptr,
                                   const uint8_t* second_pred);
 #define aom_sad8x16_avg aom_sad8x16_avg_sse2
 
+void aom_sad8x16x3d_c(const uint8_t* src_ptr,
+                      int src_stride,
+                      const uint8_t* const ref_ptr[4],
+                      int ref_stride,
+                      uint32_t sad_array[4]);
+#define aom_sad8x16x3d aom_sad8x16x3d_c
+
 void aom_sad8x16x4d_c(const uint8_t* src_ptr,
                       int src_stride,
                       const uint8_t* const ref_ptr[4],
@@ -6040,6 +6323,13 @@ unsigned int aom_sad8x4_avg_sse2(const uint8_t* src_ptr,
                                  const uint8_t* second_pred);
 #define aom_sad8x4_avg aom_sad8x4_avg_sse2
 
+void aom_sad8x4x3d_c(const uint8_t* src_ptr,
+                     int src_stride,
+                     const uint8_t* const ref_ptr[4],
+                     int ref_stride,
+                     uint32_t sad_array[4]);
+#define aom_sad8x4x3d aom_sad8x4x3d_c
+
 void aom_sad8x4x4d_c(const uint8_t* src_ptr,
                      int src_stride,
                      const uint8_t* const ref_ptr[4],
@@ -6082,6 +6372,13 @@ unsigned int aom_sad8x8_avg_sse2(const uint8_t* src_ptr,
                                  const uint8_t* second_pred);
 #define aom_sad8x8_avg aom_sad8x8_avg_sse2
 
+void aom_sad8x8x3d_c(const uint8_t* src_ptr,
+                     int src_stride,
+                     const uint8_t* const ref_ptr[4],
+                     int ref_stride,
+                     uint32_t sad_array[4]);
+#define aom_sad8x8x3d aom_sad8x8x3d_c
+
 void aom_sad8x8x4d_c(const uint8_t* src_ptr,
                      int src_stride,
                      const uint8_t* const ref_ptr[4],
@@ -6212,7 +6509,16 @@ void aom_sad_skip_16x16x4d_sse2(const uint8_t* src_ptr,
                                 const uint8_t* const ref_ptr[4],
                                 int ref_stride,
                                 uint32_t sad_array[4]);
-#define aom_sad_skip_16x16x4d aom_sad_skip_16x16x4d_sse2
+void aom_sad_skip_16x16x4d_avx2(const uint8_t* src_ptr,
+                                int src_stride,
+                                const uint8_t* const ref_ptr[4],
+                                int ref_stride,
+                                uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad_skip_16x16x4d)(const uint8_t* src_ptr,
+                                          int src_stride,
+                                          const uint8_t* const ref_ptr[4],
+                                          int ref_stride,
+                                          uint32_t sad_array[4]);
 
 unsigned int aom_sad_skip_16x32_c(const uint8_t* src_ptr,
                                   int src_stride,
@@ -6234,7 +6540,16 @@ void aom_sad_skip_16x32x4d_sse2(const uint8_t* src_ptr,
                                 const uint8_t* const ref_ptr[4],
                                 int ref_stride,
                                 uint32_t sad_array[4]);
-#define aom_sad_skip_16x32x4d aom_sad_skip_16x32x4d_sse2
+void aom_sad_skip_16x32x4d_avx2(const uint8_t* src_ptr,
+                                int src_stride,
+                                const uint8_t* const ref_ptr[4],
+                                int ref_stride,
+                                uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad_skip_16x32x4d)(const uint8_t* src_ptr,
+                                          int src_stride,
+                                          const uint8_t* const ref_ptr[4],
+                                          int ref_stride,
+                                          uint32_t sad_array[4]);
 
 unsigned int aom_sad_skip_16x8_c(const uint8_t* src_ptr,
                                  int src_stride,
@@ -6256,7 +6571,16 @@ void aom_sad_skip_16x8x4d_sse2(const uint8_t* src_ptr,
                                const uint8_t* const ref_ptr[4],
                                int ref_stride,
                                uint32_t sad_array[4]);
-#define aom_sad_skip_16x8x4d aom_sad_skip_16x8x4d_sse2
+void aom_sad_skip_16x8x4d_avx2(const uint8_t* src_ptr,
+                               int src_stride,
+                               const uint8_t* const ref_ptr[4],
+                               int ref_stride,
+                               uint32_t sad_array[4]);
+RTCD_EXTERN void (*aom_sad_skip_16x8x4d)(const uint8_t* src_ptr,
+                                         int src_stride,
+                                         const uint8_t* const ref_ptr[4],
+                                         int ref_stride,
+                                         uint32_t sad_array[4]);
 
 unsigned int aom_sad_skip_32x16_c(const uint8_t* src_ptr,
                                   int src_stride,
@@ -9204,13 +9528,12 @@ unsigned int aom_variance8x8_sse2(const uint8_t* src_ptr,
                                   unsigned int* sse);
 #define aom_variance8x8 aom_variance8x8_sse2
 
-int aom_vector_var_c(const int16_t* ref, const int16_t* src, const int bwl);
-int aom_vector_var_sse4_1(const int16_t* ref,
-                          const int16_t* src,
-                          const int bwl);
+int aom_vector_var_c(const int16_t* ref, const int16_t* src, int bwl);
+int aom_vector_var_sse4_1(const int16_t* ref, const int16_t* src, int bwl);
+int aom_vector_var_avx2(const int16_t* ref, const int16_t* src, int bwl);
 RTCD_EXTERN int (*aom_vector_var)(const int16_t* ref,
                                   const int16_t* src,
-                                  const int bwl);
+                                  int bwl);
 
 void aom_dsp_rtcd(void);
 
@@ -9222,1101 +9545,1550 @@ static void setup_rtcd_internal(void) {
   (void)flags;
 
   aom_avg_8x8_quad = aom_avg_8x8_quad_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_avg_8x8_quad = aom_avg_8x8_quad_avx2;
+  }
   aom_blend_a64_hmask = aom_blend_a64_hmask_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     aom_blend_a64_hmask = aom_blend_a64_hmask_sse4_1;
+  }
   aom_blend_a64_mask = aom_blend_a64_mask_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     aom_blend_a64_mask = aom_blend_a64_mask_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_blend_a64_mask = aom_blend_a64_mask_avx2;
+  }
   aom_blend_a64_vmask = aom_blend_a64_vmask_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     aom_blend_a64_vmask = aom_blend_a64_vmask_sse4_1;
+  }
   aom_comp_mask_pred = aom_comp_mask_pred_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_comp_mask_pred = aom_comp_mask_pred_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_comp_mask_pred = aom_comp_mask_pred_avx2;
+  }
   aom_convolve8_horiz = aom_convolve8_horiz_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_convolve8_horiz = aom_convolve8_horiz_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_convolve8_horiz = aom_convolve8_horiz_avx2;
+  }
   aom_convolve8_vert = aom_convolve8_vert_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_convolve8_vert = aom_convolve8_vert_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_convolve8_vert = aom_convolve8_vert_avx2;
+  }
   aom_convolve_copy = aom_convolve_copy_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_convolve_copy = aom_convolve_copy_avx2;
+  }
   aom_dc_128_predictor_32x16 = aom_dc_128_predictor_32x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_128_predictor_32x16 = aom_dc_128_predictor_32x16_avx2;
+  }
   aom_dc_128_predictor_32x32 = aom_dc_128_predictor_32x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_128_predictor_32x32 = aom_dc_128_predictor_32x32_avx2;
+  }
   aom_dc_128_predictor_32x64 = aom_dc_128_predictor_32x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_128_predictor_32x64 = aom_dc_128_predictor_32x64_avx2;
+  }
   aom_dc_128_predictor_64x16 = aom_dc_128_predictor_64x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_128_predictor_64x16 = aom_dc_128_predictor_64x16_avx2;
+  }
   aom_dc_128_predictor_64x32 = aom_dc_128_predictor_64x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_128_predictor_64x32 = aom_dc_128_predictor_64x32_avx2;
+  }
   aom_dc_128_predictor_64x64 = aom_dc_128_predictor_64x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_128_predictor_64x64 = aom_dc_128_predictor_64x64_avx2;
+  }
   aom_dc_left_predictor_32x16 = aom_dc_left_predictor_32x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_left_predictor_32x16 = aom_dc_left_predictor_32x16_avx2;
+  }
   aom_dc_left_predictor_32x32 = aom_dc_left_predictor_32x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_left_predictor_32x32 = aom_dc_left_predictor_32x32_avx2;
+  }
   aom_dc_left_predictor_32x64 = aom_dc_left_predictor_32x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_left_predictor_32x64 = aom_dc_left_predictor_32x64_avx2;
+  }
   aom_dc_left_predictor_64x16 = aom_dc_left_predictor_64x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_left_predictor_64x16 = aom_dc_left_predictor_64x16_avx2;
+  }
   aom_dc_left_predictor_64x32 = aom_dc_left_predictor_64x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_left_predictor_64x32 = aom_dc_left_predictor_64x32_avx2;
+  }
   aom_dc_left_predictor_64x64 = aom_dc_left_predictor_64x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_left_predictor_64x64 = aom_dc_left_predictor_64x64_avx2;
+  }
   aom_dc_predictor_32x16 = aom_dc_predictor_32x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_predictor_32x16 = aom_dc_predictor_32x16_avx2;
+  }
   aom_dc_predictor_32x32 = aom_dc_predictor_32x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_predictor_32x32 = aom_dc_predictor_32x32_avx2;
+  }
   aom_dc_predictor_32x64 = aom_dc_predictor_32x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_predictor_32x64 = aom_dc_predictor_32x64_avx2;
+  }
   aom_dc_predictor_64x16 = aom_dc_predictor_64x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_predictor_64x16 = aom_dc_predictor_64x16_avx2;
+  }
   aom_dc_predictor_64x32 = aom_dc_predictor_64x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_predictor_64x32 = aom_dc_predictor_64x32_avx2;
+  }
   aom_dc_predictor_64x64 = aom_dc_predictor_64x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_predictor_64x64 = aom_dc_predictor_64x64_avx2;
+  }
   aom_dc_top_predictor_32x16 = aom_dc_top_predictor_32x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_top_predictor_32x16 = aom_dc_top_predictor_32x16_avx2;
+  }
   aom_dc_top_predictor_32x32 = aom_dc_top_predictor_32x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_top_predictor_32x32 = aom_dc_top_predictor_32x32_avx2;
+  }
   aom_dc_top_predictor_32x64 = aom_dc_top_predictor_32x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_top_predictor_32x64 = aom_dc_top_predictor_32x64_avx2;
+  }
   aom_dc_top_predictor_64x16 = aom_dc_top_predictor_64x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_top_predictor_64x16 = aom_dc_top_predictor_64x16_avx2;
+  }
   aom_dc_top_predictor_64x32 = aom_dc_top_predictor_64x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_top_predictor_64x32 = aom_dc_top_predictor_64x32_avx2;
+  }
   aom_dc_top_predictor_64x64 = aom_dc_top_predictor_64x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_dc_top_predictor_64x64 = aom_dc_top_predictor_64x64_avx2;
+  }
   aom_dist_wtd_comp_avg_pred = aom_dist_wtd_comp_avg_pred_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_comp_avg_pred = aom_dist_wtd_comp_avg_pred_ssse3;
+  }
   aom_dist_wtd_sad128x128_avg = aom_dist_wtd_sad128x128_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad128x128_avg = aom_dist_wtd_sad128x128_avg_ssse3;
+  }
   aom_dist_wtd_sad128x64_avg = aom_dist_wtd_sad128x64_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad128x64_avg = aom_dist_wtd_sad128x64_avg_ssse3;
+  }
   aom_dist_wtd_sad16x16_avg = aom_dist_wtd_sad16x16_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad16x16_avg = aom_dist_wtd_sad16x16_avg_ssse3;
+  }
   aom_dist_wtd_sad16x32_avg = aom_dist_wtd_sad16x32_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad16x32_avg = aom_dist_wtd_sad16x32_avg_ssse3;
+  }
   aom_dist_wtd_sad16x8_avg = aom_dist_wtd_sad16x8_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad16x8_avg = aom_dist_wtd_sad16x8_avg_ssse3;
+  }
   aom_dist_wtd_sad32x16_avg = aom_dist_wtd_sad32x16_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad32x16_avg = aom_dist_wtd_sad32x16_avg_ssse3;
+  }
   aom_dist_wtd_sad32x32_avg = aom_dist_wtd_sad32x32_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad32x32_avg = aom_dist_wtd_sad32x32_avg_ssse3;
+  }
   aom_dist_wtd_sad32x64_avg = aom_dist_wtd_sad32x64_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad32x64_avg = aom_dist_wtd_sad32x64_avg_ssse3;
+  }
   aom_dist_wtd_sad4x4_avg = aom_dist_wtd_sad4x4_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad4x4_avg = aom_dist_wtd_sad4x4_avg_ssse3;
+  }
   aom_dist_wtd_sad4x8_avg = aom_dist_wtd_sad4x8_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad4x8_avg = aom_dist_wtd_sad4x8_avg_ssse3;
+  }
   aom_dist_wtd_sad64x128_avg = aom_dist_wtd_sad64x128_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad64x128_avg = aom_dist_wtd_sad64x128_avg_ssse3;
+  }
   aom_dist_wtd_sad64x32_avg = aom_dist_wtd_sad64x32_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad64x32_avg = aom_dist_wtd_sad64x32_avg_ssse3;
+  }
   aom_dist_wtd_sad64x64_avg = aom_dist_wtd_sad64x64_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad64x64_avg = aom_dist_wtd_sad64x64_avg_ssse3;
+  }
   aom_dist_wtd_sad8x16_avg = aom_dist_wtd_sad8x16_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad8x16_avg = aom_dist_wtd_sad8x16_avg_ssse3;
+  }
   aom_dist_wtd_sad8x4_avg = aom_dist_wtd_sad8x4_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad8x4_avg = aom_dist_wtd_sad8x4_avg_ssse3;
+  }
   aom_dist_wtd_sad8x8_avg = aom_dist_wtd_sad8x8_avg_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sad8x8_avg = aom_dist_wtd_sad8x8_avg_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance128x128 =
       aom_dist_wtd_sub_pixel_avg_variance128x128_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance128x128 =
         aom_dist_wtd_sub_pixel_avg_variance128x128_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance128x64 =
       aom_dist_wtd_sub_pixel_avg_variance128x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance128x64 =
         aom_dist_wtd_sub_pixel_avg_variance128x64_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance16x16 =
       aom_dist_wtd_sub_pixel_avg_variance16x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance16x16 =
         aom_dist_wtd_sub_pixel_avg_variance16x16_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance16x32 =
       aom_dist_wtd_sub_pixel_avg_variance16x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance16x32 =
         aom_dist_wtd_sub_pixel_avg_variance16x32_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance16x8 =
       aom_dist_wtd_sub_pixel_avg_variance16x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance16x8 =
         aom_dist_wtd_sub_pixel_avg_variance16x8_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance32x16 =
       aom_dist_wtd_sub_pixel_avg_variance32x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance32x16 =
         aom_dist_wtd_sub_pixel_avg_variance32x16_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance32x32 =
       aom_dist_wtd_sub_pixel_avg_variance32x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance32x32 =
         aom_dist_wtd_sub_pixel_avg_variance32x32_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance32x64 =
       aom_dist_wtd_sub_pixel_avg_variance32x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance32x64 =
         aom_dist_wtd_sub_pixel_avg_variance32x64_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance4x4 =
       aom_dist_wtd_sub_pixel_avg_variance4x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance4x4 =
         aom_dist_wtd_sub_pixel_avg_variance4x4_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance4x8 =
       aom_dist_wtd_sub_pixel_avg_variance4x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance4x8 =
         aom_dist_wtd_sub_pixel_avg_variance4x8_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance64x128 =
       aom_dist_wtd_sub_pixel_avg_variance64x128_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance64x128 =
         aom_dist_wtd_sub_pixel_avg_variance64x128_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance64x32 =
       aom_dist_wtd_sub_pixel_avg_variance64x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance64x32 =
         aom_dist_wtd_sub_pixel_avg_variance64x32_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance64x64 =
       aom_dist_wtd_sub_pixel_avg_variance64x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance64x64 =
         aom_dist_wtd_sub_pixel_avg_variance64x64_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance8x16 =
       aom_dist_wtd_sub_pixel_avg_variance8x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance8x16 =
         aom_dist_wtd_sub_pixel_avg_variance8x16_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance8x4 =
       aom_dist_wtd_sub_pixel_avg_variance8x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance8x4 =
         aom_dist_wtd_sub_pixel_avg_variance8x4_ssse3;
+  }
   aom_dist_wtd_sub_pixel_avg_variance8x8 =
       aom_dist_wtd_sub_pixel_avg_variance8x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_sub_pixel_avg_variance8x8 =
         aom_dist_wtd_sub_pixel_avg_variance8x8_ssse3;
+  }
   aom_fdct8x8 = aom_fdct8x8_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_fdct8x8 = aom_fdct8x8_ssse3;
+  }
   aom_fft16x16_float = aom_fft16x16_float_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_fft16x16_float = aom_fft16x16_float_avx2;
+  }
   aom_fft32x32_float = aom_fft32x32_float_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_fft32x32_float = aom_fft32x32_float_avx2;
+  }
   aom_fft8x8_float = aom_fft8x8_float_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_fft8x8_float = aom_fft8x8_float_avx2;
+  }
   aom_get_blk_sse_sum = aom_get_blk_sse_sum_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_get_blk_sse_sum = aom_get_blk_sse_sum_avx2;
-  aom_get_sse_sum_8x8_quad = aom_get_sse_sum_8x8_quad_sse2;
-  if (flags & HAS_AVX2)
-    aom_get_sse_sum_8x8_quad = aom_get_sse_sum_8x8_quad_avx2;
+  }
+  aom_get_var_sse_sum_16x16_dual = aom_get_var_sse_sum_16x16_dual_sse2;
+  if (flags & HAS_AVX2) {
+    aom_get_var_sse_sum_16x16_dual = aom_get_var_sse_sum_16x16_dual_avx2;
+  }
+  aom_get_var_sse_sum_8x8_quad = aom_get_var_sse_sum_8x8_quad_sse2;
+  if (flags & HAS_AVX2) {
+    aom_get_var_sse_sum_8x8_quad = aom_get_var_sse_sum_8x8_quad_avx2;
+  }
   aom_h_predictor_32x32 = aom_h_predictor_32x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_h_predictor_32x32 = aom_h_predictor_32x32_avx2;
+  }
   aom_hadamard_16x16 = aom_hadamard_16x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_hadamard_16x16 = aom_hadamard_16x16_avx2;
+  }
   aom_hadamard_32x32 = aom_hadamard_32x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_hadamard_32x32 = aom_hadamard_32x32_avx2;
+  }
   aom_hadamard_lp_16x16 = aom_hadamard_lp_16x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_hadamard_lp_16x16 = aom_hadamard_lp_16x16_avx2;
+  }
   aom_hadamard_lp_8x8_dual = aom_hadamard_lp_8x8_dual_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_hadamard_lp_8x8_dual = aom_hadamard_lp_8x8_dual_avx2;
+  }
   aom_ifft16x16_float = aom_ifft16x16_float_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_ifft16x16_float = aom_ifft16x16_float_avx2;
+  }
   aom_ifft32x32_float = aom_ifft32x32_float_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_ifft32x32_float = aom_ifft32x32_float_avx2;
+  }
   aom_ifft8x8_float = aom_ifft8x8_float_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_ifft8x8_float = aom_ifft8x8_float_avx2;
+  }
   aom_int_pro_col = aom_int_pro_col_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_int_pro_col = aom_int_pro_col_avx2;
+  }
   aom_int_pro_row = aom_int_pro_row_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_int_pro_row = aom_int_pro_row_avx2;
+  }
   aom_lowbd_blend_a64_d16_mask = aom_lowbd_blend_a64_d16_mask_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     aom_lowbd_blend_a64_d16_mask = aom_lowbd_blend_a64_d16_mask_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_lowbd_blend_a64_d16_mask = aom_lowbd_blend_a64_d16_mask_avx2;
+  }
   aom_lpf_horizontal_14_quad = aom_lpf_horizontal_14_quad_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_lpf_horizontal_14_quad = aom_lpf_horizontal_14_quad_avx2;
+  }
   aom_lpf_horizontal_6_quad = aom_lpf_horizontal_6_quad_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_lpf_horizontal_6_quad = aom_lpf_horizontal_6_quad_avx2;
+  }
   aom_lpf_horizontal_8_quad = aom_lpf_horizontal_8_quad_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_lpf_horizontal_8_quad = aom_lpf_horizontal_8_quad_avx2;
+  }
+  aom_lpf_vertical_14_quad = aom_lpf_vertical_14_quad_sse2;
+  if (flags & HAS_AVX2) {
+    aom_lpf_vertical_14_quad = aom_lpf_vertical_14_quad_avx2;
+  }
   aom_masked_sad128x128 = aom_masked_sad128x128_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad128x128 = aom_masked_sad128x128_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad128x128 = aom_masked_sad128x128_avx2;
+  }
   aom_masked_sad128x128x4d = aom_masked_sad128x128x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad128x128x4d = aom_masked_sad128x128x4d_ssse3;
+  }
   aom_masked_sad128x64 = aom_masked_sad128x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad128x64 = aom_masked_sad128x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad128x64 = aom_masked_sad128x64_avx2;
+  }
   aom_masked_sad128x64x4d = aom_masked_sad128x64x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad128x64x4d = aom_masked_sad128x64x4d_ssse3;
+  }
   aom_masked_sad16x16 = aom_masked_sad16x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad16x16 = aom_masked_sad16x16_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad16x16 = aom_masked_sad16x16_avx2;
+  }
   aom_masked_sad16x16x4d = aom_masked_sad16x16x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad16x16x4d = aom_masked_sad16x16x4d_ssse3;
+  }
   aom_masked_sad16x32 = aom_masked_sad16x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad16x32 = aom_masked_sad16x32_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad16x32 = aom_masked_sad16x32_avx2;
+  }
   aom_masked_sad16x32x4d = aom_masked_sad16x32x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad16x32x4d = aom_masked_sad16x32x4d_ssse3;
+  }
   aom_masked_sad16x8 = aom_masked_sad16x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad16x8 = aom_masked_sad16x8_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad16x8 = aom_masked_sad16x8_avx2;
+  }
   aom_masked_sad16x8x4d = aom_masked_sad16x8x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad16x8x4d = aom_masked_sad16x8x4d_ssse3;
+  }
   aom_masked_sad32x16 = aom_masked_sad32x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad32x16 = aom_masked_sad32x16_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad32x16 = aom_masked_sad32x16_avx2;
+  }
   aom_masked_sad32x16x4d = aom_masked_sad32x16x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad32x16x4d = aom_masked_sad32x16x4d_ssse3;
+  }
   aom_masked_sad32x32 = aom_masked_sad32x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad32x32 = aom_masked_sad32x32_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad32x32 = aom_masked_sad32x32_avx2;
+  }
   aom_masked_sad32x32x4d = aom_masked_sad32x32x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad32x32x4d = aom_masked_sad32x32x4d_ssse3;
+  }
   aom_masked_sad32x64 = aom_masked_sad32x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad32x64 = aom_masked_sad32x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad32x64 = aom_masked_sad32x64_avx2;
+  }
   aom_masked_sad32x64x4d = aom_masked_sad32x64x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad32x64x4d = aom_masked_sad32x64x4d_ssse3;
+  }
   aom_masked_sad4x4 = aom_masked_sad4x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad4x4 = aom_masked_sad4x4_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad4x4 = aom_masked_sad4x4_avx2;
+  }
   aom_masked_sad4x4x4d = aom_masked_sad4x4x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad4x4x4d = aom_masked_sad4x4x4d_ssse3;
+  }
   aom_masked_sad4x8 = aom_masked_sad4x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad4x8 = aom_masked_sad4x8_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad4x8 = aom_masked_sad4x8_avx2;
+  }
   aom_masked_sad4x8x4d = aom_masked_sad4x8x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad4x8x4d = aom_masked_sad4x8x4d_ssse3;
+  }
   aom_masked_sad64x128 = aom_masked_sad64x128_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad64x128 = aom_masked_sad64x128_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad64x128 = aom_masked_sad64x128_avx2;
+  }
   aom_masked_sad64x128x4d = aom_masked_sad64x128x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad64x128x4d = aom_masked_sad64x128x4d_ssse3;
+  }
   aom_masked_sad64x32 = aom_masked_sad64x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad64x32 = aom_masked_sad64x32_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad64x32 = aom_masked_sad64x32_avx2;
+  }
   aom_masked_sad64x32x4d = aom_masked_sad64x32x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad64x32x4d = aom_masked_sad64x32x4d_ssse3;
+  }
   aom_masked_sad64x64 = aom_masked_sad64x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad64x64 = aom_masked_sad64x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad64x64 = aom_masked_sad64x64_avx2;
+  }
   aom_masked_sad64x64x4d = aom_masked_sad64x64x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad64x64x4d = aom_masked_sad64x64x4d_ssse3;
+  }
   aom_masked_sad8x16 = aom_masked_sad8x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad8x16 = aom_masked_sad8x16_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad8x16 = aom_masked_sad8x16_avx2;
+  }
   aom_masked_sad8x16x4d = aom_masked_sad8x16x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad8x16x4d = aom_masked_sad8x16x4d_ssse3;
+  }
   aom_masked_sad8x4 = aom_masked_sad8x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad8x4 = aom_masked_sad8x4_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad8x4 = aom_masked_sad8x4_avx2;
+  }
   aom_masked_sad8x4x4d = aom_masked_sad8x4x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad8x4x4d = aom_masked_sad8x4x4d_ssse3;
+  }
   aom_masked_sad8x8 = aom_masked_sad8x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad8x8 = aom_masked_sad8x8_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_masked_sad8x8 = aom_masked_sad8x8_avx2;
+  }
   aom_masked_sad8x8x4d = aom_masked_sad8x8x4d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sad8x8x4d = aom_masked_sad8x8x4d_ssse3;
+  }
   aom_masked_sub_pixel_variance128x128 = aom_masked_sub_pixel_variance128x128_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance128x128 =
         aom_masked_sub_pixel_variance128x128_ssse3;
+  }
   aom_masked_sub_pixel_variance128x64 = aom_masked_sub_pixel_variance128x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance128x64 =
         aom_masked_sub_pixel_variance128x64_ssse3;
+  }
   aom_masked_sub_pixel_variance16x16 = aom_masked_sub_pixel_variance16x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance16x16 =
         aom_masked_sub_pixel_variance16x16_ssse3;
+  }
   aom_masked_sub_pixel_variance16x32 = aom_masked_sub_pixel_variance16x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance16x32 =
         aom_masked_sub_pixel_variance16x32_ssse3;
+  }
   aom_masked_sub_pixel_variance16x8 = aom_masked_sub_pixel_variance16x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance16x8 = aom_masked_sub_pixel_variance16x8_ssse3;
+  }
   aom_masked_sub_pixel_variance32x16 = aom_masked_sub_pixel_variance32x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance32x16 =
         aom_masked_sub_pixel_variance32x16_ssse3;
+  }
   aom_masked_sub_pixel_variance32x32 = aom_masked_sub_pixel_variance32x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance32x32 =
         aom_masked_sub_pixel_variance32x32_ssse3;
+  }
   aom_masked_sub_pixel_variance32x64 = aom_masked_sub_pixel_variance32x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance32x64 =
         aom_masked_sub_pixel_variance32x64_ssse3;
+  }
   aom_masked_sub_pixel_variance4x4 = aom_masked_sub_pixel_variance4x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance4x4 = aom_masked_sub_pixel_variance4x4_ssse3;
+  }
   aom_masked_sub_pixel_variance4x8 = aom_masked_sub_pixel_variance4x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance4x8 = aom_masked_sub_pixel_variance4x8_ssse3;
+  }
   aom_masked_sub_pixel_variance64x128 = aom_masked_sub_pixel_variance64x128_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance64x128 =
         aom_masked_sub_pixel_variance64x128_ssse3;
+  }
   aom_masked_sub_pixel_variance64x32 = aom_masked_sub_pixel_variance64x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance64x32 =
         aom_masked_sub_pixel_variance64x32_ssse3;
+  }
   aom_masked_sub_pixel_variance64x64 = aom_masked_sub_pixel_variance64x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance64x64 =
         aom_masked_sub_pixel_variance64x64_ssse3;
+  }
   aom_masked_sub_pixel_variance8x16 = aom_masked_sub_pixel_variance8x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance8x16 = aom_masked_sub_pixel_variance8x16_ssse3;
+  }
   aom_masked_sub_pixel_variance8x4 = aom_masked_sub_pixel_variance8x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance8x4 = aom_masked_sub_pixel_variance8x4_ssse3;
+  }
   aom_masked_sub_pixel_variance8x8 = aom_masked_sub_pixel_variance8x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_masked_sub_pixel_variance8x8 = aom_masked_sub_pixel_variance8x8_ssse3;
+  }
   aom_mse16x16 = aom_mse16x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_mse16x16 = aom_mse16x16_avx2;
-  aom_mse_16xh_16bit = aom_mse_16xh_16bit_c;
-  if (flags & HAS_AVX2)
+  }
+  aom_mse_16xh_16bit = aom_mse_16xh_16bit_sse2;
+  if (flags & HAS_AVX2) {
     aom_mse_16xh_16bit = aom_mse_16xh_16bit_avx2;
+  }
   aom_mse_wxh_16bit = aom_mse_wxh_16bit_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_mse_wxh_16bit = aom_mse_wxh_16bit_avx2;
+  }
   aom_paeth_predictor_16x16 = aom_paeth_predictor_16x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_16x16 = aom_paeth_predictor_16x16_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_paeth_predictor_16x16 = aom_paeth_predictor_16x16_avx2;
+  }
   aom_paeth_predictor_16x32 = aom_paeth_predictor_16x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_16x32 = aom_paeth_predictor_16x32_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_paeth_predictor_16x32 = aom_paeth_predictor_16x32_avx2;
+  }
   aom_paeth_predictor_16x4 = aom_paeth_predictor_16x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_16x4 = aom_paeth_predictor_16x4_ssse3;
+  }
   aom_paeth_predictor_16x64 = aom_paeth_predictor_16x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_16x64 = aom_paeth_predictor_16x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_paeth_predictor_16x64 = aom_paeth_predictor_16x64_avx2;
+  }
   aom_paeth_predictor_16x8 = aom_paeth_predictor_16x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_16x8 = aom_paeth_predictor_16x8_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_paeth_predictor_16x8 = aom_paeth_predictor_16x8_avx2;
+  }
   aom_paeth_predictor_32x16 = aom_paeth_predictor_32x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_32x16 = aom_paeth_predictor_32x16_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_paeth_predictor_32x16 = aom_paeth_predictor_32x16_avx2;
+  }
   aom_paeth_predictor_32x32 = aom_paeth_predictor_32x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_32x32 = aom_paeth_predictor_32x32_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_paeth_predictor_32x32 = aom_paeth_predictor_32x32_avx2;
+  }
   aom_paeth_predictor_32x64 = aom_paeth_predictor_32x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_32x64 = aom_paeth_predictor_32x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_paeth_predictor_32x64 = aom_paeth_predictor_32x64_avx2;
+  }
   aom_paeth_predictor_32x8 = aom_paeth_predictor_32x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_32x8 = aom_paeth_predictor_32x8_ssse3;
+  }
   aom_paeth_predictor_4x16 = aom_paeth_predictor_4x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_4x16 = aom_paeth_predictor_4x16_ssse3;
+  }
   aom_paeth_predictor_4x4 = aom_paeth_predictor_4x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_4x4 = aom_paeth_predictor_4x4_ssse3;
+  }
   aom_paeth_predictor_4x8 = aom_paeth_predictor_4x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_4x8 = aom_paeth_predictor_4x8_ssse3;
+  }
   aom_paeth_predictor_64x16 = aom_paeth_predictor_64x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_64x16 = aom_paeth_predictor_64x16_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_paeth_predictor_64x16 = aom_paeth_predictor_64x16_avx2;
+  }
   aom_paeth_predictor_64x32 = aom_paeth_predictor_64x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_64x32 = aom_paeth_predictor_64x32_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_paeth_predictor_64x32 = aom_paeth_predictor_64x32_avx2;
+  }
   aom_paeth_predictor_64x64 = aom_paeth_predictor_64x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_64x64 = aom_paeth_predictor_64x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_paeth_predictor_64x64 = aom_paeth_predictor_64x64_avx2;
+  }
   aom_paeth_predictor_8x16 = aom_paeth_predictor_8x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_8x16 = aom_paeth_predictor_8x16_ssse3;
+  }
   aom_paeth_predictor_8x32 = aom_paeth_predictor_8x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_8x32 = aom_paeth_predictor_8x32_ssse3;
+  }
   aom_paeth_predictor_8x4 = aom_paeth_predictor_8x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_8x4 = aom_paeth_predictor_8x4_ssse3;
+  }
   aom_paeth_predictor_8x8 = aom_paeth_predictor_8x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_paeth_predictor_8x8 = aom_paeth_predictor_8x8_ssse3;
+  }
   aom_quantize_b = aom_quantize_b_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_quantize_b = aom_quantize_b_ssse3;
-  if (flags & HAS_AVX)
+  }
+  if (flags & HAS_AVX) {
     aom_quantize_b = aom_quantize_b_avx;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_quantize_b = aom_quantize_b_avx2;
+  }
   aom_quantize_b_32x32 = aom_quantize_b_32x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_quantize_b_32x32 = aom_quantize_b_32x32_ssse3;
-  if (flags & HAS_AVX)
+  }
+  if (flags & HAS_AVX) {
     aom_quantize_b_32x32 = aom_quantize_b_32x32_avx;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_quantize_b_32x32 = aom_quantize_b_32x32_avx2;
+  }
   aom_quantize_b_64x64 = aom_quantize_b_64x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_quantize_b_64x64 = aom_quantize_b_64x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_quantize_b_64x64 = aom_quantize_b_64x64_avx2;
+  }
   aom_sad128x128 = aom_sad128x128_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad128x128 = aom_sad128x128_avx2;
+  }
   aom_sad128x128_avg = aom_sad128x128_avg_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad128x128_avg = aom_sad128x128_avg_avx2;
+  }
+  aom_sad128x128x3d = aom_sad128x128x3d_c;
+  if (flags & HAS_AVX2) {
+    aom_sad128x128x3d = aom_sad128x128x3d_avx2;
+  }
   aom_sad128x128x4d = aom_sad128x128x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad128x128x4d = aom_sad128x128x4d_avx2;
+  }
   aom_sad128x64 = aom_sad128x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad128x64 = aom_sad128x64_avx2;
+  }
   aom_sad128x64_avg = aom_sad128x64_avg_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad128x64_avg = aom_sad128x64_avg_avx2;
+  }
+  aom_sad128x64x3d = aom_sad128x64x3d_c;
+  if (flags & HAS_AVX2) {
+    aom_sad128x64x3d = aom_sad128x64x3d_avx2;
+  }
   aom_sad128x64x4d = aom_sad128x64x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad128x64x4d = aom_sad128x64x4d_avx2;
+  }
+  aom_sad16x16x3d = aom_sad16x16x3d_c;
+  if (flags & HAS_AVX2) {
+    aom_sad16x16x3d = aom_sad16x16x3d_avx2;
+  }
+  aom_sad16x16x4d = aom_sad16x16x4d_sse2;
+  if (flags & HAS_AVX2) {
+    aom_sad16x16x4d = aom_sad16x16x4d_avx2;
+  }
+  aom_sad16x32x3d = aom_sad16x32x3d_c;
+  if (flags & HAS_AVX2) {
+    aom_sad16x32x3d = aom_sad16x32x3d_avx2;
+  }
+  aom_sad16x32x4d = aom_sad16x32x4d_sse2;
+  if (flags & HAS_AVX2) {
+    aom_sad16x32x4d = aom_sad16x32x4d_avx2;
+  }
+  aom_sad16x8x3d = aom_sad16x8x3d_c;
+  if (flags & HAS_AVX2) {
+    aom_sad16x8x3d = aom_sad16x8x3d_avx2;
+  }
+  aom_sad16x8x4d = aom_sad16x8x4d_sse2;
+  if (flags & HAS_AVX2) {
+    aom_sad16x8x4d = aom_sad16x8x4d_avx2;
+  }
   aom_sad32x16 = aom_sad32x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad32x16 = aom_sad32x16_avx2;
+  }
   aom_sad32x16_avg = aom_sad32x16_avg_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad32x16_avg = aom_sad32x16_avg_avx2;
+  }
+  aom_sad32x16x3d = aom_sad32x16x3d_c;
+  if (flags & HAS_AVX2) {
+    aom_sad32x16x3d = aom_sad32x16x3d_avx2;
+  }
   aom_sad32x16x4d = aom_sad32x16x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad32x16x4d = aom_sad32x16x4d_avx2;
+  }
   aom_sad32x32 = aom_sad32x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad32x32 = aom_sad32x32_avx2;
+  }
   aom_sad32x32_avg = aom_sad32x32_avg_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad32x32_avg = aom_sad32x32_avg_avx2;
+  }
+  aom_sad32x32x3d = aom_sad32x32x3d_c;
+  if (flags & HAS_AVX2) {
+    aom_sad32x32x3d = aom_sad32x32x3d_avx2;
+  }
   aom_sad32x32x4d = aom_sad32x32x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad32x32x4d = aom_sad32x32x4d_avx2;
+  }
   aom_sad32x64 = aom_sad32x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad32x64 = aom_sad32x64_avx2;
+  }
   aom_sad32x64_avg = aom_sad32x64_avg_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad32x64_avg = aom_sad32x64_avg_avx2;
+  }
+  aom_sad32x64x3d = aom_sad32x64x3d_c;
+  if (flags & HAS_AVX2) {
+    aom_sad32x64x3d = aom_sad32x64x3d_avx2;
+  }
   aom_sad32x64x4d = aom_sad32x64x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad32x64x4d = aom_sad32x64x4d_avx2;
+  }
   aom_sad64x128 = aom_sad64x128_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad64x128 = aom_sad64x128_avx2;
+  }
   aom_sad64x128_avg = aom_sad64x128_avg_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad64x128_avg = aom_sad64x128_avg_avx2;
+  }
+  aom_sad64x128x3d = aom_sad64x128x3d_c;
+  if (flags & HAS_AVX2) {
+    aom_sad64x128x3d = aom_sad64x128x3d_avx2;
+  }
   aom_sad64x128x4d = aom_sad64x128x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad64x128x4d = aom_sad64x128x4d_avx2;
+  }
   aom_sad64x32 = aom_sad64x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad64x32 = aom_sad64x32_avx2;
+  }
   aom_sad64x32_avg = aom_sad64x32_avg_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad64x32_avg = aom_sad64x32_avg_avx2;
+  }
+  aom_sad64x32x3d = aom_sad64x32x3d_c;
+  if (flags & HAS_AVX2) {
+    aom_sad64x32x3d = aom_sad64x32x3d_avx2;
+  }
   aom_sad64x32x4d = aom_sad64x32x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad64x32x4d = aom_sad64x32x4d_avx2;
+  }
   aom_sad64x64 = aom_sad64x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad64x64 = aom_sad64x64_avx2;
+  }
   aom_sad64x64_avg = aom_sad64x64_avg_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad64x64_avg = aom_sad64x64_avg_avx2;
+  }
+  aom_sad64x64x3d = aom_sad64x64x3d_c;
+  if (flags & HAS_AVX2) {
+    aom_sad64x64x3d = aom_sad64x64x3d_avx2;
+  }
   aom_sad64x64x4d = aom_sad64x64x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad64x64x4d = aom_sad64x64x4d_avx2;
+  }
   aom_sad_skip_128x128 = aom_sad_skip_128x128_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_128x128 = aom_sad_skip_128x128_avx2;
+  }
   aom_sad_skip_128x128x4d = aom_sad_skip_128x128x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_128x128x4d = aom_sad_skip_128x128x4d_avx2;
+  }
   aom_sad_skip_128x64 = aom_sad_skip_128x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_128x64 = aom_sad_skip_128x64_avx2;
+  }
   aom_sad_skip_128x64x4d = aom_sad_skip_128x64x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_128x64x4d = aom_sad_skip_128x64x4d_avx2;
+  }
+  aom_sad_skip_16x16x4d = aom_sad_skip_16x16x4d_sse2;
+  if (flags & HAS_AVX2) {
+    aom_sad_skip_16x16x4d = aom_sad_skip_16x16x4d_avx2;
+  }
+  aom_sad_skip_16x32x4d = aom_sad_skip_16x32x4d_sse2;
+  if (flags & HAS_AVX2) {
+    aom_sad_skip_16x32x4d = aom_sad_skip_16x32x4d_avx2;
+  }
+  aom_sad_skip_16x8x4d = aom_sad_skip_16x8x4d_sse2;
+  if (flags & HAS_AVX2) {
+    aom_sad_skip_16x8x4d = aom_sad_skip_16x8x4d_avx2;
+  }
   aom_sad_skip_32x16 = aom_sad_skip_32x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_32x16 = aom_sad_skip_32x16_avx2;
+  }
   aom_sad_skip_32x16x4d = aom_sad_skip_32x16x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_32x16x4d = aom_sad_skip_32x16x4d_avx2;
+  }
   aom_sad_skip_32x32 = aom_sad_skip_32x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_32x32 = aom_sad_skip_32x32_avx2;
+  }
   aom_sad_skip_32x32x4d = aom_sad_skip_32x32x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_32x32x4d = aom_sad_skip_32x32x4d_avx2;
+  }
   aom_sad_skip_32x64 = aom_sad_skip_32x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_32x64 = aom_sad_skip_32x64_avx2;
+  }
   aom_sad_skip_32x64x4d = aom_sad_skip_32x64x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_32x64x4d = aom_sad_skip_32x64x4d_avx2;
+  }
   aom_sad_skip_64x128 = aom_sad_skip_64x128_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_64x128 = aom_sad_skip_64x128_avx2;
+  }
   aom_sad_skip_64x128x4d = aom_sad_skip_64x128x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_64x128x4d = aom_sad_skip_64x128x4d_avx2;
+  }
   aom_sad_skip_64x32 = aom_sad_skip_64x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_64x32 = aom_sad_skip_64x32_avx2;
+  }
   aom_sad_skip_64x32x4d = aom_sad_skip_64x32x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_64x32x4d = aom_sad_skip_64x32x4d_avx2;
+  }
   aom_sad_skip_64x64 = aom_sad_skip_64x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_64x64 = aom_sad_skip_64x64_avx2;
+  }
   aom_sad_skip_64x64x4d = aom_sad_skip_64x64x4d_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sad_skip_64x64x4d = aom_sad_skip_64x64x4d_avx2;
+  }
   aom_satd = aom_satd_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_satd = aom_satd_avx2;
+  }
   aom_satd_lp = aom_satd_lp_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_satd_lp = aom_satd_lp_avx2;
+  }
   aom_scaled_2d = aom_scaled_2d_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_scaled_2d = aom_scaled_2d_ssse3;
+  }
   aom_smooth_h_predictor_16x16 = aom_smooth_h_predictor_16x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_16x16 = aom_smooth_h_predictor_16x16_ssse3;
+  }
   aom_smooth_h_predictor_16x32 = aom_smooth_h_predictor_16x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_16x32 = aom_smooth_h_predictor_16x32_ssse3;
+  }
   aom_smooth_h_predictor_16x4 = aom_smooth_h_predictor_16x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_16x4 = aom_smooth_h_predictor_16x4_ssse3;
+  }
   aom_smooth_h_predictor_16x64 = aom_smooth_h_predictor_16x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_16x64 = aom_smooth_h_predictor_16x64_ssse3;
+  }
   aom_smooth_h_predictor_16x8 = aom_smooth_h_predictor_16x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_16x8 = aom_smooth_h_predictor_16x8_ssse3;
+  }
   aom_smooth_h_predictor_32x16 = aom_smooth_h_predictor_32x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_32x16 = aom_smooth_h_predictor_32x16_ssse3;
+  }
   aom_smooth_h_predictor_32x32 = aom_smooth_h_predictor_32x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_32x32 = aom_smooth_h_predictor_32x32_ssse3;
+  }
   aom_smooth_h_predictor_32x64 = aom_smooth_h_predictor_32x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_32x64 = aom_smooth_h_predictor_32x64_ssse3;
+  }
   aom_smooth_h_predictor_32x8 = aom_smooth_h_predictor_32x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_32x8 = aom_smooth_h_predictor_32x8_ssse3;
+  }
   aom_smooth_h_predictor_4x16 = aom_smooth_h_predictor_4x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_4x16 = aom_smooth_h_predictor_4x16_ssse3;
+  }
   aom_smooth_h_predictor_4x4 = aom_smooth_h_predictor_4x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_4x4 = aom_smooth_h_predictor_4x4_ssse3;
+  }
   aom_smooth_h_predictor_4x8 = aom_smooth_h_predictor_4x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_4x8 = aom_smooth_h_predictor_4x8_ssse3;
+  }
   aom_smooth_h_predictor_64x16 = aom_smooth_h_predictor_64x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_64x16 = aom_smooth_h_predictor_64x16_ssse3;
+  }
   aom_smooth_h_predictor_64x32 = aom_smooth_h_predictor_64x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_64x32 = aom_smooth_h_predictor_64x32_ssse3;
+  }
   aom_smooth_h_predictor_64x64 = aom_smooth_h_predictor_64x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_64x64 = aom_smooth_h_predictor_64x64_ssse3;
+  }
   aom_smooth_h_predictor_8x16 = aom_smooth_h_predictor_8x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_8x16 = aom_smooth_h_predictor_8x16_ssse3;
+  }
   aom_smooth_h_predictor_8x32 = aom_smooth_h_predictor_8x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_8x32 = aom_smooth_h_predictor_8x32_ssse3;
+  }
   aom_smooth_h_predictor_8x4 = aom_smooth_h_predictor_8x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_8x4 = aom_smooth_h_predictor_8x4_ssse3;
+  }
   aom_smooth_h_predictor_8x8 = aom_smooth_h_predictor_8x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_h_predictor_8x8 = aom_smooth_h_predictor_8x8_ssse3;
+  }
   aom_smooth_predictor_16x16 = aom_smooth_predictor_16x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_16x16 = aom_smooth_predictor_16x16_ssse3;
+  }
   aom_smooth_predictor_16x32 = aom_smooth_predictor_16x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_16x32 = aom_smooth_predictor_16x32_ssse3;
+  }
   aom_smooth_predictor_16x4 = aom_smooth_predictor_16x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_16x4 = aom_smooth_predictor_16x4_ssse3;
+  }
   aom_smooth_predictor_16x64 = aom_smooth_predictor_16x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_16x64 = aom_smooth_predictor_16x64_ssse3;
+  }
   aom_smooth_predictor_16x8 = aom_smooth_predictor_16x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_16x8 = aom_smooth_predictor_16x8_ssse3;
+  }
   aom_smooth_predictor_32x16 = aom_smooth_predictor_32x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_32x16 = aom_smooth_predictor_32x16_ssse3;
+  }
   aom_smooth_predictor_32x32 = aom_smooth_predictor_32x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_32x32 = aom_smooth_predictor_32x32_ssse3;
+  }
   aom_smooth_predictor_32x64 = aom_smooth_predictor_32x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_32x64 = aom_smooth_predictor_32x64_ssse3;
+  }
   aom_smooth_predictor_32x8 = aom_smooth_predictor_32x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_32x8 = aom_smooth_predictor_32x8_ssse3;
+  }
   aom_smooth_predictor_4x16 = aom_smooth_predictor_4x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_4x16 = aom_smooth_predictor_4x16_ssse3;
+  }
   aom_smooth_predictor_4x4 = aom_smooth_predictor_4x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_4x4 = aom_smooth_predictor_4x4_ssse3;
+  }
   aom_smooth_predictor_4x8 = aom_smooth_predictor_4x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_4x8 = aom_smooth_predictor_4x8_ssse3;
+  }
   aom_smooth_predictor_64x16 = aom_smooth_predictor_64x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_64x16 = aom_smooth_predictor_64x16_ssse3;
+  }
   aom_smooth_predictor_64x32 = aom_smooth_predictor_64x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_64x32 = aom_smooth_predictor_64x32_ssse3;
+  }
   aom_smooth_predictor_64x64 = aom_smooth_predictor_64x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_64x64 = aom_smooth_predictor_64x64_ssse3;
+  }
   aom_smooth_predictor_8x16 = aom_smooth_predictor_8x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_8x16 = aom_smooth_predictor_8x16_ssse3;
+  }
   aom_smooth_predictor_8x32 = aom_smooth_predictor_8x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_8x32 = aom_smooth_predictor_8x32_ssse3;
+  }
   aom_smooth_predictor_8x4 = aom_smooth_predictor_8x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_8x4 = aom_smooth_predictor_8x4_ssse3;
+  }
   aom_smooth_predictor_8x8 = aom_smooth_predictor_8x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_predictor_8x8 = aom_smooth_predictor_8x8_ssse3;
+  }
   aom_smooth_v_predictor_16x16 = aom_smooth_v_predictor_16x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_16x16 = aom_smooth_v_predictor_16x16_ssse3;
+  }
   aom_smooth_v_predictor_16x32 = aom_smooth_v_predictor_16x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_16x32 = aom_smooth_v_predictor_16x32_ssse3;
+  }
   aom_smooth_v_predictor_16x4 = aom_smooth_v_predictor_16x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_16x4 = aom_smooth_v_predictor_16x4_ssse3;
+  }
   aom_smooth_v_predictor_16x64 = aom_smooth_v_predictor_16x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_16x64 = aom_smooth_v_predictor_16x64_ssse3;
+  }
   aom_smooth_v_predictor_16x8 = aom_smooth_v_predictor_16x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_16x8 = aom_smooth_v_predictor_16x8_ssse3;
+  }
   aom_smooth_v_predictor_32x16 = aom_smooth_v_predictor_32x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_32x16 = aom_smooth_v_predictor_32x16_ssse3;
+  }
   aom_smooth_v_predictor_32x32 = aom_smooth_v_predictor_32x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_32x32 = aom_smooth_v_predictor_32x32_ssse3;
+  }
   aom_smooth_v_predictor_32x64 = aom_smooth_v_predictor_32x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_32x64 = aom_smooth_v_predictor_32x64_ssse3;
+  }
   aom_smooth_v_predictor_32x8 = aom_smooth_v_predictor_32x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_32x8 = aom_smooth_v_predictor_32x8_ssse3;
+  }
   aom_smooth_v_predictor_4x16 = aom_smooth_v_predictor_4x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_4x16 = aom_smooth_v_predictor_4x16_ssse3;
+  }
   aom_smooth_v_predictor_4x4 = aom_smooth_v_predictor_4x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_4x4 = aom_smooth_v_predictor_4x4_ssse3;
+  }
   aom_smooth_v_predictor_4x8 = aom_smooth_v_predictor_4x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_4x8 = aom_smooth_v_predictor_4x8_ssse3;
+  }
   aom_smooth_v_predictor_64x16 = aom_smooth_v_predictor_64x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_64x16 = aom_smooth_v_predictor_64x16_ssse3;
+  }
   aom_smooth_v_predictor_64x32 = aom_smooth_v_predictor_64x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_64x32 = aom_smooth_v_predictor_64x32_ssse3;
+  }
   aom_smooth_v_predictor_64x64 = aom_smooth_v_predictor_64x64_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_64x64 = aom_smooth_v_predictor_64x64_ssse3;
+  }
   aom_smooth_v_predictor_8x16 = aom_smooth_v_predictor_8x16_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_8x16 = aom_smooth_v_predictor_8x16_ssse3;
+  }
   aom_smooth_v_predictor_8x32 = aom_smooth_v_predictor_8x32_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_8x32 = aom_smooth_v_predictor_8x32_ssse3;
+  }
   aom_smooth_v_predictor_8x4 = aom_smooth_v_predictor_8x4_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_8x4 = aom_smooth_v_predictor_8x4_ssse3;
+  }
   aom_smooth_v_predictor_8x8 = aom_smooth_v_predictor_8x8_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_smooth_v_predictor_8x8 = aom_smooth_v_predictor_8x8_ssse3;
+  }
   aom_sse = aom_sse_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     aom_sse = aom_sse_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sse = aom_sse_avx2;
+  }
   aom_sub_pixel_avg_variance128x128 = aom_sub_pixel_avg_variance128x128_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance128x128 = aom_sub_pixel_avg_variance128x128_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_avg_variance128x128 = aom_sub_pixel_avg_variance128x128_avx2;
+  }
   aom_sub_pixel_avg_variance128x64 = aom_sub_pixel_avg_variance128x64_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance128x64 = aom_sub_pixel_avg_variance128x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_avg_variance128x64 = aom_sub_pixel_avg_variance128x64_avx2;
+  }
   aom_sub_pixel_avg_variance16x16 = aom_sub_pixel_avg_variance16x16_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance16x16 = aom_sub_pixel_avg_variance16x16_ssse3;
+  }
   aom_sub_pixel_avg_variance16x32 = aom_sub_pixel_avg_variance16x32_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance16x32 = aom_sub_pixel_avg_variance16x32_ssse3;
+  }
   aom_sub_pixel_avg_variance16x8 = aom_sub_pixel_avg_variance16x8_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance16x8 = aom_sub_pixel_avg_variance16x8_ssse3;
+  }
   aom_sub_pixel_avg_variance32x16 = aom_sub_pixel_avg_variance32x16_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance32x16 = aom_sub_pixel_avg_variance32x16_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_avg_variance32x16 = aom_sub_pixel_avg_variance32x16_avx2;
+  }
   aom_sub_pixel_avg_variance32x32 = aom_sub_pixel_avg_variance32x32_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance32x32 = aom_sub_pixel_avg_variance32x32_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_avg_variance32x32 = aom_sub_pixel_avg_variance32x32_avx2;
+  }
   aom_sub_pixel_avg_variance32x64 = aom_sub_pixel_avg_variance32x64_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance32x64 = aom_sub_pixel_avg_variance32x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_avg_variance32x64 = aom_sub_pixel_avg_variance32x64_avx2;
+  }
   aom_sub_pixel_avg_variance4x4 = aom_sub_pixel_avg_variance4x4_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance4x4 = aom_sub_pixel_avg_variance4x4_ssse3;
+  }
   aom_sub_pixel_avg_variance4x8 = aom_sub_pixel_avg_variance4x8_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance4x8 = aom_sub_pixel_avg_variance4x8_ssse3;
+  }
   aom_sub_pixel_avg_variance64x128 = aom_sub_pixel_avg_variance64x128_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance64x128 = aom_sub_pixel_avg_variance64x128_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_avg_variance64x128 = aom_sub_pixel_avg_variance64x128_avx2;
+  }
   aom_sub_pixel_avg_variance64x32 = aom_sub_pixel_avg_variance64x32_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance64x32 = aom_sub_pixel_avg_variance64x32_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_avg_variance64x32 = aom_sub_pixel_avg_variance64x32_avx2;
+  }
   aom_sub_pixel_avg_variance64x64 = aom_sub_pixel_avg_variance64x64_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance64x64 = aom_sub_pixel_avg_variance64x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_avg_variance64x64 = aom_sub_pixel_avg_variance64x64_avx2;
+  }
   aom_sub_pixel_avg_variance8x16 = aom_sub_pixel_avg_variance8x16_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance8x16 = aom_sub_pixel_avg_variance8x16_ssse3;
+  }
   aom_sub_pixel_avg_variance8x4 = aom_sub_pixel_avg_variance8x4_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance8x4 = aom_sub_pixel_avg_variance8x4_ssse3;
+  }
   aom_sub_pixel_avg_variance8x8 = aom_sub_pixel_avg_variance8x8_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_avg_variance8x8 = aom_sub_pixel_avg_variance8x8_ssse3;
+  }
   aom_sub_pixel_variance128x128 = aom_sub_pixel_variance128x128_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance128x128 = aom_sub_pixel_variance128x128_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_variance128x128 = aom_sub_pixel_variance128x128_avx2;
+  }
   aom_sub_pixel_variance128x64 = aom_sub_pixel_variance128x64_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance128x64 = aom_sub_pixel_variance128x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_variance128x64 = aom_sub_pixel_variance128x64_avx2;
+  }
   aom_sub_pixel_variance16x16 = aom_sub_pixel_variance16x16_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance16x16 = aom_sub_pixel_variance16x16_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_variance16x16 = aom_sub_pixel_variance16x16_avx2;
+  }
   aom_sub_pixel_variance16x32 = aom_sub_pixel_variance16x32_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance16x32 = aom_sub_pixel_variance16x32_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_variance16x32 = aom_sub_pixel_variance16x32_avx2;
+  }
   aom_sub_pixel_variance16x8 = aom_sub_pixel_variance16x8_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance16x8 = aom_sub_pixel_variance16x8_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_variance16x8 = aom_sub_pixel_variance16x8_avx2;
+  }
   aom_sub_pixel_variance32x16 = aom_sub_pixel_variance32x16_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance32x16 = aom_sub_pixel_variance32x16_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_variance32x16 = aom_sub_pixel_variance32x16_avx2;
+  }
   aom_sub_pixel_variance32x32 = aom_sub_pixel_variance32x32_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance32x32 = aom_sub_pixel_variance32x32_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_variance32x32 = aom_sub_pixel_variance32x32_avx2;
+  }
   aom_sub_pixel_variance32x64 = aom_sub_pixel_variance32x64_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance32x64 = aom_sub_pixel_variance32x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_variance32x64 = aom_sub_pixel_variance32x64_avx2;
+  }
   aom_sub_pixel_variance4x4 = aom_sub_pixel_variance4x4_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance4x4 = aom_sub_pixel_variance4x4_ssse3;
+  }
   aom_sub_pixel_variance4x8 = aom_sub_pixel_variance4x8_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance4x8 = aom_sub_pixel_variance4x8_ssse3;
+  }
   aom_sub_pixel_variance64x128 = aom_sub_pixel_variance64x128_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance64x128 = aom_sub_pixel_variance64x128_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_variance64x128 = aom_sub_pixel_variance64x128_avx2;
+  }
   aom_sub_pixel_variance64x32 = aom_sub_pixel_variance64x32_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance64x32 = aom_sub_pixel_variance64x32_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_variance64x32 = aom_sub_pixel_variance64x32_avx2;
+  }
   aom_sub_pixel_variance64x64 = aom_sub_pixel_variance64x64_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance64x64 = aom_sub_pixel_variance64x64_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     aom_sub_pixel_variance64x64 = aom_sub_pixel_variance64x64_avx2;
+  }
   aom_sub_pixel_variance8x16 = aom_sub_pixel_variance8x16_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance8x16 = aom_sub_pixel_variance8x16_ssse3;
+  }
   aom_sub_pixel_variance8x4 = aom_sub_pixel_variance8x4_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance8x4 = aom_sub_pixel_variance8x4_ssse3;
+  }
   aom_sub_pixel_variance8x8 = aom_sub_pixel_variance8x8_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_sub_pixel_variance8x8 = aom_sub_pixel_variance8x8_ssse3;
+  }
   aom_subtract_block = aom_subtract_block_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_subtract_block = aom_subtract_block_avx2;
+  }
   aom_sum_squares_2d_i16 = aom_sum_squares_2d_i16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sum_squares_2d_i16 = aom_sum_squares_2d_i16_avx2;
+  }
   aom_sum_sse_2d_i16 = aom_sum_sse_2d_i16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_sum_sse_2d_i16 = aom_sum_sse_2d_i16_avx2;
+  }
   aom_v_predictor_32x16 = aom_v_predictor_32x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_v_predictor_32x16 = aom_v_predictor_32x16_avx2;
+  }
   aom_v_predictor_32x32 = aom_v_predictor_32x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_v_predictor_32x32 = aom_v_predictor_32x32_avx2;
+  }
   aom_v_predictor_32x64 = aom_v_predictor_32x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_v_predictor_32x64 = aom_v_predictor_32x64_avx2;
+  }
   aom_v_predictor_64x16 = aom_v_predictor_64x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_v_predictor_64x16 = aom_v_predictor_64x16_avx2;
+  }
   aom_v_predictor_64x32 = aom_v_predictor_64x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_v_predictor_64x32 = aom_v_predictor_64x32_avx2;
+  }
   aom_v_predictor_64x64 = aom_v_predictor_64x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_v_predictor_64x64 = aom_v_predictor_64x64_avx2;
+  }
   aom_var_2d_u16 = aom_var_2d_u16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_var_2d_u16 = aom_var_2d_u16_avx2;
+  }
   aom_var_2d_u8 = aom_var_2d_u8_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_var_2d_u8 = aom_var_2d_u8_avx2;
+  }
   aom_variance128x128 = aom_variance128x128_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_variance128x128 = aom_variance128x128_avx2;
+  }
   aom_variance128x64 = aom_variance128x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_variance128x64 = aom_variance128x64_avx2;
+  }
   aom_variance16x16 = aom_variance16x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_variance16x16 = aom_variance16x16_avx2;
+  }
   aom_variance16x32 = aom_variance16x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_variance16x32 = aom_variance16x32_avx2;
+  }
   aom_variance16x8 = aom_variance16x8_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_variance16x8 = aom_variance16x8_avx2;
+  }
   aom_variance32x16 = aom_variance32x16_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_variance32x16 = aom_variance32x16_avx2;
+  }
   aom_variance32x32 = aom_variance32x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_variance32x32 = aom_variance32x32_avx2;
+  }
   aom_variance32x64 = aom_variance32x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_variance32x64 = aom_variance32x64_avx2;
+  }
   aom_variance64x128 = aom_variance64x128_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_variance64x128 = aom_variance64x128_avx2;
+  }
   aom_variance64x32 = aom_variance64x32_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_variance64x32 = aom_variance64x32_avx2;
+  }
   aom_variance64x64 = aom_variance64x64_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     aom_variance64x64 = aom_variance64x64_avx2;
+  }
   aom_vector_var = aom_vector_var_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     aom_vector_var = aom_vector_var_sse4_1;
+  }
+  if (flags & HAS_AVX2) {
+    aom_vector_var = aom_vector_var_avx2;
+  }
 }
 #endif
 
diff --git a/libaom/source/config/win/x64/config/aom_scale_rtcd.h b/libaom/source/config/win/x64/config/aom_scale_rtcd.h
index 5e6c033..ccd7baa 100644
--- a/libaom/source/config/win/x64/config/aom_scale_rtcd.h
+++ b/libaom/source/config/win/x64/config/aom_scale_rtcd.h
@@ -155,6 +155,7 @@ void aom_yv12_partial_copy_y_c(const struct yv12_buffer_config* src_ybc,
 int aom_yv12_realloc_with_new_border_c(struct yv12_buffer_config* ybf,
                                        int new_border,
                                        int byte_alignment,
+                                       int num_pyramid_levels,
                                        int num_planes);
 #define aom_yv12_realloc_with_new_border aom_yv12_realloc_with_new_border_c
 
diff --git a/libaom/source/config/win/x64/config/av1_rtcd.h b/libaom/source/config/win/x64/config/av1_rtcd.h
index 6d8a64d..05aae12 100644
--- a/libaom/source/config/win/x64/config/av1_rtcd.h
+++ b/libaom/source/config/win/x64/config/av1_rtcd.h
@@ -417,76 +417,56 @@ RTCD_EXTERN int64_t (*av1_calc_frame_error)(const uint8_t* const ref,
                                             int p_height,
                                             int p_stride);
 
-void av1_calc_indices_dim1_c(const int* data,
-                             const int* centroids,
+void av1_calc_indices_dim1_c(const int16_t* data,
+                             const int16_t* centroids,
                              uint8_t* indices,
+                             int64_t* total_dist,
                              int n,
                              int k);
-void av1_calc_indices_dim1_sse2(const int* data,
-                                const int* centroids,
+void av1_calc_indices_dim1_sse2(const int16_t* data,
+                                const int16_t* centroids,
                                 uint8_t* indices,
+                                int64_t* total_dist,
                                 int n,
                                 int k);
-void av1_calc_indices_dim1_avx2(const int* data,
-                                const int* centroids,
+void av1_calc_indices_dim1_avx2(const int16_t* data,
+                                const int16_t* centroids,
                                 uint8_t* indices,
+                                int64_t* total_dist,
                                 int n,
                                 int k);
-RTCD_EXTERN void (*av1_calc_indices_dim1)(const int* data,
-                                          const int* centroids,
+RTCD_EXTERN void (*av1_calc_indices_dim1)(const int16_t* data,
+                                          const int16_t* centroids,
                                           uint8_t* indices,
+                                          int64_t* total_dist,
                                           int n,
                                           int k);
 
-void av1_calc_indices_dim2_c(const int* data,
-                             const int* centroids,
+void av1_calc_indices_dim2_c(const int16_t* data,
+                             const int16_t* centroids,
                              uint8_t* indices,
+                             int64_t* total_dist,
                              int n,
                              int k);
-void av1_calc_indices_dim2_avx2(const int* data,
-                                const int* centroids,
+void av1_calc_indices_dim2_sse2(const int16_t* data,
+                                const int16_t* centroids,
                                 uint8_t* indices,
+                                int64_t* total_dist,
                                 int n,
                                 int k);
-RTCD_EXTERN void (*av1_calc_indices_dim2)(const int* data,
-                                          const int* centroids,
+void av1_calc_indices_dim2_avx2(const int16_t* data,
+                                const int16_t* centroids,
+                                uint8_t* indices,
+                                int64_t* total_dist,
+                                int n,
+                                int k);
+RTCD_EXTERN void (*av1_calc_indices_dim2)(const int16_t* data,
+                                          const int16_t* centroids,
                                           uint8_t* indices,
+                                          int64_t* total_dist,
                                           int n,
                                           int k);
 
-double av1_compute_cross_correlation_c(unsigned char* im1,
-                                       int stride1,
-                                       int x1,
-                                       int y1,
-                                       unsigned char* im2,
-                                       int stride2,
-                                       int x2,
-                                       int y2);
-double av1_compute_cross_correlation_sse4_1(unsigned char* im1,
-                                            int stride1,
-                                            int x1,
-                                            int y1,
-                                            unsigned char* im2,
-                                            int stride2,
-                                            int x2,
-                                            int y2);
-double av1_compute_cross_correlation_avx2(unsigned char* im1,
-                                          int stride1,
-                                          int x1,
-                                          int y1,
-                                          unsigned char* im2,
-                                          int stride2,
-                                          int x2,
-                                          int y2);
-RTCD_EXTERN double (*av1_compute_cross_correlation)(unsigned char* im1,
-                                                    int stride1,
-                                                    int x1,
-                                                    int y1,
-                                                    unsigned char* im2,
-                                                    int stride2,
-                                                    int x2,
-                                                    int y2);
-
 void av1_convolve_2d_scale_c(const uint8_t* src,
                              int src_stride,
                              uint8_t* dst,
@@ -1307,14 +1287,6 @@ void av1_get_nz_map_contexts_sse2(const uint8_t* const levels,
                                   int8_t* const coeff_contexts);
 #define av1_get_nz_map_contexts av1_get_nz_map_contexts_sse2
 
-void av1_highbd_fwht4x4_c(const int16_t* input, tran_low_t* output, int stride);
-void av1_highbd_fwht4x4_sse4_1(const int16_t* input,
-                               tran_low_t* output,
-                               int stride);
-RTCD_EXTERN void (*av1_highbd_fwht4x4)(const int16_t* input,
-                                       tran_low_t* output,
-                                       int stride);
-
 void av1_highbd_inv_txfm_add_c(const tran_low_t* input,
                                uint8_t* dest,
                                int stride,
@@ -2149,75 +2121,75 @@ void cdef_copy_rect8_16bit_to_16bit_c(uint16_t* dst,
                                       int dstride,
                                       const uint16_t* src,
                                       int sstride,
-                                      int v,
-                                      int h);
+                                      int width,
+                                      int height);
 void cdef_copy_rect8_16bit_to_16bit_sse2(uint16_t* dst,
                                          int dstride,
                                          const uint16_t* src,
                                          int sstride,
-                                         int v,
-                                         int h);
+                                         int width,
+                                         int height);
 void cdef_copy_rect8_16bit_to_16bit_ssse3(uint16_t* dst,
                                           int dstride,
                                           const uint16_t* src,
                                           int sstride,
-                                          int v,
-                                          int h);
+                                          int width,
+                                          int height);
 void cdef_copy_rect8_16bit_to_16bit_sse4_1(uint16_t* dst,
                                            int dstride,
                                            const uint16_t* src,
                                            int sstride,
-                                           int v,
-                                           int h);
+                                           int width,
+                                           int height);
 void cdef_copy_rect8_16bit_to_16bit_avx2(uint16_t* dst,
                                          int dstride,
                                          const uint16_t* src,
                                          int sstride,
-                                         int v,
-                                         int h);
+                                         int width,
+                                         int height);
 RTCD_EXTERN void (*cdef_copy_rect8_16bit_to_16bit)(uint16_t* dst,
                                                    int dstride,
                                                    const uint16_t* src,
                                                    int sstride,
-                                                   int v,
-                                                   int h);
+                                                   int width,
+                                                   int height);
 
 void cdef_copy_rect8_8bit_to_16bit_c(uint16_t* dst,
                                      int dstride,
                                      const uint8_t* src,
                                      int sstride,
-                                     int v,
-                                     int h);
+                                     int width,
+                                     int height);
 void cdef_copy_rect8_8bit_to_16bit_sse2(uint16_t* dst,
                                         int dstride,
                                         const uint8_t* src,
                                         int sstride,
-                                        int v,
-                                        int h);
+                                        int width,
+                                        int height);
 void cdef_copy_rect8_8bit_to_16bit_ssse3(uint16_t* dst,
                                          int dstride,
                                          const uint8_t* src,
                                          int sstride,
-                                         int v,
-                                         int h);
+                                         int width,
+                                         int height);
 void cdef_copy_rect8_8bit_to_16bit_sse4_1(uint16_t* dst,
                                           int dstride,
                                           const uint8_t* src,
                                           int sstride,
-                                          int v,
-                                          int h);
+                                          int width,
+                                          int height);
 void cdef_copy_rect8_8bit_to_16bit_avx2(uint16_t* dst,
                                         int dstride,
                                         const uint8_t* src,
                                         int sstride,
-                                        int v,
-                                        int h);
+                                        int width,
+                                        int height);
 RTCD_EXTERN void (*cdef_copy_rect8_8bit_to_16bit)(uint16_t* dst,
                                                   int dstride,
                                                   const uint8_t* src,
                                                   int sstride,
-                                                  int v,
-                                                  int h);
+                                                  int width,
+                                                  int height);
 
 void cdef_filter_16_0_c(void* dst16,
                         int dstride,
@@ -2868,373 +2840,500 @@ static void setup_rtcd_internal(void) {
   (void)flags;
 
   aom_dist_wtd_comp_avg_upsampled_pred = aom_dist_wtd_comp_avg_upsampled_pred_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     aom_dist_wtd_comp_avg_upsampled_pred =
         aom_dist_wtd_comp_avg_upsampled_pred_ssse3;
+  }
   av1_apply_selfguided_restoration = av1_apply_selfguided_restoration_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_apply_selfguided_restoration = av1_apply_selfguided_restoration_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_apply_selfguided_restoration = av1_apply_selfguided_restoration_avx2;
+  }
   av1_block_error = av1_block_error_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_block_error = av1_block_error_avx2;
+  }
   av1_block_error_lp = av1_block_error_lp_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_block_error_lp = av1_block_error_lp_avx2;
+  }
   av1_build_compound_diffwtd_mask = av1_build_compound_diffwtd_mask_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_build_compound_diffwtd_mask = av1_build_compound_diffwtd_mask_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_build_compound_diffwtd_mask = av1_build_compound_diffwtd_mask_avx2;
+  }
   av1_build_compound_diffwtd_mask_d16 = av1_build_compound_diffwtd_mask_d16_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_build_compound_diffwtd_mask_d16 =
         av1_build_compound_diffwtd_mask_d16_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_build_compound_diffwtd_mask_d16 =
         av1_build_compound_diffwtd_mask_d16_avx2;
+  }
   av1_calc_frame_error = av1_calc_frame_error_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_calc_frame_error = av1_calc_frame_error_avx2;
+  }
   av1_calc_indices_dim1 = av1_calc_indices_dim1_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_calc_indices_dim1 = av1_calc_indices_dim1_avx2;
-  av1_calc_indices_dim2 = av1_calc_indices_dim2_c;
-  if (flags & HAS_AVX2)
+  }
+  av1_calc_indices_dim2 = av1_calc_indices_dim2_sse2;
+  if (flags & HAS_AVX2) {
     av1_calc_indices_dim2 = av1_calc_indices_dim2_avx2;
-  av1_compute_cross_correlation = av1_compute_cross_correlation_c;
-  if (flags & HAS_SSE4_1)
-    av1_compute_cross_correlation = av1_compute_cross_correlation_sse4_1;
-  if (flags & HAS_AVX2)
-    av1_compute_cross_correlation = av1_compute_cross_correlation_avx2;
+  }
   av1_convolve_2d_scale = av1_convolve_2d_scale_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_convolve_2d_scale = av1_convolve_2d_scale_sse4_1;
+  }
   av1_convolve_2d_sr = av1_convolve_2d_sr_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_convolve_2d_sr = av1_convolve_2d_sr_avx2;
+  }
   av1_convolve_horiz_rs = av1_convolve_horiz_rs_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_convolve_horiz_rs = av1_convolve_horiz_rs_sse4_1;
+  }
   av1_convolve_x_sr = av1_convolve_x_sr_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_convolve_x_sr = av1_convolve_x_sr_avx2;
+  }
   av1_convolve_y_sr = av1_convolve_y_sr_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_convolve_y_sr = av1_convolve_y_sr_avx2;
+  }
   av1_dist_wtd_convolve_2d = av1_dist_wtd_convolve_2d_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     av1_dist_wtd_convolve_2d = av1_dist_wtd_convolve_2d_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_dist_wtd_convolve_2d = av1_dist_wtd_convolve_2d_avx2;
+  }
   av1_dist_wtd_convolve_2d_copy = av1_dist_wtd_convolve_2d_copy_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_dist_wtd_convolve_2d_copy = av1_dist_wtd_convolve_2d_copy_avx2;
+  }
   av1_dist_wtd_convolve_x = av1_dist_wtd_convolve_x_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_dist_wtd_convolve_x = av1_dist_wtd_convolve_x_avx2;
+  }
   av1_dist_wtd_convolve_y = av1_dist_wtd_convolve_y_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_dist_wtd_convolve_y = av1_dist_wtd_convolve_y_avx2;
+  }
   av1_dr_prediction_z1 = av1_dr_prediction_z1_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_dr_prediction_z1 = av1_dr_prediction_z1_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_dr_prediction_z1 = av1_dr_prediction_z1_avx2;
+  }
   av1_dr_prediction_z2 = av1_dr_prediction_z2_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_dr_prediction_z2 = av1_dr_prediction_z2_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_dr_prediction_z2 = av1_dr_prediction_z2_avx2;
+  }
   av1_dr_prediction_z3 = av1_dr_prediction_z3_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_dr_prediction_z3 = av1_dr_prediction_z3_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_dr_prediction_z3 = av1_dr_prediction_z3_avx2;
+  }
   av1_filter_intra_edge = av1_filter_intra_edge_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_filter_intra_edge = av1_filter_intra_edge_sse4_1;
+  }
   av1_filter_intra_edge_high = av1_filter_intra_edge_high_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_filter_intra_edge_high = av1_filter_intra_edge_high_sse4_1;
+  }
   av1_filter_intra_predictor = av1_filter_intra_predictor_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_filter_intra_predictor = av1_filter_intra_predictor_sse4_1;
+  }
   av1_fwd_txfm2d_16x16 = av1_fwd_txfm2d_16x16_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_16x16 = av1_fwd_txfm2d_16x16_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_fwd_txfm2d_16x16 = av1_fwd_txfm2d_16x16_avx2;
+  }
   av1_fwd_txfm2d_16x32 = av1_fwd_txfm2d_16x32_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_16x32 = av1_fwd_txfm2d_16x32_sse4_1;
+  }
   av1_fwd_txfm2d_16x4 = av1_fwd_txfm2d_16x4_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_16x4 = av1_fwd_txfm2d_16x4_sse4_1;
+  }
   av1_fwd_txfm2d_16x8 = av1_fwd_txfm2d_16x8_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_16x8 = av1_fwd_txfm2d_16x8_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_fwd_txfm2d_16x8 = av1_fwd_txfm2d_16x8_avx2;
+  }
   av1_fwd_txfm2d_32x16 = av1_fwd_txfm2d_32x16_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_32x16 = av1_fwd_txfm2d_32x16_sse4_1;
+  }
   av1_fwd_txfm2d_32x32 = av1_fwd_txfm2d_32x32_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_32x32 = av1_fwd_txfm2d_32x32_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_fwd_txfm2d_32x32 = av1_fwd_txfm2d_32x32_avx2;
+  }
   av1_fwd_txfm2d_32x64 = av1_fwd_txfm2d_32x64_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_32x64 = av1_fwd_txfm2d_32x64_sse4_1;
+  }
   av1_fwd_txfm2d_4x4 = av1_fwd_txfm2d_4x4_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_4x4 = av1_fwd_txfm2d_4x4_sse4_1;
+  }
   av1_fwd_txfm2d_4x8 = av1_fwd_txfm2d_4x8_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_4x8 = av1_fwd_txfm2d_4x8_sse4_1;
+  }
   av1_fwd_txfm2d_64x32 = av1_fwd_txfm2d_64x32_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_64x32 = av1_fwd_txfm2d_64x32_sse4_1;
+  }
   av1_fwd_txfm2d_64x64 = av1_fwd_txfm2d_64x64_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_64x64 = av1_fwd_txfm2d_64x64_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_fwd_txfm2d_64x64 = av1_fwd_txfm2d_64x64_avx2;
+  }
   av1_fwd_txfm2d_8x16 = av1_fwd_txfm2d_8x16_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_8x16 = av1_fwd_txfm2d_8x16_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_fwd_txfm2d_8x16 = av1_fwd_txfm2d_8x16_avx2;
+  }
   av1_fwd_txfm2d_8x4 = av1_fwd_txfm2d_8x4_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_8x4 = av1_fwd_txfm2d_8x4_sse4_1;
+  }
   av1_fwd_txfm2d_8x8 = av1_fwd_txfm2d_8x8_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwd_txfm2d_8x8 = av1_fwd_txfm2d_8x8_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_fwd_txfm2d_8x8 = av1_fwd_txfm2d_8x8_avx2;
+  }
   av1_fwht4x4 = av1_fwht4x4_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_fwht4x4 = av1_fwht4x4_sse4_1;
+  }
   av1_get_crc32c_value = av1_get_crc32c_value_c;
-  if (flags & HAS_SSE4_2)
+  if (flags & HAS_SSE4_2) {
     av1_get_crc32c_value = av1_get_crc32c_value_sse4_2;
+  }
   av1_get_horver_correlation_full = av1_get_horver_correlation_full_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_get_horver_correlation_full = av1_get_horver_correlation_full_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_get_horver_correlation_full = av1_get_horver_correlation_full_avx2;
-  av1_highbd_fwht4x4 = av1_highbd_fwht4x4_c;
-  if (flags & HAS_SSE4_1)
-    av1_highbd_fwht4x4 = av1_highbd_fwht4x4_sse4_1;
+  }
   av1_highbd_inv_txfm_add = av1_highbd_inv_txfm_add_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_highbd_inv_txfm_add = av1_highbd_inv_txfm_add_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_highbd_inv_txfm_add = av1_highbd_inv_txfm_add_avx2;
+  }
   av1_highbd_inv_txfm_add_16x4 = av1_highbd_inv_txfm_add_16x4_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_highbd_inv_txfm_add_16x4 = av1_highbd_inv_txfm_add_16x4_sse4_1;
+  }
   av1_highbd_inv_txfm_add_4x16 = av1_highbd_inv_txfm_add_4x16_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_highbd_inv_txfm_add_4x16 = av1_highbd_inv_txfm_add_4x16_sse4_1;
+  }
   av1_highbd_inv_txfm_add_4x4 = av1_highbd_inv_txfm_add_4x4_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_highbd_inv_txfm_add_4x4 = av1_highbd_inv_txfm_add_4x4_sse4_1;
+  }
   av1_highbd_inv_txfm_add_4x8 = av1_highbd_inv_txfm_add_4x8_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_highbd_inv_txfm_add_4x8 = av1_highbd_inv_txfm_add_4x8_sse4_1;
+  }
   av1_highbd_inv_txfm_add_8x4 = av1_highbd_inv_txfm_add_8x4_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_highbd_inv_txfm_add_8x4 = av1_highbd_inv_txfm_add_8x4_sse4_1;
+  }
   av1_highbd_inv_txfm_add_8x8 = av1_highbd_inv_txfm_add_8x8_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_highbd_inv_txfm_add_8x8 = av1_highbd_inv_txfm_add_8x8_sse4_1;
+  }
   av1_highbd_iwht4x4_16_add = av1_highbd_iwht4x4_16_add_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_highbd_iwht4x4_16_add = av1_highbd_iwht4x4_16_add_sse4_1;
+  }
   av1_inv_txfm2d_add_4x4 = av1_inv_txfm2d_add_4x4_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_inv_txfm2d_add_4x4 = av1_inv_txfm2d_add_4x4_sse4_1;
+  }
   av1_inv_txfm2d_add_8x8 = av1_inv_txfm2d_add_8x8_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_inv_txfm2d_add_8x8 = av1_inv_txfm2d_add_8x8_sse4_1;
+  }
   av1_inv_txfm_add = av1_inv_txfm_add_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     av1_inv_txfm_add = av1_inv_txfm_add_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_inv_txfm_add = av1_inv_txfm_add_avx2;
+  }
   av1_lowbd_fwd_txfm = av1_lowbd_fwd_txfm_sse2;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_lowbd_fwd_txfm = av1_lowbd_fwd_txfm_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_lowbd_fwd_txfm = av1_lowbd_fwd_txfm_avx2;
+  }
   av1_nn_fast_softmax_16 = av1_nn_fast_softmax_16_c;
-  if (flags & HAS_SSE3)
+  if (flags & HAS_SSE3) {
     av1_nn_fast_softmax_16 = av1_nn_fast_softmax_16_sse3;
+  }
   av1_nn_predict = av1_nn_predict_c;
-  if (flags & HAS_SSE3)
+  if (flags & HAS_SSE3) {
     av1_nn_predict = av1_nn_predict_sse3;
+  }
   av1_quantize_fp = av1_quantize_fp_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_quantize_fp = av1_quantize_fp_avx2;
+  }
   av1_quantize_fp_32x32 = av1_quantize_fp_32x32_c;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_quantize_fp_32x32 = av1_quantize_fp_32x32_avx2;
+  }
   av1_quantize_fp_64x64 = av1_quantize_fp_64x64_c;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_quantize_fp_64x64 = av1_quantize_fp_64x64_avx2;
+  }
   av1_quantize_lp = av1_quantize_lp_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_quantize_lp = av1_quantize_lp_avx2;
+  }
   av1_resize_and_extend_frame = av1_resize_and_extend_frame_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     av1_resize_and_extend_frame = av1_resize_and_extend_frame_ssse3;
+  }
   av1_round_shift_array = av1_round_shift_array_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_round_shift_array = av1_round_shift_array_sse4_1;
+  }
   av1_selfguided_restoration = av1_selfguided_restoration_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_selfguided_restoration = av1_selfguided_restoration_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_selfguided_restoration = av1_selfguided_restoration_avx2;
+  }
   av1_txb_init_levels = av1_txb_init_levels_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_txb_init_levels = av1_txb_init_levels_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_txb_init_levels = av1_txb_init_levels_avx2;
+  }
   av1_upsample_intra_edge = av1_upsample_intra_edge_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_upsample_intra_edge = av1_upsample_intra_edge_sse4_1;
+  }
   av1_upsample_intra_edge_high = av1_upsample_intra_edge_high_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_upsample_intra_edge_high = av1_upsample_intra_edge_high_sse4_1;
+  }
   av1_warp_affine = av1_warp_affine_c;
-  if (flags & HAS_SSE4_1)
+  if (flags & HAS_SSE4_1) {
     av1_warp_affine = av1_warp_affine_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     av1_warp_affine = av1_warp_affine_avx2;
+  }
   av1_wedge_compute_delta_squares = av1_wedge_compute_delta_squares_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_wedge_compute_delta_squares = av1_wedge_compute_delta_squares_avx2;
+  }
   av1_wedge_sign_from_residuals = av1_wedge_sign_from_residuals_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_wedge_sign_from_residuals = av1_wedge_sign_from_residuals_avx2;
+  }
   av1_wedge_sse_from_residuals = av1_wedge_sse_from_residuals_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_wedge_sse_from_residuals = av1_wedge_sse_from_residuals_avx2;
+  }
   av1_wiener_convolve_add_src = av1_wiener_convolve_add_src_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     av1_wiener_convolve_add_src = av1_wiener_convolve_add_src_avx2;
+  }
   cdef_copy_rect8_16bit_to_16bit = cdef_copy_rect8_16bit_to_16bit_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cdef_copy_rect8_16bit_to_16bit = cdef_copy_rect8_16bit_to_16bit_ssse3;
-  if (flags & HAS_SSE4_1)
+  }
+  if (flags & HAS_SSE4_1) {
     cdef_copy_rect8_16bit_to_16bit = cdef_copy_rect8_16bit_to_16bit_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cdef_copy_rect8_16bit_to_16bit = cdef_copy_rect8_16bit_to_16bit_avx2;
+  }
   cdef_copy_rect8_8bit_to_16bit = cdef_copy_rect8_8bit_to_16bit_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cdef_copy_rect8_8bit_to_16bit = cdef_copy_rect8_8bit_to_16bit_ssse3;
-  if (flags & HAS_SSE4_1)
+  }
+  if (flags & HAS_SSE4_1) {
     cdef_copy_rect8_8bit_to_16bit = cdef_copy_rect8_8bit_to_16bit_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cdef_copy_rect8_8bit_to_16bit = cdef_copy_rect8_8bit_to_16bit_avx2;
+  }
   cdef_filter_16_0 = cdef_filter_16_0_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cdef_filter_16_0 = cdef_filter_16_0_ssse3;
-  if (flags & HAS_SSE4_1)
+  }
+  if (flags & HAS_SSE4_1) {
     cdef_filter_16_0 = cdef_filter_16_0_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cdef_filter_16_0 = cdef_filter_16_0_avx2;
+  }
   cdef_filter_16_1 = cdef_filter_16_1_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cdef_filter_16_1 = cdef_filter_16_1_ssse3;
-  if (flags & HAS_SSE4_1)
+  }
+  if (flags & HAS_SSE4_1) {
     cdef_filter_16_1 = cdef_filter_16_1_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cdef_filter_16_1 = cdef_filter_16_1_avx2;
+  }
   cdef_filter_16_2 = cdef_filter_16_2_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cdef_filter_16_2 = cdef_filter_16_2_ssse3;
-  if (flags & HAS_SSE4_1)
+  }
+  if (flags & HAS_SSE4_1) {
     cdef_filter_16_2 = cdef_filter_16_2_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cdef_filter_16_2 = cdef_filter_16_2_avx2;
+  }
   cdef_filter_16_3 = cdef_filter_16_3_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cdef_filter_16_3 = cdef_filter_16_3_ssse3;
-  if (flags & HAS_SSE4_1)
+  }
+  if (flags & HAS_SSE4_1) {
     cdef_filter_16_3 = cdef_filter_16_3_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cdef_filter_16_3 = cdef_filter_16_3_avx2;
+  }
   cdef_filter_8_0 = cdef_filter_8_0_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cdef_filter_8_0 = cdef_filter_8_0_ssse3;
-  if (flags & HAS_SSE4_1)
+  }
+  if (flags & HAS_SSE4_1) {
     cdef_filter_8_0 = cdef_filter_8_0_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cdef_filter_8_0 = cdef_filter_8_0_avx2;
+  }
   cdef_filter_8_1 = cdef_filter_8_1_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cdef_filter_8_1 = cdef_filter_8_1_ssse3;
-  if (flags & HAS_SSE4_1)
+  }
+  if (flags & HAS_SSE4_1) {
     cdef_filter_8_1 = cdef_filter_8_1_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cdef_filter_8_1 = cdef_filter_8_1_avx2;
+  }
   cdef_filter_8_2 = cdef_filter_8_2_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cdef_filter_8_2 = cdef_filter_8_2_ssse3;
-  if (flags & HAS_SSE4_1)
+  }
+  if (flags & HAS_SSE4_1) {
     cdef_filter_8_2 = cdef_filter_8_2_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cdef_filter_8_2 = cdef_filter_8_2_avx2;
+  }
   cdef_filter_8_3 = cdef_filter_8_3_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cdef_filter_8_3 = cdef_filter_8_3_ssse3;
-  if (flags & HAS_SSE4_1)
+  }
+  if (flags & HAS_SSE4_1) {
     cdef_filter_8_3 = cdef_filter_8_3_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cdef_filter_8_3 = cdef_filter_8_3_avx2;
+  }
   cdef_find_dir = cdef_find_dir_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cdef_find_dir = cdef_find_dir_ssse3;
-  if (flags & HAS_SSE4_1)
+  }
+  if (flags & HAS_SSE4_1) {
     cdef_find_dir = cdef_find_dir_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cdef_find_dir = cdef_find_dir_avx2;
+  }
   cdef_find_dir_dual = cdef_find_dir_dual_sse2;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cdef_find_dir_dual = cdef_find_dir_dual_ssse3;
-  if (flags & HAS_SSE4_1)
+  }
+  if (flags & HAS_SSE4_1) {
     cdef_find_dir_dual = cdef_find_dir_dual_sse4_1;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cdef_find_dir_dual = cdef_find_dir_dual_avx2;
+  }
   cfl_get_luma_subsampling_420_lbd = cfl_get_luma_subsampling_420_lbd_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cfl_get_luma_subsampling_420_lbd = cfl_get_luma_subsampling_420_lbd_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cfl_get_luma_subsampling_420_lbd = cfl_get_luma_subsampling_420_lbd_avx2;
+  }
   cfl_get_luma_subsampling_422_lbd = cfl_get_luma_subsampling_422_lbd_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cfl_get_luma_subsampling_422_lbd = cfl_get_luma_subsampling_422_lbd_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cfl_get_luma_subsampling_422_lbd = cfl_get_luma_subsampling_422_lbd_avx2;
+  }
   cfl_get_luma_subsampling_444_lbd = cfl_get_luma_subsampling_444_lbd_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cfl_get_luma_subsampling_444_lbd = cfl_get_luma_subsampling_444_lbd_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cfl_get_luma_subsampling_444_lbd = cfl_get_luma_subsampling_444_lbd_avx2;
+  }
   cfl_get_predict_lbd_fn = cfl_get_predict_lbd_fn_c;
-  if (flags & HAS_SSSE3)
+  if (flags & HAS_SSSE3) {
     cfl_get_predict_lbd_fn = cfl_get_predict_lbd_fn_ssse3;
-  if (flags & HAS_AVX2)
+  }
+  if (flags & HAS_AVX2) {
     cfl_get_predict_lbd_fn = cfl_get_predict_lbd_fn_avx2;
+  }
   cfl_get_subtract_average_fn = cfl_get_subtract_average_fn_sse2;
-  if (flags & HAS_AVX2)
+  if (flags & HAS_AVX2) {
     cfl_get_subtract_average_fn = cfl_get_subtract_average_fn_avx2;
+  }
 }
 #endif
 
-- 
1.8.3.1

